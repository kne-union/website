{"remote-components":[{"name":"components-core","packageName":"@kne-components/components-core","version":"0.1.16","versions":{"0.1.10":{"version":"0.1.10","fileCount":614,"integrity":"sha512-EfV/HVEZu3rhotB2AIwFkEEZ2B2I8Bl2CX2eKEWIHW0lJa3wdKviCKeZWXTz1jngYwXFdi2octzKBhBqfF9xtA==","shasum":"8adb3d094fc6029482f65b4529612aa41d5c0a3a","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEaWLEvw8hV3XuZX3Q8Hp6FJm6/OXL9uPYC6DSzQ9oGNAiAkpTiCSv42dK+QEFKQA7Iroxs/81wqRIzl2vCucMHtHA=="}],"tarball":"https://registry.npmjs.org/@kne-components/components-core/-/components-core-0.1.10.tgz","unpackedSize":53036820,"time":"2024-02-06T02:12:43.592Z"},"0.1.11":{"version":"0.1.11","fileCount":616,"integrity":"sha512-n7qXROwJXGN/xMTorgluEZoApDljOVu4afrdt8rQEpOa3igsxFZ08SC0w/pvd2Dd4zlTHXUoOB2mgzoSbWGijQ==","shasum":"6be52559b187612aa8bc1b17db2166b4909b9558","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDX1lIx+Jy1Ch9tostSbew3HejBoKGB78m39N0Z57bQwAIgcek79YPtFZu2EsuHm408JqabKff9VVlxeM7TNRfGiMg="}],"tarball":"https://registry.npmjs.org/@kne-components/components-core/-/components-core-0.1.11.tgz","unpackedSize":51906089,"time":"2024-02-07T05:06:30.500Z"},"0.1.12":{"version":"0.1.12","fileCount":616,"integrity":"sha512-bK5CNZoy7IzwLyKDYy/jbpCZYKsSUuG0zz0C1oC/sxecpOAfLYDeFv/zRmWJO0yiIFXIROBinkjWaOK9cxxUZQ==","shasum":"31549f7ac015544fb95eefd699410105b471b364","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBpG4lbHocIx9bh49aYGKXXkQ7VgV6kwtMfTejF6uMsyAiAXx+g+JNQ4bC9Dl+rdrez0nZs8q1IgNZEIW0HJpUYV0g=="}],"tarball":"https://registry.npmjs.org/@kne-components/components-core/-/components-core-0.1.12.tgz","unpackedSize":51907282,"time":"2024-02-07T05:57:13.188Z"},"0.1.13":{"version":"0.1.13","fileCount":616,"integrity":"sha512-ZC/ymsQ466Ieqv4hg8JT16Gyorl8PcK57fwMnNItcRa1/7dJc0iFduoNEHdgvO44uzVUEwcZBl/PE9EJgdKxog==","shasum":"e16a5a0757996aa6d57c5a514f06ff6d96082fe0","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCsJ69HGG4JuoK0r+fZYgcVfKOXEUhsm1jHBZUxlzxAJgIhAOWZNllhQOz1UOcSFbp+Ciuka9RVKDokfNYY/x1AP0w/"}],"tarball":"https://registry.npmjs.org/@kne-components/components-core/-/components-core-0.1.13.tgz","unpackedSize":51926232,"time":"2024-02-20T08:41:40.778Z"},"0.1.14":{"version":"0.1.14","fileCount":616,"integrity":"sha512-xKY/H/Y4UtmxmqlBfVgYMW2IWsoN65HohO8rbt5nqE5US42F0zva1C24M+ZDQ8d6mnU7mlytzfA4hF1pYP2VCQ==","shasum":"350d2a602cd0ad5ac4edf39788cdb186929dbbc5","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC1yIM59FNJS8ezGVD9VZEGTdxf4oIKkDFG8RzKLJdPVgIhAKEDheuUVOcdDQsgGPvhLF348hKKL4iP0XPcUG/DXJYl"}],"tarball":"https://registry.npmjs.org/@kne-components/components-core/-/components-core-0.1.14.tgz","unpackedSize":51914771,"time":"2024-03-04T06:58:11.028Z"},"0.1.15":{"version":"0.1.15","fileCount":616,"integrity":"sha512-RyBBDUoryf+oY0kACQU8vh3jLrJaXCpNFrMXO53o8lodlXOkibMVSze6FQgqEhzKdtmC2dEnqVtM6WsIr6cu0Q==","shasum":"47310d60fe8b0752315500c0cb65ea0e5f8483af","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFRayJ6vuXau5KAfBk1Fa05ryT+SZfXAvIfu8CiN5dgRAiAmUjeemTbsir+pLm5io3E9BR1zRvLEhhGx2DhJ70i6Ew=="}],"tarball":"https://registry.npmjs.org/@kne-components/components-core/-/components-core-0.1.15.tgz","unpackedSize":51916640,"time":"2024-03-04T07:32:15.373Z"},"0.1.16":{"version":"0.1.16","fileCount":624,"integrity":"sha512-UMrbqpwcO8BccHKAcSHcFdXLEeVEtfkpfKAMqa3XpV5Xwgr2tL6w2PGGt3Frpm3fjxmURK7UittiK/g9j0JgqQ==","shasum":"b388bc096cc915fb6f9b05264b41a6c688d68413","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDUuvrOECopp8svpuXT8NFnsvWJFYuxHQZ37TMB6GvWYAIgAiey81HCKJq1VYQlOKhycfNGZWWoue2VdMBNfERKn54="}],"tarball":"https://registry.npmjs.org/@kne-components/components-core/-/components-core-0.1.16.tgz","unpackedSize":51558261,"time":"2024-03-07T10:11:42.332Z"}}},{"name":"components-iconfont","packageName":"@kne-components/components-iconfont","version":"0.1.3","versions":{"0.1.3":{"version":"0.1.3","fileCount":331,"integrity":"sha512-KoCjntuUy/UgJA/8Cdv2cLKWP9eGIpsA+bMxAqCCtUjc3/J6jdZXQnrKUCrH9m5YblCCen3dzFPRHRMAly440Q==","shasum":"d83aa47965fae4edbc655e7eed47df724e3213fe","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE9VtiYjAqyXLvlhfuU1pE0xeVKcNueT/o11a7zO7xRVAiEAvh4cxMVYeo96Gci/9DhKlPF3FVZ/iTZt2OBUR9pmSGE="}],"tarball":"https://registry.npmjs.org/@kne-components/components-iconfont/-/components-iconfont-0.1.3.tgz","unpackedSize":20103130,"time":"2024-02-06T02:24:03.163Z"}}},{"name":"components-field","packageName":"@kne-components/components-field","version":"0.1.2","versions":{"0.1.0":{"version":"0.1.0","fileCount":43,"integrity":"sha512-0z0QYIsWzvy8oQCPXa3klxg8Ap6UeGyYmPkP6ofTX51/SJwz3Z6IRn4PF5nZe+b7/FFmNGovXZqheas95oLiKg==","shasum":"9d9cd282547548ba80381ce33fc708d9e62708d8","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDEGEkORU8ykfyCo4ZvYIHa4jxxSkJh2YPIeVujV3oTwAiEAjaBJAntezuqRLTXJ113apQpgx6N1mJF03fAb6DRkovo="}],"tarball":"https://registry.npmjs.org/@kne-components/components-field/-/components-field-0.1.0.tgz","unpackedSize":55539,"time":"2024-02-20T09:25:05.649Z"},"0.1.1-alpha.1":{"version":"0.1.1-alpha.1","fileCount":43,"integrity":"sha512-Z1uysYcZahJbvxtn88R5PplkcZJYmmRTCH5VZFtauI9lGT1v9sGEwLRtEMAOguoSYrh7pu6Y0z3VbwtY/ObUVg==","shasum":"e6687949cd69c6cb6d11e9ee54105df287efc8d7","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCJou4WV2K9+aLG+nxGqXbm2UBSEBsxn4mFwctb/QBcwQIhAPE6omAeyIvMNPGW2/ugGi3c6GjRkVhOLuOZr914acV6"}],"tarball":"https://registry.npmjs.org/@kne-components/components-field/-/components-field-0.1.1-alpha.1.tgz","unpackedSize":55353,"time":"2024-02-20T09:41:40.775Z"},"0.1.1":{"version":"0.1.1","fileCount":70,"integrity":"sha512-L0V41LHPsB/BytoSaun6yAXQRLfZqbzk8TOYMLP21TQIExuvqUQZNx0beNRvLMmM1176TxKtAITlY+Q7Zp5elA==","shasum":"7f58ac1cb91559a829643578bf2bc55087aa1885","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC1J6H05RxaHHyHzZtO6ykX2HemIVbqxJzdlCk6lgYipQIgEnbHddJD/9oqCpqmWqLiO4cYfs5ARNwZO+Ubs/4469c="}],"tarball":"https://registry.npmjs.org/@kne-components/components-field/-/components-field-0.1.1.tgz","unpackedSize":20010390,"time":"2024-02-20T10:04:06.556Z"},"0.1.2":{"version":"0.1.2","fileCount":66,"integrity":"sha512-xQUsP6/YVkkdcCLLdeB6Cvee7XOJlDoX2fLLu667QXAoW8Rj3aCwtfEp7gsfUMFcjMazhSoSqiQc2FPF2sCYzg==","shasum":"948b95af555502bf75702cbaae1d05f37eea0581","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHOdKqF5RusNbJeQ+iQP70nv4YKTVvF4tq7bFnQ9Amx3AiBzrEBleCffKQaw/pIWkMBYfR1mYYuHT36AmdhTbvuolQ=="}],"tarball":"https://registry.npmjs.org/@kne-components/components-field/-/components-field-0.1.2.tgz","unpackedSize":20001211,"time":"2024-02-20T10:37:42.744Z"}}},{"name":"components-account","packageName":"@kne-components/components-account","version":"0.1.1","versions":{"0.1.1":{"version":"0.1.1","fileCount":104,"integrity":"sha512-qngP5WlmKRpFPwCGXI8k9r5i2YAeoBqcWyrIgq2iGvYQQZoreKFCYo+AkBOjL+ojOsWOV9cS0ttyDVbVoVU8sQ==","shasum":"6de178a0c8fe116bcfb87d6b5a5997bdf01b604d","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5crfCLPUU6KIPpH0X5QJv8P7AtN3lvBhijMR3/AXOowIgUrK1lr5oq/OIHfchDPFr2AiDBdIotAuBB2KtADFWP8Y="}],"tarball":"https://registry.npmjs.org/@kne-components/components-account/-/components-account-0.1.1.tgz","unpackedSize":20228640,"time":"2024-02-21T02:30:04.899Z"}}},{"name":"components-ckeditor","packageName":"@kne-components/components-ckeditor","version":"0.1.2","versions":{"0.1.0":{"version":"0.1.0","fileCount":134,"integrity":"sha512-eA5Fofw1oGhInsYhMy6plPa2PEVjeEvoguLM82UCJszSGkPSozNNpublrHu9OwgPjp3mREX3T/aXAhPGHx4pbg==","shasum":"6d19b36c51156ac0b6c0019aae9a1151b5fae6e6","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFoy+E6yBoqbyYlAwREapd7Z60WJaHrkuwD6+CDKJyTZAiEA9fBX9/jcpOPvIiC2Ij76hC6z3DeCFLDDASFZDwc8Q74="}],"tarball":"https://registry.npmjs.org/@kne-components/components-ckeditor/-/components-ckeditor-0.1.0.tgz","unpackedSize":28975695,"time":"2024-02-26T04:02:15.478Z"},"0.1.1":{"version":"0.1.1","fileCount":134,"integrity":"sha512-Ltksp+kQOImxkb3xNaf+ryhQgZCjke1ruJPIcsgfADMa9ewuyrJMKKqMVk5gAo11R33asgMdIrdlUWukQs2skw==","shasum":"b38756ee9a8835ff936b98d0911315ea519b0d58","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDP9gxQVHQS9nagzjJwUm9sObVAGAJBBVEQklgshn32AQIhAPKAHajje0AwZyShhAkSIO/Mlc4KTXxcNO/S2bqwFIeI"}],"tarball":"https://registry.npmjs.org/@kne-components/components-ckeditor/-/components-ckeditor-0.1.1.tgz","unpackedSize":28981012,"time":"2024-02-26T05:06:18.230Z"},"0.1.2":{"version":"0.1.2","fileCount":139,"integrity":"sha512-Ei0zlGNAYZnzpbpFeslEnXrK/NP2im6Zz/Lbw1Qv2U+tFUYS3KCcte7jS4e2sRb0nNDLnqMk3vAGSxmn75Bedw==","shasum":"9d5ed2071f808f4beb7746a0fa591bf00afa5445","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICln/APV1IgVDbazxbjha2CJqoszs095FwzAymlMNVupAiA3yOqM5xaOz9ngsCbT6Y4hYMNgKac2nwtUAGtICO+TPA=="}],"tarball":"https://registry.npmjs.org/@kne-components/components-ckeditor/-/components-ckeditor-0.1.2.tgz","unpackedSize":29494760,"time":"2024-02-26T10:09:21.566Z"}}},{"name":"components-document","packageName":"@kne-components/components-document","version":"0.1.3","versions":{"0.1.0":{"version":"0.1.0","fileCount":150,"integrity":"sha512-YwTZ1Q3uffoYMHFYb2kyZsF7WH3XDKjHSppfan/Fn2cTYG+CSBXwjUEUhmR/Qfz4BkIiQ81q3xwWyxfGTn1urw==","shasum":"d80681fac24efa817bb676fc9037d6c6414398ad","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFaVfAb+6o/7Hwu9/GRqCK+VNV80zZQGtPtDSLaOtEt7AiBYXp2Lqv+QbuXL+FRF6DyGf7l2Kc4NB6OxfyM4gUz1yg=="}],"tarball":"https://registry.npmjs.org/@kne-components/components-document/-/components-document-0.1.0.tgz","unpackedSize":34423793,"time":"2024-03-01T01:45:45.573Z"},"0.1.1":{"version":"0.1.1","fileCount":150,"integrity":"sha512-7Syxn1O3Qsz7msHoO/2vuGyCONnMcvpbQ8P9W2ROvDOMNAd7SfdAIvhCCi+OmKmuqrmDsx/HKqeMLkcWwlKKAg==","shasum":"85fe488c8f5bc0cd5ead75802ba4ab00d80249bd","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGWXC7U54dPGacP6jwBGKty2yI8l6j5Q6FR+/tm8/dDEAiEAv+tKLdI4qRarIdtpP/eTAvC+A81LIgvNRDMJOLqUPw0="}],"tarball":"https://registry.npmjs.org/@kne-components/components-document/-/components-document-0.1.1.tgz","unpackedSize":34425025,"time":"2024-03-01T08:00:56.995Z"},"0.1.2":{"version":"0.1.2","fileCount":150,"integrity":"sha512-4q/kBI0dyG4EtZcjExyBQ4unuw1HirYF5USz8IVd5ybZx3hdHaArTe1Q+BM27RCyIfQ+o2El2BxJVQBw0kMTFA==","shasum":"46c789cc38803bbcd95c654e84cd97fb411b70dd","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG8xNQPYSpsd1frvlQJr3rtjjFfiYlS7UdhkBLluBEoyAiEArsqjl6/AvhPSc9JN3nkfRCgxr/qLLynqVGGgRNAEzvg="}],"tarball":"https://registry.npmjs.org/@kne-components/components-document/-/components-document-0.1.2.tgz","unpackedSize":34424890,"time":"2024-03-01T08:06:42.086Z"},"0.1.3":{"version":"0.1.3","fileCount":152,"integrity":"sha512-iJQRKaScWdyEQm3Sx1Zsl55/vjStYFoVaBtX18BroxoofJ50xaIFPHKEDmnpOq3Mr+7TMj5VbuekC1D7d7stZA==","shasum":"5c8337bd2234dc9b960423cd079a45e126e63a5e","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDUpWueN9tCb2oG8wxlxC+dOQksRhP9i2sLl/SkJwS58AIhAN2D8iyL8BBWyYxOFl3/nf9eBiTXGazGqCE/O0V+uQa2"}],"tarball":"https://registry.npmjs.org/@kne-components/components-document/-/components-document-0.1.3.tgz","unpackedSize":35696567,"time":"2024-03-12T07:00:30.988Z"}}},{"name":"components-postcat","packageName":"@kne-components/components-postcat","version":"0.1.2","versions":{"0.1.0":{"version":"0.1.0","fileCount":98,"integrity":"sha512-PlABB9cC+BC1+myoaMjGVkz1bGM0yaWjMVi0Ej65Hc+2hRiMVzQ4yYxOlnvD0p6Y7cof6/du6vsAmAqgbJmNZQ==","shasum":"a7a33ab41e990afc123e79a956cb08052488a553","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCq3YJ5FM05zQ9aQazgJDs/n2bEJGEKbaxj/lkiG8kKVwIgKAVYXio1SCyn6wkkjnLJlBBP0sDfWHM+Y+sl8gpBt+s="}],"tarball":"https://registry.npmjs.org/@kne-components/components-postcat/-/components-postcat-0.1.0.tgz","unpackedSize":195392,"time":"2024-03-12T10:23:44.224Z"},"0.1.1":{"version":"0.1.1","fileCount":87,"integrity":"sha512-TpSGCsbZ8itsvXj2f5MtU5fzwpey+ymjN3BsUQDSkHlcenNSQyXsfw9UxFr9YseaVFr7i1qzvJ7UoI5BZCzWDQ==","shasum":"96599b96d0e146e9f059f54ba19c862bf63d9f7b","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCw4BYux8wl6WUzMTSjD4A+9jvdIZxIHqBnlek+bEOkqQIgd9PZPo/YlI92EYusGEepyjgjpVWrrctml5Xi6qE+KD0="}],"tarball":"https://registry.npmjs.org/@kne-components/components-postcat/-/components-postcat-0.1.1.tgz","unpackedSize":20548449,"time":"2024-03-12T10:29:05.248Z"},"0.1.2":{"version":"0.1.2","fileCount":87,"integrity":"sha512-pM6tHBcFDUzd1ZVs8LDwoqq9M+QXbbT4Uobc6vVpa85lImscwSl1MWo/oAzmow9Clzf4u+R+k4kyW1kC+taFDQ==","shasum":"85fa6704be0fc2260875bab238956dbf36edf187","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDK917hX+F35KYdNf6HKjqWJ2hqCuf4qpKaQnotPqNUMAiAE/VO1k3TY/FGXM2Z74oBr9Fp6YqS7PrZdnyqLhTdeMA=="}],"tarball":"https://registry.npmjs.org/@kne-components/components-postcat/-/components-postcat-0.1.2.tgz","unpackedSize":20530643,"time":"2024-03-13T02:13:24.101Z"}}}],"libs":[{"name":"remote-loader","packageName":"@kne-components/remote-loader","version":"1.2.3","versions":{"1.2.3":{"version":"1.2.3","fileCount":49,"integrity":"sha512-/avNF69AU62DCh8EBEb3rREmC66zUdVg1aPJxfHL/RXbEzOJq75qT5bcI1a7931RIGSXEmWRS0iPZxuNwwYZGA==","shasum":"5a84ee4cf4cac440a4b0d2480cb1f3077aee5e1c","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHqciLv01uJMW4QxTsuGZ8uquajA6EeASfaPW/qKRRFHAiEAjLcrfZxz5MQ/dkFZxYWbgNIhY8ePVE6LZil9bL8ygtE="}],"tarball":"https://registry.npmjs.org/@kne-components/remote-loader/-/remote-loader-1.2.3.tgz","unpackedSize":20475624,"time":"2024-02-08T02:21:54.136Z"}}},{"name":"react-form","packageName":"@kne-components/react-form","version":"2.2.2","versions":{"2.2.2":{"version":"2.2.2","fileCount":55,"integrity":"sha512-mLv58bYPkfrR9ccQw5qghxOQFjwTpemQCkx9uxRSkAOegC/QfDmpZspR4FwNH7PZz5vPzDkikVp2QH2WiVLhKQ==","shasum":"8bb637bc6d7a13ede3f77203cc717f324651e51b","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDouYovIV6y1CqyxYU/N3dJpROkX92qvyQ0QkfAsEvl6AiAeyaq7eRl7thFVWp82HU4dmpQGQneUY9rlLk7yE5i19g=="}],"tarball":"https://registry.npmjs.org/@kne-components/react-form/-/react-form-2.2.2.tgz","unpackedSize":20639049,"time":"2024-02-07T03:00:56.439Z"}}},{"name":"react-form-antd","packageName":"@kne-components/react-form-antd","version":"3.1.2","versions":{"3.1.2":{"version":"3.1.2","fileCount":77,"integrity":"sha512-5OUWwERvvk2UsgNXYb6WHDoy4OORbaxXR2Cty5HEXe/ypiFssZDCUGuOSnBPH3oaRhvtRmNkTL7r519zyN6JNQ==","shasum":"b83f8461b003ddda5590726a7aea4417c1a63c21","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEavHkM/vctMsl6gNHiiR6rDxLx1qErQNOgL4xFEud6WAiEAgsYj2Q1gTrglh53RlaMEaA90Cuv/Qwjr5cdUgZLFB9U="}],"tarball":"https://registry.npmjs.org/@kne-components/react-form-antd/-/react-form-antd-3.1.2.tgz","unpackedSize":29118698,"time":"2024-02-07T07:32:47.295Z"}}},{"name":"jsonschema-form","packageName":"@kne-components/jsonschema-form","version":"0.1.0","versions":{"0.1.0":{"version":"0.1.0","fileCount":61,"integrity":"sha512-uEsBMSNA25LqoT1hxv+00KE3I6N8c0/NgS2yio4q92UJ7wYoRmc3/UwDy8ISYrGPv+Pn7Q59TEGhceDyYMin3A==","shasum":"98d920e716d411c4e6518084d42e74cf4fc73ecf","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFM18B0Gkm77ouJSwvhrlXEeSEACTf6oV1CQlMf9fwuGAiBN9Idy3oTIM0g40ncDD6S8eobY8xH+Fm1EfWUeAusKSA=="}],"tarball":"https://registry.npmjs.org/@kne-components/jsonschema-form/-/jsonschema-form-0.1.0.tgz","unpackedSize":21127875,"time":"2024-02-27T10:27:19.868Z"}}},{"name":"react-fetch","packageName":"@kne-components/react-fetch","version":"1.4.3","versions":{"1.4.3":{"version":"1.4.3","fileCount":45,"integrity":"sha512-VDUahuEilZiFfSFtyDgtZfh1IL1DGYKluzKzeCGt4hlsAJSw8Rh+nhQ1qH/wDaJ7HK53tE6WB3MAcPfOuE0bHQ==","shasum":"0c1be0d9649cf808e1cb76e2691ca0a1fe0f34a9","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBNvGZ/rS/jrLXr5vk+V/dz4l0h5d3HY3wpooGIEtJCEAiEAz6/0w8BdbtAkspX6gppASDZFSe6rw/EbINasCbZvp6s="}],"tarball":"https://registry.npmjs.org/@kne-components/react-fetch/-/react-fetch-1.4.3.tgz","unpackedSize":20321366,"time":"2024-02-07T10:11:04.792Z"}}},{"name":"react-org-chart","packageName":"@kne-components/react-org-chart","version":"0.1.6","versions":{"0.1.6":{"version":"0.1.6","fileCount":48,"integrity":"sha512-wZta5VINucj455mxN59fkY3MhKAeJannGzmcpCcPRYe3GCTfPtQ+h8UxgZ9RFyHUb9351SvQaGaVf+Wcst/e4A==","shasum":"0ceedd9e2dd820fc0f4042adc6834ce980643d2d","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCEiLbRBX13e2lrvCVbtBiGM6MfoMm2HR54xRxN2MJE6QIhAKfEm9sUwRoWY0SiddaRugnlWo65c9aqTK0MTtkJhoMY"}],"tarball":"https://registry.npmjs.org/@kne-components/react-org-chart/-/react-org-chart-0.1.6.tgz","unpackedSize":19718962,"time":"2024-02-07T08:45:03.986Z"}}},{"name":"use-css-variables","packageName":"@kne-components/use-css-variables","version":"0.1.1","versions":{"0.1.1":{"version":"0.1.1","fileCount":53,"integrity":"sha512-5q6vb7uvYG9fxtqGx8s45RHzAIhZhAxu777bZOJMWb4fEsjvh/X0uvkD3wj88cLNdOxp1j8FeZKdE/0XK9GxFw==","shasum":"fc8621e5339b42ff5b4f18dc3166023ad5697267","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC8hCv94TlH47pHuM6Hx5CFmLHg01AkAWTPrhpKWDSYcAIhAJwN8wl2xHOU++Mcl+B+yP3C2IjxYVRRWN9qsru4lZVd"}],"tarball":"https://registry.npmjs.org/@kne-components/use-css-variables/-/use-css-variables-0.1.1.tgz","unpackedSize":27303342,"time":"2024-02-08T03:11:29.792Z"}}},{"name":"use-click-outside","packageName":"@kne-components/use-click-outside","version":"0.2.1","versions":{"0.2.1":{"version":"0.2.1","fileCount":52,"integrity":"sha512-u+XDpwNbcEmmYUwkASxkQAyT9F0r4QIjxIOHCogB8MsOYS/pZo51e2psfDWFvHOj3x/jZPW1tmopYIkQWzFi1A==","shasum":"424fadc92b588f6cf0295f881ffd9b6fe0fb8ebd","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGUHYvgQT001FiLswL+U0+gQwazgIgY4pwPz5kHjmPK3AiBcEX6YhqDTvmw7/G8DqKcF8v7Cht/MfvGroWuigSvWGg=="}],"tarball":"https://registry.npmjs.org/@kne-components/use-click-outside/-/use-click-outside-0.2.1.tgz","unpackedSize":20316458,"time":"2024-02-08T03:32:30.229Z"}}},{"name":"use-simulation-blur","packageName":"@kne-components/use-simulation-blur","version":"0.1.2","versions":{"0.1.2":{"version":"0.1.2","fileCount":52,"integrity":"sha512-sELIwgipmnzfiaBeYaRAG6ZcS2lrA6/yQivLcQ0dcYxMKah7ZUnjK1JhR55OUU2uFPEoGPOqQmRtdwVxnce7aA==","shasum":"9d4f321346ca4db0125e5f9a1262dafd014676ff","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC1aFl7CqM7EN5X9p4qRrv4IYmb9nNSa8JJnxcTPrxzugIgShgTA4bKeR1EqTt2tBas0xXVjbJ6p0UflR9C307VP3c="}],"tarball":"https://registry.npmjs.org/@kne-components/use-simulation-blur/-/use-simulation-blur-0.1.2.tgz","unpackedSize":20704369,"time":"2024-02-08T03:51:41.872Z"}}},{"name":"react-file-type","packageName":"@kne-components/react-file-type","version":"1.0.6","versions":{"1.0.6":{"version":"1.0.6","fileCount":53,"integrity":"sha512-U1rtHFNtrzgu0mBQdeSuoPz8+nAmmQcrIBRPOuEEaR9zULJJG8LbHjaijq5qxy/he+4RUoJRb4RAf/ACRQjxpw==","shasum":"2454ebef2104b5aaa66a9b2ae9afa58ba56de09a","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD/V+m9Xli2B+2Ub+2qgM7Hin932ehKC0Bur6L4/IgeMQIhAM6e0I0vefxqwHrkqBC+xZte75X5BvlYZtYX39jvU5OZ"}],"tarball":"https://registry.npmjs.org/@kne-components/react-file-type/-/react-file-type-1.0.6.tgz","unpackedSize":20162965,"time":"2024-02-07T10:39:28.762Z"}}}],"miniprograms":[{"name":"mini-core","packageName":"@kne/mini-core","version":"2.0.28","versions":{"2.0.28":{"version":"2.0.28","fileCount":8,"integrity":"sha512-ZU4TuBvaJOKRuvK50XZNlAGKfBXcS4a14dmlBB4/grEY8WXMPrTX/OUqyJ+KsUWcuu1tgccxU28r2Ia/OAUsng==","shasum":"5fe07a6014703e3c061275800f4027881b1360c2","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG5iO6iaH0WQ4vxNOPjCN+F0xJkAvX7YTntMafyMbXOkAiEAw+DUj1atRvYWWopjczHm/YOBpm3x5FaSVoLtnoo7bRI="}],"tarball":"https://registry.npmjs.org/@kne/mini-core/-/mini-core-2.0.28.tgz","unpackedSize":1431825,"time":"2024-02-28T12:48:25.535Z"}},"readme":{"name":"mini-core","summary":"<p><em><strong>mini-core</strong></em> 是一个Taro的高级组件库，它有别于 <em><strong>@kne/antd-taro</strong></em> 只提供简单的UI交互组件，它旨在解决toB类小程序应用中的复杂场景问题，例如：</p>\n<ol>\n<li>主题色问题</li>\n<li>Layout问题</li>\n<li>弹出页面问题</li>\n<li>表单问题</li>\n<li>列表下拉加载问题</li>\n<li>详情页展示问题</li>\n<li>筛选项问题</li>\n<li>登录用户信息问题</li>\n<li>显示项权限问题</li>\n<li>枚举值问题</li>\n<li>服务器获取数据及接口管理问题</li>\n<li>解决了项目中的components开发及调试问题</li>\n</ol>\n<p>它按照目前主流的形式解决了以上问题，可以作为一个应用的底层。\n它提供了相对较大的组件粒度，也对应用做出了一定程度的规范。使用它能快速构建这一类型的小程序。\n它提供了一个components的开发及调试环境和文档编写规范，可以使项目拥有一个良好的组件开发流程和规范，避免和业务混淆在一起</p>\n<h4>使用脚手架</h4>\n<p>你可以使用Taro官方提供的脚手架初始化项目</p>\n<pre><code class=\"language-shell\">npm install -g @tarojs/cli\n</code></pre>\n<pre><code class=\"language-shell\">taro init myApp\n</code></pre>\n<p>或者使用npx执行</p>\n<pre><code class=\"language-shell\">npx @tarojs/cli init myApp\n</code></pre>\n<p>初始化完成之后安装<em><strong>mini-core</strong></em>包</p>\n<pre><code class=\"language-shell\">npm i --save @kne/mini-core\n</code></pre>\n<p>然后安装example演示程序及components所需包</p>\n<pre><code class=\"language-shell\">npm i --save-dev @kne/mini-example @kne/md-doc\n</code></pre>\n<p>package.json的scripts中添加对应的启动命令</p>\n<pre><code class=\"language-json\">{\n  \"init\": \"mini-example install &amp;&amp; create-md &amp;&amp; mini-example build\",\n  \"start\": \"npm run build:md &amp;&amp;npm run build:doc &amp;&amp; run-p dev:weapp start:md start:doc start:example\",\n  \"build\": \"run-s build:weapp build:md build:doc build:example\",\n  \"build:weapp\": \"taro build --type weapp\",\n  \"dev:weapp\": \"cross-env NODE_ENV=production npm run build:weapp -- --watch\",\n  \"build:md\": \"create-md\",\n  \"start:md\": \"create-md --watch\",\n  \"build:doc\": \"mini-example build\",\n  \"start:doc\": \"mini-example start\",\n  \"build:example\": \"cd example &amp;&amp; npm run build:weapp\",\n  \"build:example:dd\": \"cd example &amp;&amp; npm run build:dd\",\n  \"start:example\": \"cd example &amp;&amp; cross-env NODE_ENV=production npm run build:weapp -- --watch\"\n}\n</code></pre>\n<h4>示例程序的使用</h4>\n<ol>\n<li>新建components目录</li>\n<li>新建文件 项目根目录/temp/config/alias.js 并添加</li>\n<li>按照examples规则在doc文件夹下完成对应的示例程序</li>\n<li>执行npm run start</li>\n<li>在小程序调试工具中打开 项目根目录/example 进行组件示例调试</li>\n</ol>\n<pre><code class=\"language-js\">module.exports = {\n    '@components': require.resolve('../../src/components'),\n};\n</code></pre>\n<h4>最佳实践</h4>\n<p>我们推荐把所有复杂逻辑都封装成组件放在components文件夹里，并且在doc里面完成对应的文档和示例，在pages里面调用时只包含简单的组件组合以及少量参数的传递。不要把业务写在pages里面，因为那通常不可维护。</p>\n<p>把组件里面的api调用参数及逻辑全部放在项目的preset.js里面。</p>\n<p>在开发阶段，通过mock接口数据来完成components里面具体业务组件的编写，不要硬依赖后端api。</p>\n<p>components内的组件命名尽量可以看出派生关系和业务所属。</p>","api":"<h3>Global</h3>\n<p>Global管理了一个全局的Context，preset及公共样式，css变量，dayjs默认插件引入，dayjs汉化语言包引入等</p>\n<p>Global组件需要放在最外面，推荐在app.js中</p>\n<p>常见的 preset如下：</p>\n<p>ajax: 发送ajax请求的方法，通常为axios.create()对象。因为在项目中可能回存在给axios对象添加拦截器或者其他config的情况，所以在应用内部用到的地方均应获取该对象使用。</p>\n<p>apis: 该应用的所有后端apis，应用内部，不管是组件还是业务在使用api时都应从这里获取，以保证后端api的可迁移性</p>\n<p>enums: 枚举定义，应用内部用到枚举的都应该通过Enum组件获取，Enum组件会根据此配置去加载对应的枚举数据</p>\n<p>formInfo: FormInfo组件会从此获取应用的Form预设配置</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>preset</td>\n<td>全局preset设置</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n</tbody>\n</table>\n<h3>Filter</h3>\n<p>一般放在页面顶部作为条件筛选</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter</td>\n<td>筛选器的值</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>筛选器值修改时触发执行</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>Filter.SearchBar</h4>\n<p>一般放在Filter顶部，负责关键字文本搜索部分</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>Filter.StateBar</h4>\n<p>负责状态筛选</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>items</td>\n<td>状态列表，为{key,children}结构的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h4>Filter.OptionsBar</h4>\n<p>负责复杂多条件筛选</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>items</td>\n<td>状态列表，为{key,label,type}结构的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>type可选值: CitySelect, ListSelect, UserListSelect, FunctionSelect, IndustrySelect</li>\n<li>其他所需参数和对应type的组件参数一致</li>\n</ul>\n<h3>InfoPage</h3>\n<p>用以显示复杂数据</p>\n<h4>InfoPage.Part</h4>\n<p>放置于InfoPage内部显示带标题内容，如果InfoPage.Part内部再放置InfoPage.Part显示为二级标题，再放置一层则不显示标题</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>额外操作，显示于标题行最右侧</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>InfoPage.Collapse</h4>\n<p>放置于InfoPage内部显示止折叠面板</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>activeKey</td>\n<td>打开的折叠面板key</td>\n<td>array,any</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>defaultActiveKey</td>\n<td>打开的折叠面板key,在需要非受控时使用</td>\n<td>array,any</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>折叠面板展开或收起时触发事件</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>items</td>\n<td>折叠面板内容为{key,title,children}格式的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h3>Enum</h3>\n<p>显示或获取枚举值</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>moduleName</td>\n<td>枚举值的名字，在preset设置的枚举对象的key,当其为数组时可以一次性获取多个枚举值列表</td>\n<td>string,array</td>\n<td>-</td>\n</tr>\n<tr>\n<td>name</td>\n<td>枚举值的key，用来从moduleName的枚举值列表中获取对应key的值，传入该参数时moduleName不能为数组，不传时可以获取到整个枚举列表</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>children</td>\n<td>获取到枚举值，当组件有name传入时获取name所对应的枚举值，如果没有name传入则获取到整个枚举列表，如果moduleName为数组获取到对应的多个枚举列表</td>\n<td>function</td>\n<td>({description})=&gt;description</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>加载枚举值期间显示内容</td>\n<td>jsx</td>\n<td>null</td>\n</tr>\n<tr>\n<td>force</td>\n<td>在加载枚举列表时，如果之前已经加载过了默认会直接获取上次加载缓存的枚举列表，当该参数为true时则会忽略缓存从新获取枚举值列表数据</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3>FormInfo</h3>\n<p><em><strong>@kne/react-form-antd-taro</strong></em> 的再封装，实现了基本的Form样式和风格，统一和限制了调用方法，使写法更加统一规范，实现了一些复杂选择数据的Field组件</p>\n<h4>FormInfo{FormPart}</h4>\n<p>用以显示一个表单部分，可以包含对该段表单片段的说明</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>list</td>\n<td>表单组件列表，一般为一个Field的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题，说明该部分表单的内容</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>子标题，辅助说明</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isSubheading</td>\n<td>是否使标题显示为一个二级标题</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h4>FormInfo{List}</h4>\n<p>用以显示一个子表单，可以通过添加一条相同格式数据，一般用在类似教育经历，工作经历场景中。可以控制最大最小条数</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>list</td>\n<td>表单组件列表，一般为一个Field的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>name</td>\n<td>groupName，用来将该段表单的数据放置在对应的formData中</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题，说明该部分表单的内容</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>子标题，辅助说明</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>addText</td>\n<td>添加按钮文案</td>\n<td>string</td>\n<td>添加</td>\n</tr>\n<tr>\n<td>removeText</td>\n<td>删除按钮文案</td>\n<td>string</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>minLength</td>\n<td>最小个数，表单初始化会至少显示minLength条，实际条数等于minLength时将隐藏删除按钮</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>maxLength</td>\n<td>最大个数，实际条数等于maxLength时将隐藏添加按钮</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isUnshift</td>\n<td>新增时，新一条表单时添加到表单列表最前面还是最后面</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>defaultLength</td>\n<td>初始化需要显示几段表单列表</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>itemTitle</td>\n<td>表单列表的二级title生成规则</td>\n<td>function,string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>FormInfo{usePopupForm}</h4>\n<p>可以弹出一个Form页面来填写信息，hooks返回一个function，调用后即可弹出页面</p>\n<pre><code class=\"language-js\">const popupForm = usePopupForm();\n\nconst {close} = popupForm({\n    title, formProps, children\n});\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>表单弹出页面的标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>formProps</td>\n<td>传给Form的参数</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>children</td>\n<td>放置在Form中的children，一般为FormPart或者FormList</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>Form的提交和取消按钮，已经默认预置号，通常不需要额外传值，除非业务上需要额外的一些设计和功能</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>FormInfo{fields}</h4>\n<p>表单的Field组件集合</p>\n<p>此处将所有Field的共同参数作出说明，后面的具体Field将不包含这些共同部分</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>表单字段的名称，将作为formData的属性的一部分</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>label</td>\n<td>表单字段的显示文案，用以向用户说明字段的作用</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>rule</td>\n<td>表单字段的校验规则，以空格分开，在表单字段触发校验时串行执行校验规则，全部通过时允许提交</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>labelTips</td>\n<td>字段提示说明，用来向用户补充说明字段的一些注意事项</td>\n<td>string,function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>labelHidden</td>\n<td>是否隐藏label显示</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>labelRender</td>\n<td>一般情况label为string，当需要展示一个react组件时需要再传入该参数用以修饰label</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Field.Item</p>\n<p>当Field需要放在FormPart或者List中，需要以此方法形式调用（目前的UI规范规定必须以此种方式调用Field，不推荐直接调用Field）如</p>\n<pre><code class=\"language-jsx\">&lt;AdvancedSelect.Item name=\"name\" label=\"label\" rule=\"rule\"/&gt;\n</code></pre>\n<h4>FormInfo{fields:{AdvancedSelect}}</h4>\n<p>高级列表选择器</p>\n<h4>FormInfo{fields:{AutoComplete}}</h4>\n<p>自动完成选择器</p>\n<h4>FormInfo{fields:{Avatar}}</h4>\n<p>头像或图片上传</p>\n<h4>FormInfo{fields:{Calendar}}</h4>\n<p>复杂日期选择器</p>\n<h4>FormInfo{fields:{CardType}}</h4>\n<p>证件类型选择和证件号码输入</p>\n<h4>FormInfo{fields:{CitySelect}}</h4>\n<p>城市选择</p>\n<h4>FormInfo{fields:{FunctionSelect}}</h4>\n<p>职能选择</p>\n<h4>FormInfo{fields:{IndustrySelect}}</h4>\n<p>行业选择</p>\n<h4>FormInfo{fields:{InputNumber}}</h4>\n<p>数字输入</p>\n<h4>FormInfo{fields:{InputNumberUnit}}</h4>\n<p>带单位数字输入</p>\n<h4>FormInfo{fields:{PhoneNumber}}</h4>\n<p>手机号输入</p>\n<h4>FormInfo{fields:{SalaryInput}}</h4>\n<p>薪资输入</p>\n<h4>FormInfo{fields:{TextArea}}</h4>\n<p>多行文本</p>\n<h4>FormInfo{fields:{Upload}}</h4>\n<p>文件上传</p>\n<h4>FormInfo{fields:{UserListSelect}}</h4>\n<p>用户选择</p>\n<h3>Permission</h3>\n<p>权限判断</p>\n<h3>Modal</h3>\n<p>模态对话框</p>\n<h3>PopupView</h3>\n<p>弹出页面</p>\n<h3>FixedView</h3>\n<p>浮动层</p>\n<h3>HeaderContainer</h3>\n<p>导航头</p>\n<h3>Highlight</h3>\n<p>文字高亮</p>\n<h3>File</h3>\n<p>文件显示及预览</p>\n<h3>Content</h3>\n<p>内容展示</p>\n<h3>StateTag</h3>\n<p>状态标签</p>\n<h3>TipsMessage</h3>\n<p>提示消息</p>\n<h3>Warning</h3>\n<p>警告文案</p>\n<h3>Calendar</h3>\n<p>日历</p>\n<h3>AvatarPreview</h3>\n<p>照片预览</p>\n<h3>Comment</h3>\n<p>评论列表</p>\n<h3>Table</h3>\n<p>表格</p>","example":{"isFull":false,"className":"mini_core_b4cf7","style":"","list":[{"title":"状态标签","description":"这里填写示例说明","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"}],"code":"const {StateTag} = miniCore;\nconst BaseExample = () => {\n    return <StateTag type=\"primary\">哈哈哈</StateTag>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"警告提示","description":"这里填写示例说明","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"}],"code":"const {Warning} = miniCore;\nconst BaseExample = () => {\n    return <Warning>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</Warning>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"枚举值","description":"展示获取枚举值和批量获取枚举值","scope":[{"name":"miniCore","packageName":"@kne/mini-core"}],"code":"const {Enum} = miniCore;\nconst BaseExample = () => {\n    return <Enum loading={null} moduleName=\"degreeEnum\" name={30}/>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"筛选","description":"展示条件筛选器","scope":[{"name":"miniCore","packageName":"@kne/mini-core"}],"code":"const {Enum, Filter} = miniCore;\nconst {useState} = React;\n\nconst BaseExample = () => {\n    const [filter, setFilter] = useState({});\n    return <Filter filter={filter} onChange={setFilter}>\n        <Filter.SearchBar name=\"keyword\"/>\n        <Filter.StateBar name=\"state\" items={[{\n            key: 'all', children: '全部'\n        }, {\n            key: 'progress', children: '进展中'\n        }, {\n            key: 'stop', children: '暂停'\n        }, {\n            key: 'close', children: '关闭'\n        }, {\n            key: 'other1', children: '其他1'\n        }, {\n            key: 'other2', children: '其他2'\n        }, {\n            key: 'other3', children: '其他3'\n        }, {\n            key: 'other4', children: '其他4超长超长超长超长'\n        }, {\n            key: 'other5', children: '其他5'\n        }]}/>\n        <Enum loading={null}\n              moduleName={[\"degreeEnum\", \"political\", \"positionStateEnum\"]}>{([degreeEnum, political, positionStateEnum]) => {\n            return <Filter.OptionsBar name=\"option2\" items={[{\n                key: 'city', label: '期望城市', type: 'CitySelect'\n            }, {\n                key: 'currentCity', label: '现居城市', type: 'CitySelect'\n            }, {\n                key: 'function', label: '职能', type: 'FunctionSelect'\n            }, {\n                key: 'industry', label: '行业', type: 'IndustrySelect'\n            }, {\n                key: 'mine', label: '我上传的', type: 'SwitchButton'\n            }, {\n                key: 'positionUser', label: '职位负责人', type: 'UserListSelect', apis: {\n                    getUserList: {\n                        loader: () => {\n                            return {\n                                pageData: degreeEnum.map(({value, description}) => ({\n                                    uid: value, name: description, description\n                                }))\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: 'political', label: '政治面貌', type: \"ListSelect\", api: {\n                    loader: () => {\n                        return {\n                            pageData: political.map(({value, description}) => ({\n                                value, label: description\n                            }))\n                        }\n                    }\n                }\n            }]}/>\n        }}</Enum>\n        <Filter.OptionsBar name=\"option3\" items={[{\n            key: 'city', label: '期望城市', type: 'CitySelect'\n        }, {\n            key: 'currentCity', label: '现居城市', type: 'CitySelect'\n        }]}/>\n    </Filter>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"表单","description":"展示表单组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {FormInfo, Global, CommonListTitle} = miniCore;\nconst {range} = lodash;\nconst {Button} = antd;\nconst {useMemo} = React;\n\nconst {\n    FormPart,\n    FormList,\n    Form,\n    Input,\n    SalaryInput,\n    PhoneNumber,\n    CardType,\n    Picker,\n    AdvancedSelect,\n    AutoComplete,\n    CalendarTimeRange,\n    Calendar,\n    CitySelect,\n    IndustrySelect,\n    FunctionSelect,\n    TimeStep,\n    CalendarRange,\n    UserListSelect,\n    InputNumber,\n    InputNumberUnit,\n    Upload,\n    SubmitButton,\n    useFormContext\n} = FormInfo;\n\nconst {useRef} = React;\n\nconst FormInner = () => {\n    const {formData} = useFormContext();\n    console.log('FormInner render');\n    return <FormPart title=\"表单标题\"\n                     list={[<AdvancedSelect.Item readOnly name=\"test2\" label=\"高级选择\"\n                                                 interceptor={[\"picker-value\", \"picker-single\"]} rule=\"REQ\"\n                                                 getSearchProps={() => {\n                                                     return {};\n                                                 }} api={{\n                         loader: () => {\n                             return {\n                                 pageData: [{label: \"第一项\", value: 1}, {\n                                     label: \"第二项\", value: 2, disabled: true\n                                 }, {\n                                     label: \"第三项\", value: 3,\n                                 },],\n                             };\n                         }\n                     }}/>, <Input.Item name=\"input\" label=\"输入框\"/>, <SubmitButton>提交</SubmitButton>]}/>;\n};\n\nconst BaseExample = () => {\n    const listRef = useRef();\n    return <Global preset={{\n        apis: {\n            baseURL: 'https://erc.test.fatalent.cn', resume: {\n                ossUpload: {\n                    url: '/api/v1/attachment/upload'\n                }\n            }, user: {\n                getUserList: {\n                    loader: () => {\n                        return {\n                            pageData: range(0, 20).map((index) => ({\n                                uid: index, name: `用户${index}`, description: `用户${index}`\n                            }))\n                        }\n                    }\n                }\n            },\n        }\n    }}>\n        {/*<CommonListTitle subtitle=\"(至少填写一段工作经历)\" extra=\"添加\">工作经历</CommonListTitle>\n        <CommonListTitle subtitle=\"(至少填写一段工作经历)\" isSubheading extra=\"添加\">工作经历</CommonListTitle>*/}\n        <Form data={{\n            'name': \"张三\",\n            'date-range': ['2010-01-01', '2012-01-02'],\n            'test2': {value: 3, label: '第三项'},\n            'city': ['020'],\n            'industry': [\"00100d4\"],\n            'function': [\"001001002\"]\n        }} onSubmit={(data) => {\n            console.log(data);\n        }}>\n            <FormInner/>\n            <FormList title=\"列表\" ref={listRef} name=\"list\" minLength={1}\n                      list={[<Input.Item name=\"name\" label=\"名称\" labelTips=\"哈哈哈哈\"/>, <Input.Item name=\"field0\" label=\"字段\"/>,\n                          <Input.Item name=\"field1\" label=\"字段1\"/>]}/>\n        </Form>\n        {/*<Form data={{\n            'name': \"张三\",\n            'date-range': ['2010-01-01', '2012-01-02'],\n            'test2': [3],\n            'city': ['020'],\n            'industry': [\"00100d4\"],\n            'function': [\"001001002\"]\n        }} onSubmit={(data) => {\n            console.log(data);\n        }}>\n            <FormPart title=\"表单标题\"\n                      list={[<Input.Item label=\"姓名\" name=\"name\" rule=\"REQ LEN-0-10\"/>,\n                          <Picker.DateRangePicker.Item name=\"date-range\" label=\"时间段\"/>,\n                          <PhoneNumber.Item name=\"phone\" label=\"手机\"/>, <CardType.Item name=\"id-card\" label=\"身份证\"/>,\n                          <SalaryInput.Item name=\"salary\" label=\"薪资\" hasMonth typeEnum={({render}) => render([{\n                              description: '年薪', value: 6\n                          }, {description: '月薪', value: 5}, {description: '周薪', value: 4}, {\n                              description: '日薪', value: 3\n                          }, {description: '时薪', value: 2}])}/>,\n                          <AdvancedSelect.Item name=\"test2\" label=\"高级选择\" rule=\"REQ\" getSearchProps={() => {\n                              return {};\n                          }} api={{\n                              loader: () => {\n                                  return {\n                                      pageData: [{label: \"第一项\", value: 1}, {\n                                          label: \"第二项\", value: 2, disabled: true\n                                      }, {\n                                          label: \"第三项\", value: 3,\n                                      },],\n                                  };\n                              }\n                          }}/>, <CitySelect.Item name=\"city\" label=\"城市选择\"/>,\n                          <IndustrySelect.Item name=\"industry\" label=\"行业选择\" multiple/>,\n                          <FunctionSelect.Item name=\"function\" label=\"职能选择\" multiple={false}/>,\n                          <CalendarTimeRange.Item name=\"time\" label=\"面试时间\" rule=\"REQ\"/>,\n                          <InputNumber.Item name=\"number\" label=\"数字\" addonAfter=\"元\" step={2}/>,\n                          <InputNumberUnit.Item name=\"date\" label=\"试用期\"/>,\n                          <Calendar.Item name=\"time2\" label=\"时间\"/>, <TimeStep.Item name=\"timeStep\" label=\"时间2\"/>,\n                          <CalendarRange.Item name=\"time3\" label=\"时间段\"/>,\n                          <CalendarTimeRange.Item name=\"time2\" label=\"面试时间2\" rule=\"REQ\" durationHidden/>,\n                          <UserListSelect.Item name=\"user\" label=\"用户\" rule=\"REQ\"/>,\n                          <Upload.Item name=\"attachment\" label=\"附件\" rule=\"REQ\"/>,\n                          <AutoComplete.Item name=\"school\" label=\"学校\" rule=\"REQ\" api={{\n                              loader: ({data}) => {\n                                  return {\n                                      pageData: [{\n                                          label: \"第一项\" + data.searchText, value: 1\n                                      }, {label: \"第二项\" + data.searchText, value: 2, disabled: true}, {\n                                          label: \"第三项\" + data.searchText, value: 3,\n                                      },],\n                                  };\n                              }\n                          }}/>, <SubmitButton>提交</SubmitButton>]}/>\n            <CommonListTitle subtitle=\"(填写工作经历)\" extra={<Button fill=\"none\" onClick={() => {\n                listRef.current.add();\n            }}>添加</Button>}>工作经历</CommonListTitle>\n            <FormList ref={listRef} name=\"list\" minLength={1}\n                      list={[<Input.Item name=\"name\" label=\"名称\"/>, <Input.Item name=\"field0\" label=\"字段\"/>,\n                          <Input.Item name=\"field1\" label=\"字段1\"/>]}/>\n            <FormList name=\"list2\" title=\"list2\" subtitle=\"副标题\" minLength={1}\n                      itemTitle={({index}) => `第${index + 1}项`}\n                      list={[<Input.Item name=\"name\" label=\"名称\"/>, <Input.Item name=\"field0\" label=\"字段\"/>,\n                          <Input.Item name=\"field1\" label=\"字段1\"/>]}/>\n        </Form>*/}\n    </Global>;\n}\n\nrender(<BaseExample/>);\n\n"},{"title":"popup里面的表单","description":"展示popup里面的表单组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {FormInfo, HeaderContainer, FixView} = miniCore;\nconst {range} = lodash;\nconst {Button, Popup, NavBar} = antd;\n\nconst {useState} = React;\n\nconst {\n    FormPart,\n    Input,\n    TextArea,\n    CalendarTimeRange,\n    Calendar,\n    CitySelect,\n    FunctionSelect,\n    UserListSelect,\n    SubmitButton,\n    usePopupForm\n} = FormInfo;\n\nconst BaseExample = () => {\n    const popupForm = usePopupForm();\n    return <Button onClick={() => {\n        popupForm({\n            title: '新增表单',\n            formProps: {\n                onSubmit: (data) => {\n                    console.log(data);\n                }\n            },\n            children: <FormPart list={[<Input.Item name=\"name\" label=\"姓名\" rule=\"REQ\"/>,\n                <CalendarTimeRange.Item name=\"time\" label=\"时间\" rule=\"REQ\"/>,\n                <CitySelect.Item name=\"city\" label=\"城市\"/>, <FunctionSelect.Item name=\"function\" label=\"职能\"/>,\n                <TextArea.Item name=\"des\" label=\"说明\"/>]}/>\n        });\n    }}>点击弹出popup</Button>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"高亮","description":"展示搜索高亮","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const {HighLight, HighLightProvider} = miniCore;\nconst {View} = tarojsComponents;\n\nconst BaseExample = () => {\n  return <View>\n    <View>示例1：默认标签</View>\n    <HighLightProvider keyword=\"东北\">\n      <HighLight text=\"我的家在东北，松花江上呀！\"/>\n    </HighLightProvider>\n    <View style={{height: '30px'}}></View>\n    <View>示例2：自定义容器标签</View>\n    <HighLightProvider keyword={[\"项目需求分析\", \"新的技术栈\"]}>\n      <HighLight tagName={View} text=\"工作描述: 参与项目需求分析,业务模块划分↵学习一些新的技术栈↵部分功能模块代码的实现↵对自身完成代码进行简单测试↵对于电商项目的核心业务有一定经验↵后端开发RabbitMQJavaMySQLRedisSpringCloudElasticsearch微服务架构\"/>\n    </HighLightProvider>\n    <View style={{height: '30px'}}></View>\n    <View>示例2：忽略大小写</View>\n    <HighLightProvider keyword={[\"哈尔滨\", \"信息\", \"abs wang\"]}>\n      <HighLight tagName={View} text=\"ABs Wang我的家在东北，松花江上呀！哈尔滨真美，信息通达\"/>\n    </HighLightProvider>\n  </View>\n};\n\nrender(<BaseExample/>);\n"},{"title":"日历","description":"展示日历组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"},{"name":"dayjs","packageName":"dayjs"}],"code":"const {\n    Calendar,\n    CalendarMonthView,\n    CalendarMonthSelector,\n    CalendarMonthSwiper,\n    CalendarWeekTitle,\n    CalendarWeekView,\n    CalendarTimeStepView,\n    CalendarTimeLengthView,\n    CalendarView,\n    CalendarTimeRangeView,\n    CalendarTimeRangePopup,\n    CalendarRangeView,\n    CalendarPopup,\n    CalendarRangePopup,\n    CalendarTimeStepPopup\n} = miniCore;\nconst {Space, Button} = antd;\nconst {useState} = React;\nconst {View} = tarojsComponents;\nconst BaseExample = () => {\n    const [value, onChange] = useState(new Date());\n    const [time, onTimeChange] = useState('09:15');\n    const [timeLength, setTimeLength] = useState(60);\n    const [timeRange, setTimeRange] = useState([new Date(), new Date(Date.now() + 60 * 60 * 1000)]);\n    const [open, setOpen] = useState(false);\n    const [open2, setOpen2] = useState(false);\n    const [open3, setOpen3] = useState(false);\n    const [open4, setOpen4] = useState(false);\n    return <Space direction=\"vertical\">\n        <View>CalendarWeekTitle:展示星期文案</View>\n        <CalendarWeekTitle/>\n        <View>CalendarWeekView:展示一个周日期</View>\n        <CalendarWeekView current={value} onChange={onChange} minDate=\"2020-10-01\" maxDate=\"2030-01-01\"\n                          marks={['2023-10-01', '2023-09-30']}/>\n        <View>CalendarMonthView:展示一个月日期</View>\n        <CalendarMonthView current={value} onChange={onChange} minDate=\"2020-10-01\" maxDate=\"2030-01-01\"\n                           marks={['2023-10-01', '2023-09-30']}/>\n        <View>CalendarTimeStepView:展示一个时间段选择 {time}</View>\n        <View style={{'--picker-height': '400px'}}>\n            <CalendarTimeStepView value={time} onChange={onTimeChange}/>\n        </View>\n        <View>CalendarTimeLengthView:展示一个时长选择 {timeLength}分钟</View>\n        <View style={{'--picker-height': '400px'}}>\n            <CalendarTimeLengthView value={timeLength} onChange={setTimeLength}/>\n        </View>\n        <View>CalendarMonthSelector:展示月份选择</View>\n        <View style={{'--month-selector-height': '200px'}}>\n            <CalendarMonthSelector value={value} minDate=\"2020-10-01\" maxDate=\"2030-01-01\" onChange={onChange}/>\n        </View>\n        <View>CalendarMonthSwiper:展示一个月日期并且可以左右滑动切换月份</View>\n        <CalendarMonthSwiper current={value} onChange={onChange} minDate=\"2020\" maxDate=\"2030-01-01\"\n                             marks={['2023-10-01', '2023-09-30']}/>\n        <View>CalendarView:完整日历视图</View>\n        <View style={{'--month-selector-height': '600px'}}>\n            <CalendarView value={value} onChange={onChange} disabledDate={(date) => {\n                return dayjs(date).format('YYYY-MM-DD') === '2023-09-15';\n            }}/>\n        </View>\n        <View>Calendar:完整日历功能</View>\n        <Calendar\n          value={value}\n          onChange={onChange}\n          extraOptions={<Button size=\"small\">添加</Button>}\n        />\n        <View>CalendarTimeRangeView:时间段选择器 {dayjs(timeRange[0]).format('YYYY-MM-DD HH:mm')}~{dayjs(timeRange[1]).format('YYYY-MM-DD HH:mm')}</View>\n        <CalendarTimeRangeView value={timeRange} startTime=\"15:00\" endTime=\"21:00\" onChange={setTimeRange}/>\n        <View>CalendarRangeView:</View>\n        <CalendarRangeView/>\n        <View>CalendarTimeRangePopup:</View>\n        <Button onClick={() => {\n            setOpen(true);\n        }}>点击弹出</Button>\n        <CalendarTimeRangePopup open={open} onOpenChange={setOpen} value={timeRange} onChange={setTimeRange}/>\n        <View>CalendarPopup:</View>\n        <Button onClick={() => {\n            setOpen2(true);\n        }}>点击弹出</Button>\n        <CalendarPopup open={open2} onOpenChange={setOpen2}/>\n        <View>CalendarRangePopup:</View>\n        <Button onClick={() => {\n            setOpen3(true);\n        }}>点击弹出</Button>\n        <View>CalendarTimeStepPopup:展示一个时间段选择弹窗</View>\n        <Button onClick={() => {\n            setOpen4(true);\n        }}>点击弹出</Button>\n        <CalendarTimeStepPopup open={open4} onOpenChange={setOpen4}/>\n        <CalendarRangePopup open={open3} onOpenChange={setOpen3}/>\n    </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"确认对话框","description":"展示确认对话框","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const {Modal, ModalButton, useModal} = miniCore;\nconst {useState} = React;\nconst {Button} = antd;\n\nconst ExampleUseModal = () => {\n    const modal = useModal();\n    return <Button onClick={() => {\n        modal({\n            title: '确认解除微信关联？', content: '解除后，将无法直接通过企业微信发起聊天。'\n        });\n    }}>按钮</Button>;\n};\nconst BaseExample = () => {\n    const [open, setOpen] = useState(false);\n    return <>\n        <Button onClick={() => {\n            setOpen(true);\n        }}>按钮</Button>\n        <Modal open={open} onOpenChange={setOpen} title=\"确认解除微信关联？\"\n               content=\"解除后，将无法直接通过企业微信发起聊天。\"/>\n\n        <ModalButton title=\"确认解除微信关联？\" content=\"解除后，将无法直接通过企业微信发起聊天。\">点击弹出</ModalButton>\n        <ExampleUseModal />\n    </>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"信息展示","description":"信息展示","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const {Content, TipsMessage} = miniCore;\nconst {Button} = antd;\nconst BaseExample = () => {\n  return <Content list={[{\n    label: '测试', content: '哈哈啊哈哈'\n  }, {\n    label: '测试', content: '哈哈啊哈哈', tips: '哈哈哈哈', action: <Button>查看</Button>\n  },{\n    label:'tips',content:<TipsMessage content=\"哈哈哈哈\" title=\"我是一个title\" icon={null}/>\n  }]}/>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"复杂信息展示","description":"复杂信息展示","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const {InfoPage, Content, Comment, Table} = miniCore;\nconst {Button, Steps, Space} = antd;\nconst BaseExample = () => {\n    return <InfoPage>\n        <InfoPage.Part title=\"开票信息\">\n            <InfoPage.Part>\n                <Content list={[{\n                    label: '开票ID', content: 'IN00001533'\n                }, {\n                    label: '客户名称', content: '自动化测试有限公司'\n                }, {\n                    label: '合同', content: 'onsiteRPO合同', action: <Button>预览</Button>\n                }, {\n                    label: '划转人', block: true, content: <Table dataSource={[{\n                        id: 1, name: '哈哈哈', count: 12\n                    }, {\n                        id: 2, name: '张三张三张三张三张三张三张三张三张三张三张三张三张三张三张三张三张三', count: 200\n                    }]} columns={[{name: 'name', title: '名称'}, {name: 'count', title: '数量'}]}/>\n                }, {\n                    label: '备注', content: null\n                }]}/>\n            </InfoPage.Part>\n            <InfoPage.Part title=\"发票费用信息\">\n                <InfoPage.Part>\n                    发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息\n                </InfoPage.Part>\n                <InfoPage.Part>\n                    <Content list={[{\n                        label: '开票ID', content: 'IN00001533'\n                    }, {\n                        label: '客户名称', content: '自动化测试有限公司'\n                    }, {\n                        label: '合同', content: 'onsiteRPO合同', action: <Button>预览</Button>\n                    }, {\n                        label: '划转人', block: true, content: <Table dataSource={[{\n                            id: 1, name: '哈哈哈', count: 12\n                        }, {\n                            id: 2, name: '张三', count: 200\n                        }]} columns={[{name: 'name', title: '名称'}, {name: 'count', title: '数量'}]}/>\n                    }, {\n                        label: '备注', content: null\n                    }]}/>\n                </InfoPage.Part>\n                <InfoPage.Part>\n                    <Content list={[{\n                        label: '开票ID', content: 'IN00001533'\n                    }, {\n                        label: '客户名称', content: '自动化测试有限公司'\n                    }, {\n                        label: '合同', content: 'onsiteRPO合同', action: <Button>预览</Button>\n                    }, {\n                        label: '划转人', block: true, content: <Table dataSource={[{\n                            id: 1, name: '哈哈哈', count: 12\n                        }, {\n                            id: 2, name: '张三', count: 200\n                        }]} columns={[{name: 'name', title: '名称'}, {name: 'count', title: '数量'}]}/>\n                    }, {\n                        label: '备注', content: null\n                    }]}/>\n                </InfoPage.Part>\n            </InfoPage.Part>\n            <InfoPage.Part title=\"发票信息\">\n                发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息\n            </InfoPage.Part>\n        </InfoPage.Part>\n        <InfoPage.Part title=\"开票信息\">\n            <InfoPage.Part title=\"发票费用信息\">\n                发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息\n            </InfoPage.Part>\n            <InfoPage.Part title=\"发票信息\">\n                发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息\n            </InfoPage.Part>\n        </InfoPage.Part>\n        <InfoPage.Part title=\"开票信息\">\n            <InfoPage.Collapse items={[{\n                key: '1', title: '第一项', children: <Content list={[{\n                    label: '开票ID', content: 'IN00001533', tips: '哈哈哈'\n                }, {\n                    label: '客户名称', content: '自动化测试有限公司'\n                }, {\n                    label: '合同', content: 'onsiteRPO合同', action: <Button>预览</Button>\n                }]}/>\n            }, {\n                key: '2', title: '第二项', children: '第二项第二项第二项第二项第二项第二项第二项第二项'\n            }, {\n                key: '3', title: '第三项', children: '第三项第三项第三项第三项第三项第三项第三项第三项第三项'\n            }]}/>\n        </InfoPage.Part>\n        <InfoPage.Part title=\"审批流程\">\n            <Steps current={2} items={[{\n                title: '第一步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第二步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第三步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第四步', description: '完成时间：2020-12-01 12:30'\n            }]}/>\n            <Steps direction=\"vertical\" current={2} items={[{\n                title: '第一步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第二步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第三步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第四步', description: '完成时间：2020-12-01 12:30'\n            }]}/>\n            <Steps direction=\"vertical\" current={2} items={[{\n                title: '第一步', description: <Space direction=\"vertical\">\n                    <Comment user={{name: '张三'}} time={new Date()}>\n                        评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n                    </Comment>\n                    <Comment user={{name: '张三'}} time={new Date()} action={<Button>撤回</Button>}>\n                        评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n                    </Comment>\n                </Space>\n            }, {\n                title: '第二步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第三步', status: 'error', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第四步', description: '完成时间：2020-12-01 12:30'\n            }]}/>\n        </InfoPage.Part>\n    </InfoPage>\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"评论","description":"评论","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {Comment} = miniCore;\nconst {Space, Button} = antd;\n\n\nconst BaseExample = () => {\n    return <Space direction=\"vertical\">\n        <Comment user={{name: '张三'}} time={new Date()}>\n            评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n        </Comment>\n        <Comment user={{name: '张三'}} time={new Date()} action={<Button>撤回</Button>}>\n            评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n        </Comment>\n    </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"弹出页面","description":"弹出页面","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {usePopupView, FormInfo, FixedView, CommonListTitle, Warning} = miniCore;\nconst {Button} = antd;\n\nconst {\n    Form,\n    FormList,\n    FormPart,\n    Input,\n    TextArea,\n    CalendarTimeRange,\n    CitySelect,\n    IndustrySelect,\n    FunctionSelect,\n    SubmitButton,\n} = FormInfo;\n\nconst {useRef} = React;\n\nconst BaseExample = () => {\n    const popupView = usePopupView();\n    const listRef = useRef();\n    return <Button onClick={() => {\n        const {close} = popupView({\n            className: 'bg-grey', title: '欢迎页面', children: <Form onSubmit={(data) => {\n                console.log(data);\n                close();\n            }}>\n                <Warning>警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示</Warning>\n                <FormPart list={[<Input.Item name=\"name\" label=\"姓名\" rule=\"REQ\"/>,\n                    <CalendarTimeRange.Item name=\"time\" label=\"时间\" rule=\"REQ\"/>,\n                    <CitySelect.Item name=\"city\" label=\"城市\"/>, <FunctionSelect.Item name=\"function\" label=\"职能\"/>,\n                    <IndustrySelect.Item name=\"industry\" label=\"行业选择\" multiple/>,\n                    <TextArea.Item name=\"des\" label=\"说明\"/>]}/>\n                <CommonListTitle subtitle=\"(填写工作经历)\" extra={<Button onClick={() => {\n                    listRef.current.add();\n                }}>添加</Button>}>工作经历</CommonListTitle>\n                <FormList ref={listRef} name=\"list\" minLength={1}\n                          list={[<Input.Item name=\"name\" label=\"名称\" labelTips=\"哈哈哈哈哈哈\"/>, <Input.Item name=\"field0\" label=\"字段\"/>,\n                              <Input.Item name=\"field1\" label=\"字段1\"/>]}/>\n                <Button onClick={() => {\n                    popupView({\n                        title: '下一个页面',\n                        children: '下一个页面下一个页面下一个页面下一个页面下一个页面',\n                        hasSafeArea: true,\n                    });\n                }}>点击弹出下一个页面</Button>\n                <FixedView>\n                    <SubmitButton>提交</SubmitButton>\n                </FixedView>\n            </Form>\n        });\n    }}>点击弹出</Button>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"文件预览","description":"文件预览","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {Global, File} = miniCore;\nconst BaseExample = () => {\n    return <Global preset={{\n        apis: {\n            file: {\n                getFileUrl: {\n                    loader: ({params}) => {\n                        return \"https://attachment.test.fatalent.cn/attachment/Q0ol94kBBZgnCXyZKG1Y.jpg?Expires=1700814537&OSSAccessKeyId=LTAI5tAfbu2aBppB3jMj1kMt&Signature=KcJHlI8FDYMolFQFxacGzhoaA1A%3D\";\n                    }\n                }\n            }\n        }\n    }}>\n        <File value=\"xxxxx\" originalName=\"预览文件.jpg\"/>\n    </Global>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"表格","description":"表格","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {Table} = miniCore;\nconst BaseExample = () => {\n    return <Table dataSource={[{\n        id: 1, name: '哈哈哈', count: 12\n    }, {\n        id: 2, name: '张三', count: 200\n    }]} columns={[{name: 'name', title: '名称'}, {name: 'count', title: '数量'}]}/>;\n};\n\nrender(<BaseExample/>);\n\n"}]}}},{"name":"antd-taro","packageName":"@kne/antd-taro","version":"1.0.26","versions":{"1.0.26":{"version":"1.0.26","fileCount":12,"integrity":"sha512-OlJxbMGcUNN194lCOyeU/nTenIMMDZrM4zggcc5kDsgWMyeClLqdMjpV4GbHXUPKHC+eAawMUXU64q3iKRw+Jg==","shasum":"e2cf0c7e658a64dd42a071c07581cf35d9032baa","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICLSWyn/STaqMlgGJy02ytvB/2S8k6K4BwQtCxpDf3t9AiEAlR1uuB5X6kvD6zo6fdImBprPG+z+zU71ssKDwjv85mY="}],"tarball":"https://registry.npmjs.org/@kne/antd-taro/-/antd-taro-1.0.26.tgz","unpackedSize":737373,"time":"2024-03-12T07:23:18.853Z"}},"readme":{"name":"antd-taro","summary":"<p><em><strong>antd-taro</strong></em> 是一个基于@tarojs/components的高级组件库，重写了 Ant Design Mobile 中的部分组件以适配 Taro，部分它提供基础的UI交互组件，它旨在解决小程序应用中的复杂场景问题，例如：</p>\n<ol>\n<li>列表展示问题</li>\n<li>解决了项目中的components开发及调试问题</li>\n</ol>\n<p>它按照目前主流的形式解决了以上问题，可以作为一个应用的底层。\n它提供了相对较大的组件粒度，也对应用做出了一定程度的规范。使用它能快速构建这一类型的小程序。\n它提供了一个components的开发及调试环境和文档编写规范，可以使项目拥有一个良好的组件开发流程和规范，避免和业务混淆在一起</p>\n<h4>使用脚手架</h4>\n<p>你可以使用Taro官方提供的脚手架初始化项目</p>\n<pre><code class=\"language-shell\">npm install -g @tarojs/cli\n</code></pre>\n<pre><code class=\"language-shell\">taro init myApp\n</code></pre>\n<p>或者使用npx执行</p>\n<pre><code class=\"language-shell\">npx @tarojs/cli init myApp\n</code></pre>\n<p>初始化完成之后安装<em><strong>antd-taro</strong></em>包</p>\n<pre><code class=\"language-shell\">npm i --save @kne/antd-taro\n</code></pre>\n<p>然后安装example演示程序及components所需包</p>\n<pre><code class=\"language-shell\">npm i --save-dev @kne/mini-example @kne/md-doc\n</code></pre>\n<p>package.json的scripts中添加对应的启动命令</p>\n<pre><code class=\"language-json\">{\n  \"init\": \"mini-example install &amp;&amp; create-md &amp;&amp; mini-example build\",\n  \"start\": \"npm run build:md &amp;&amp;npm run build:doc &amp;&amp; run-p dev:weapp start:md start:doc start:example\",\n  \"build\": \"run-s build:weapp build:md build:doc build:example\",\n  \"build:weapp\": \"taro build --type weapp\",\n  \"dev:weapp\": \"cross-env NODE_ENV=production npm run build:weapp -- --watch\",\n  \"build:md\": \"create-md\",\n  \"start:md\": \"create-md --watch\",\n  \"build:doc\": \"mini-example build\",\n  \"start:doc\": \"mini-example start\",\n  \"build:example\": \"cd example &amp;&amp; npm run build:weapp\",\n  \"build:example:dd\": \"cd example &amp;&amp; npm run build:dd\",\n  \"start:example\": \"cd example &amp;&amp; cross-env NODE_ENV=production npm run build:weapp -- --watch\"\n}\n</code></pre>\n<h4>示例程序的使用</h4>\n<ol>\n<li>新建components目录</li>\n<li>新建文件 项目根目录/temp/config/alias.js 并添加</li>\n<li>按照examples规则在doc文件夹下完成对应的示例程序</li>\n<li>执行npm run start</li>\n<li>在小程序调试工具中打开 项目根目录/example 进行组件示例调试</li>\n</ol>\n<pre><code class=\"language-js\">module.exports = {\n    '@components': require.resolve('../../src/components'),\n};\n</code></pre>\n<h4>最佳实践</h4>\n<p>我们推荐把所有复杂逻辑都封装成组件放在components文件夹里，并且在doc里面完成对应的文档和示例，在pages里面调用时只包含简单的组件组合以及少量参数的传递。不要把业务写在pages里面，因为那通常不可维护。</p>\n<p>把组件里面的api调用参数及逻辑全部放在项目的preset.js里面。</p>\n<p>在开发阶段，通过mock接口数据来完成components里面具体业务组件的编写，不要硬依赖后端api。</p>\n<p>components内的组件命名尽量可以看出派生关系和业务所属。</p>","api":"<h3>Avatar 头像</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>头像的图片地址</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>size</td>\n<td>大小，宽度和高度，等效于设置 --size CSS 变量</td>\n<td>number</td>\n<td>48</td>\n</tr>\n</tbody>\n</table>\n<h4>CSS 变量</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>默认值</th>\n<th>全局变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--border-radius</td>\n<td>圆角</td>\n<td>50%</td>\n<td>--adm-avatar-border-radius</td>\n</tr>\n<tr>\n<td>--size</td>\n<td>大小，宽度和高度</td>\n<td>48px</td>\n<td>--adm-avatar-size</td>\n</tr>\n</tbody>\n</table>\n<h3>Badge 徽标</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bordered</td>\n<td>是否增加描边</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>color</td>\n<td>徽标背景色，等效于设置 --color CSS 变量</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>content</td>\n<td>徽标内容：如果传 null undefined '' 或不传，则不显示徽标；如果传 Badge.dot，会显示小红点</td>\n<td>React.ReactNode  | typeof Badge.dot</td>\n<td>-</td>\n</tr>\n<tr>\n<td>wrapperClassName</td>\n<td>Badge wrap 自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>wrapperStyle</td>\n<td>Badge wrap 自定义样式</td>\n<td>React.CSSProperties</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>CSS 变量</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>默认值</th>\n<th>全局变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--color</td>\n<td>徽标背景色</td>\n<td>#ff411c</td>\n<td>--adm-badge-color</td>\n</tr>\n<tr>\n<td>--right</td>\n<td>相对于最右边，向左的偏移量</td>\n<td>0</td>\n<td>-</td>\n</tr>\n<tr>\n<td>--top</td>\n<td>相对于最上边，向下的偏移量</td>\n<td>0</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Button 按钮</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td>是否是块级元素</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>color</td>\n<td>按钮的颜色</td>\n<td>'default' | 'primary' | 'success' | 'warning' | 'danger'</td>\n<td>'default'</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>fill</td>\n<td>填充模式</td>\n<td>'solid' | 'outline' | 'none'</td>\n<td>'solid'</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>是否处于加载状态，'auto' 模式会监听 onClick 的 Promise 状态自动更新 loading</td>\n<td>boolean | 'auto'</td>\n<td>false</td>\n</tr>\n<tr>\n<td>loadingIcon</td>\n<td>加载状态下的 icon 图标</td>\n<td>ReactNode</td>\n<td>&lt;DotLoading color='currentColor' /&gt;</td>\n</tr>\n<tr>\n<td>loadingText</td>\n<td>加载状态下额外展示的文字</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>shape</td>\n<td>按钮的形状</td>\n<td>'default' | 'rounded' | 'rectangular'</td>\n<td>'default'</td>\n</tr>\n<tr>\n<td>size</td>\n<td>大小</td>\n<td>'mini' | 'small' | 'middle' | 'large'</td>\n<td>'middle'</td>\n</tr>\n<tr>\n<td>type</td>\n<td>原生 button 元素的 type 属性</td>\n<td>'submit' | 'reset' | 'button'</td>\n<td>'button'</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void | Promise</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><em><strong>此外，还支持原生 button 元素的以下属性：onMouseDown onMouseUp onTouchStart onTouchEnd。</strong></em></p>\n<h4>CSS 变量</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>默认值</th>\n<th>全局变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--background-color</td>\n<td>背景颜色</td>\n<td>var(--adm-color-background) #ffffff</td>\n<td>--adm-button-background-color</td>\n</tr>\n<tr>\n<td>--border-color</td>\n<td>边框颜色</td>\n<td>var(--adm-color-border) #f1f1f1</td>\n<td>--adm-button-border-color</td>\n</tr>\n<tr>\n<td>--border-radius</td>\n<td>圆角大小</td>\n<td>8px</td>\n<td>--adm-button-border-radius</td>\n</tr>\n<tr>\n<td>--border-style</td>\n<td>边框样式</td>\n<td>solid</td>\n<td>--adm-button-border-style</td>\n</tr>\n<tr>\n<td>--border-width</td>\n<td>边框样式</td>\n<td>2px</td>\n<td>--adm-button-border-width</td>\n</tr>\n<tr>\n<td>--text-color</td>\n<td>文字颜色</td>\n<td>var(--adm-color-text) '#333333'</td>\n<td>--adm-button-text-color</td>\n</tr>\n</tbody>\n</table>\n<h3>Card 卡片</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bodyClassName</td>\n<td>body 自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>bodyStyle</td>\n<td>body 自定义样式</td>\n<td>React.CSSProperties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>header 右边区域</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>headerClassName</td>\n<td>header 自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>headerStyle</td>\n<td>header 自定义样式</td>\n<td>React.CSSProperties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onBodyClick</td>\n<td>body 区域点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>卡片点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onHeaderClick</td>\n<td>header 区域点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>header 左边区域</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>CheckList 可勾选列表</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>activeIcon</td>\n<td>选中图标</td>\n<td>ReactNode</td>\n<td>&lt;CheckOutline /&gt;</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>列表右侧区域</td>\n<td>(active: boolean) =&gt; ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>默认项</td>\n<td>string[]</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否允许多选</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选项改变时触</td>\n<td>(value: string[]) =&gt; void</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>value</td>\n<td>选中项</td>\n<td>string[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<p>此外，还支持 List 的 mode 属性</p>\n<h3>CheckListItem</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>value</td>\n<td>选项值</td>\n<td>string[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h4>CSS 变量</h4>\n<p><em><strong>同 List.Item</strong></em></p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--active-background-color</td>\n<td>点击时的背景颜色</td>\n<td>var(--adm-color-border)</td>\n</tr>\n<tr>\n<td>--align-items</td>\n<td>列表项的 align-item</td>\n<td>center</td>\n</tr>\n<tr>\n<td>--border-bottom</td>\n<td>列表容器底部的边框样式</td>\n<td>solid 2px var(--adm-color-border)</td>\n</tr>\n<tr>\n<td>--border-inner</td>\n<td>列表项底部的边框样式</td>\n<td>solid 2px var(--adm-color-border)</td>\n</tr>\n<tr>\n<td>--border-top</td>\n<td>列表容器顶部的边框样式</td>\n<td>solid 2px var(--adm-color-border)</td>\n</tr>\n<tr>\n<td>--extra-max-width</td>\n<td>extra 部分的最大宽度</td>\n<td>70%</td>\n</tr>\n<tr>\n<td>--font-size</td>\n<td>Body 内容的字体大小</td>\n<td>var(--adm-font-size-9) 34px</td>\n</tr>\n<tr>\n<td>--header-font-size</td>\n<td>头部的字体大小</td>\n<td>var(--adm-font-size-7) 30px</td>\n</tr>\n<tr>\n<td>--padding-left</td>\n<td>列表项和列表头部左侧的 padding</td>\n<td>24px</td>\n</tr>\n<tr>\n<td>--padding-right</td>\n<td>列表项和列表头部右侧的 padding</td>\n<td>24px</td>\n</tr>\n<tr>\n<td>--prefix-padding-right</td>\n<td>prefix 部分的右侧 padding</td>\n<td>24px</td>\n</tr>\n<tr>\n<td>--prefix-width</td>\n<td>prefix 部分的宽度</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<h3>Collapse 折叠面板</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accordion</td>\n<td>是否开启手风琴模式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>activeKey</td>\n<td>当前展开面板的 key</td>\n<td>手风琴模式：string | null&lt;br/&gt; 非手风琴模式：string[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>arrow</td>\n<td>自定义箭头，如果是 ReactNode，那么 antd-mobile 会自动为你增加旋转动画效果</td>\n<td>ReactNode</td>\n<td>((active: boolean) =&gt; React.ReactNode) | []</td>\n</tr>\n<tr>\n<td>defaultActiveKey</td>\n<td>默认展开面板的 key</td>\n<td>手风琴模式：string | null&lt;br/&gt; 非手风琴模式：string[] | []</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>切换面板时触发</td>\n<td>手风琴模式：(activeKey: string | null) =&gt; void&lt;br/&gt; 非手风琴模式：(activeKey: string[]) =&gt; void</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>Collapse.Panel</h4>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrow</td>\n<td>自定义箭头</td>\n<td>ReactNode | ((active: boolean) =&gt; React.ReactNode)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>destroyOnClose</td>\n<td>不可见时是否销毁 DOM 结构</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否为禁用状态</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>forceRender</td>\n<td>被隐藏时是否渲染 DOM 结构</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>key</td>\n<td>唯一标识符</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>标题栏的点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题栏左侧内容</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>DatePicker日期选择器</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认选中值</td>\n<td>PickerDate</td>\n<td>new Date() 今天</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n<td>PickerDate</td>\n<td>new Date() 今天</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n<td>PickerDate</td>\n<td>new Date('1949-10-01')</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>确认时触发</td>\n<td>(value: PickerDate) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>precision</td>\n<td>精度</td>\n<td>'month' | 'day' | 'hour' | 'minute'</td>\n<td>-</td>\n</tr>\n<tr>\n<td>renderLabel</td>\n<td>自定义渲染每列展示的内容。其中 type 参数为 precision 中的任意值或 now，data 参数为默认渲染的数字</td>\n<td>(type: Precision | 'now', data: number) =&gt; ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>value</td>\n<td>选中值</td>\n<td>PickerDate</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>此外还支持 Picker 的以下属性：onCancel onClose confirmText cancelText title loading loadingContent。</p>\n<h3>DateRangePicker 日期范围选择器</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认选中值</td>\n<td>[PickerDate, PickerDate]</td>\n<td>[new Date(), new Date()] 今天</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n<td>PickerDate</td>\n<td>new Date() 今天</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n<td>PickerDate</td>\n<td>new Date('1949-10-01')</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>确认时触发</td>\n<td>(value: PickerDate) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>precision</td>\n<td>精度</td>\n<td>'month' | 'day' | 'hour' | 'minute'</td>\n<td>-</td>\n</tr>\n<tr>\n<td>renderLabel</td>\n<td>自定义渲染每列展示的内容。其中 type 参数为 precision 中的任意值或 now，data 参数为默认渲染的数字</td>\n<td>(type: Precision | 'now', data: number) =&gt; ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>value</td>\n<td>选中值</td>\n<td>[PickerDate, PickerDate]</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>此外还支持 Picker 的以下属性：onCancel onClose confirmText cancelText title loading loadingContent。</p>\n<h3>DotLoading 点状加载图标</h3>\n<h4>属性</h4>\n<p>| 属性名   | 说明                          | 类型                                          | 默认值       |\n|-------|-----------------------------|---</p>","example":{"isFull":false,"className":"antd_taro_168b0","style":"","list":[{"title":"这里填写示例标题","description":"这里填写示例说明","scope":[],"code":"const BaseExample = ()=>{\n    return '我是一个示例组件';\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Avatar 头像","description":"Avatar 头像","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Avatar, Space} = antdTaro;\nconst {View, Text} = taroComponent;\n\nconst demoAvatarImages = [\n  'https://github.githubassets.com/assets/app-icon-512-7f9c4ff2e960.png',\n  'https://avatars.githubusercontent.com/u/37367461?v=4',\n];\n\nconst BaseExample = ()=>{\n    return (\n      <Space direction={'vertical'} size={30}>\n        <Space direction={'vertical'}>\n          <View>基础用法</View>\n          <Space>\n            <Avatar src={demoAvatarImages[0]} />\n            <Avatar src={demoAvatarImages[1]} />\n          </Space>\n        </Space>\n        <Space direction={'vertical'}>\n          <View>占位头像</View>\n          <Avatar />\n          <Text style={{color: '#666', fontSize: '14px'}}>如果你不传图片，或者不传性别，或者图片加载失败，那么会显示一个默认的图像</Text>\n        </Space>\n        <Space direction={'vertical'}>\n          <View>性别默认头像</View>\n          <Space>\n            <Avatar gender={'F'} />\n            <Avatar gender={'f'} />\n            <Avatar gender={'female'} />\n          </Space>\n          <Space>\n            <Avatar gender={'M'} />\n            <Avatar gender={'m'} />\n            <Avatar gender={'male'} />\n          </Space>\n        </Space>\n        <Space direction={'vertical'}>\n          <View>自定义尺寸</View>\n          <Space>\n            <Avatar gender={'F'} />\n            <Avatar gender={'f'} size={64} />\n            <Avatar gender={'female'} size={80} />\n          </Space>\n        </Space>\n        <Space direction={'vertical'}>\n          <View>自定义圆角</View>\n          <Space>\n            <Avatar src={demoAvatarImages[0]} style={{'--border-radius': '10%'}} />\n            <Avatar src={demoAvatarImages[1]} style={{'--border-radius': '12px'}} />\n          </Space>\n        </Space>\n      </Space>\n    );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Badge 徽标","description":"Badge 徽标","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Badge, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst style = `\n  {\n    display: block;\n    background: #666666;\n    width: 40px;\n    height: 40px;\n    border-radius: 8px;\n  }\n`;\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Space>\n          <Badge content={1}>Badge</Badge>\n          <Badge content={'新'}><View style={style}/></Badge>\n          <Badge content={Badge.dot}><View style={style}/></Badge>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>带边框</View>\n        <Badge content={'更新啦'} bordered><View style={style}/></Badge>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>独立使用</View>\n        <Space>\n          <Badge content='99+' />\n          <Badge content='新消息!' />\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义颜色</View>\n        <Space>\n          <Badge color='#108ee9' content={Badge.dot}><View style={style}/></Badge>\n          <Badge color='#87d068' content={Badge.dot}><View style={style}/></Badge>\n          <Badge content={Badge.dot}><View style={style}/></Badge>\n          <Badge color='orange' content={Badge.dot}><View style={style}/></Badge>\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Button 按钮","description":"Button 按钮","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Button, Space, DotLoading, Icon} = antdTaro;\nconst {View} = taroComponent;\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'}>\n      <View>按钮尺寸</View>\n      <Space>\n        <Button size={'small'}>small</Button>\n        <Button size={'middle'}>default middle</Button>\n        <Button size={'large'}>large</Button>\n      </Space>\n      <View>填充模式</View>\n      <Space>\n        <Button fill={'solid'}>default</Button>\n        <Button fill={'outline'}>outline</Button>\n        <Button fill={'none'}>none</Button>\n      </Space>\n      <View>加载状态</View>\n      <Space>\n        <Button loading loadingIcon={<DotLoading />}/>\n        <Button loading loadingText={'loadingText'}>loading</Button>\n        <Button loading loadingIcon={<Icon className={\"adm-component\"} type=\"clockCircleFill\"/>}>loading</Button>\n      </Space>\n      <View>禁用状态</View>\n      <Space>\n        <Button disabled>disabled</Button>\n      </Space>\n      <View>形状</View>\n      <Space>\n        <Button shape={'rounded'}>rounded</Button>\n        <Button shape={'rectangular'}>rectangular</Button>\n      </Space>\n      <View>语义按钮</View>\n      <Space>\n        <Button color={'primary'}>primary</Button>\n        <Button color={'success'}>success</Button>\n        <Button color={'danger'}>danger</Button>\n        <Button color={'warning'}>warning</Button>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Card 卡片","description":"Card 卡片","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {Card, Space, Icon, Button} = antdTaro;\nconst {View} = taroComponent;\nconst {showToast} = tarojsTaro;\n\nconst styles = {\n  content: {\n    height: '50px'\n  },\n  footer: {\n    paddingTop: '11px',\n    borderTop: '1px solid #e5e5e5',\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n  customBody: {\n    color: '#00b578'\n  },\n};\n\nconst BaseExample = () => {\n  const onClick = () => {\n    showToast({title: '点击了卡片', icon: 'none'});\n  };\n\n  const onHeaderClick = () => {\n    showToast({title: '点击了卡片Header区域', icon: 'none'});\n  };\n\n  const onBodyClick = () => {\n    showToast({title: '点击了卡片Body区域', icon: 'none'});\n  };\n\n  return (\n    <Space direction={'vertical'} size={30} style={{backgroundColor: '#ddd', padding: '20px', boxSizing: 'border-box'}}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Card title=\"我是title\">我是Card内容</Card>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>没有卡片标题</View>\n        <Card>我是Card内容</Card>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义卡片样式</View>\n        <Card\n          headerStyle={{color: '#1677ff'}}\n          title='卡片标题'\n        >\n          <View style={styles.customBody}>我是Card内容</View>\n        </Card>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义卡片内容</View>\n        <Card\n          title={<View><Icon className={\"adm-component\"} type=\"informationCircleFill\"/>卡片标题</View>}\n          extra={<Icon className={\"adm-component\"} type=\"right-outline\"/>}\n          onBodyClick={onBodyClick}\n          onHeaderClick={onHeaderClick}\n        >\n          <View style={styles.content}>我是Card内容</View>\n          <View style={styles.footer} onClick={e => e.stopPropagation()}>\n            <Button\n              color='primary'\n              onClick={() => {\n                showToast({title: '点击了底部按钮', icon: 'none'});\n              }}\n            >\n              底部按钮\n            </Button>\n          </View>\n        </Card>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"CheckList 可勾选列表","description":"CheckList 可勾选列表","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {CheckList, Space, Icon} = antdTaro;\n\nconst options = [\n  {label: 'A', value: 'A'},\n  {label: 'B', value: 'B'},\n  {label: 'C', value: 'C', disabled: true},\n  {label: 'D', value: 'D', readOnly: true},\n  {label: 'E', value: 'E'},\n];\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <CheckList options={options} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>多选</View>\n      <CheckList multiple options={options.slice(0, 2)} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>自定义选中图标</View>\n      <CheckList options={options} defaultValue={['B']} activeIcon={<Icon className={\"adm-component\"} type=\"checkCircleFill\"/>}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>整组只读</View>\n      <CheckList options={options.slice(0, 2)} defaultValue={['B']} readOnly/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>整组禁用</View>\n      <CheckList options={options.slice(0, 2)} defaultValue={['B']} disabled/>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Collapse 折叠面板","description":"Collapse 折叠面板","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Collapse, Space, Icon} = antdTaro;\nconst {View} = taroComponent;\n\nconst items = [{\n  key: '1', title: '第一项', children: '第一项第一项第一项第一项第一项第一项第一项第一项'\n}, {\n  key: '2', title: '第二项', children: '第二项第二项第二项第二项第二项第二项第二项第二项'\n}, {\n  key: '3', title: '第三项', children: '第三项第三项第三项第三项第三项第三项第三项第三项第三项'\n}];\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Collapse defaultActiveKey={['1']} items={items}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>手风琴模式</View>\n      <Collapse accordion items={items}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>禁用</View>\n      <Collapse accordion items={items.slice(0, 2).concat([Object.assign({}, items[2], {disabled: true})])}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>自定义折叠图标</View>\n      <Collapse\n        arrow={active => <Icon type={active ? \"checkCircleFill\" : 'closeCircleFill'} className=\"adm-component\"/>}\n        items={[\n          items[0],\n          Object.assign({}, items[1], {arrow: <Icon type='exclamationCircleFill' className=\"adm-component\"/>}),\n          Object.assign({}, items[2], {\n            arrow: active => <Icon type={active ? \"informationCircleFill\" : 'clockCircleFill'}\n                                   className=\"adm-component\"/>\n          }),\n        ]}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"DatePicker 日期选择器","description":"DatePicker 日期选择器","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {Button, View} = taroComponent;\nconst {useState} = React;\nconst {DatePicker, Space} = antdTaro;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = () => {\n  const [open, setOpen] = useState(false);\n  const [open2, setOpen2] = useState(false);\n  const [open3, setOpen3] = useState(false);\n  const [open4, setOpen4] = useState(false);\n  const [value, setValue] = useState('');\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Button onClick={() => {\n        setOpen(true);\n      }}>打开</Button>\n      <DatePicker\n        title='时间选择'\n        open={open}\n        onOpenChange={setOpen}\n        onChange={val => {\n          showToast({icon: 'none', title: val.toDateString()})\n        }}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>渲染所选值</View>\n      <Space>\n        <Button onClick={() => {\n          setOpen2(true);\n        }}>打开</Button>\n        <View>{value}</View>\n      </Space>\n      <DatePicker\n        open={open2}\n        onOpenChange={setOpen2}\n        onChange={val => setValue(val.toDateString())}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>控制选择精度</View>\n      <Button onClick={() => {\n        setOpen3(true);\n      }}>年-月</Button>\n      <DatePicker\n        title='时间选择'\n        open={open3}\n        onOpenChange={setOpen3}\n        precision='month'\n        onChange={val => {\n          showToast({icon: 'none', title: val.toDateString()})\n        }}\n      />\n      <Button onClick={() => {\n        setOpen4(true);\n      }}>年-月-日-时-分</Button>\n      <DatePicker\n        title='时间选择'\n        open={open4}\n        onOpenChange={setOpen4}\n        precision='minute'\n        onChange={val => {\n          showToast({icon: 'none', title: val.toDateString()})\n        }}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"DateRangePicker 日期范围选择器","description":"DateRangePicker 日期范围选择器","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {Button, View} = taroComponent;\nconst {useState} = React;\nconst {DateRangePicker, Space} = antdTaro;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = () => {\n  const [open, setOpen] = useState(false);\n  const [open2, setOpen2] = useState(false);\n  const [open3, setOpen3] = useState(false);\n  const [open4, setOpen4] = useState(false);\n  const [value, setValue] = useState([]);\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Button onClick={() => {\n        setOpen(true);\n      }}>打开</Button>\n      <DateRangePicker\n        title='时间选择'\n        open={open}\n        onOpenChange={setOpen}\n        onChange={val => {\n          showToast({icon: 'none', title: val?.map(item => item.toDateString())?.join(' ~ ')})\n        }}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>渲染所选值</View>\n      <Space>\n        <Button onClick={() => {\n          setOpen2(true);\n        }}>打开</Button>\n        <View>{(value || [])?.map(item => item.toLocaleDateString())?.join(' ~ ')}</View>\n      </Space>\n      <DateRangePicker\n        open={open2}\n        onOpenChange={setOpen2}\n        onChange={val => setValue(val)}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>控制选择精度</View>\n      <Button onClick={() => {\n        setOpen3(true);\n      }}>年-月</Button>\n      <DateRangePicker\n        title='时间选择'\n        open={open3}\n        onOpenChange={setOpen3}\n        precision='month'\n        onChange={val => {\n          showToast({icon: 'none', title: val?.map(item => item.toLocaleDateString())?.join(' ~ ')})\n        }}\n      />\n      <Button onClick={() => {\n        setOpen4(true);\n      }}>年-月-日-时-分</Button>\n      <DateRangePicker\n        title='时间选择'\n        open={open4}\n        onOpenChange={setOpen4}\n        precision='minute'\n        onChange={val => {\n          showToast({icon: 'none', title: val?.map(item => item.toTimeString())?.join(' ~ ')})\n        }}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Divider 分隔线","description":"Divider 分隔线","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Divider, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础分割线</View>\n        <Divider />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>带内容的分割线</View>\n        <Divider>内容在中间</Divider>\n        <Divider contentPosition='left'>左侧内容</Divider>\n        <Divider contentPosition='right'>右侧内容</Divider>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>竖向分割线1</View>\n        <Space>\n          <View>Text1</View>\n          <Divider direction={'vertical'} />\n          <View>Text2</View>\n          <Divider direction={'vertical'} />\n          <View>Text3</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义样式</View>\n        <Divider\n          style={{\n            color: '#1677ff',\n            borderColor: '#1677ff',\n            borderStyle: 'dashed',\n          }}\n        >\n          自定义样式\n        </Divider>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"DotLoading 点状加载图标","description":"DotLoading 点状加载图标","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {DotLoading, Space} = antdTaro;\nconst {View} = taroComponent;\nconst BaseExample = () => {\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>默认颜色 Loading</View>\n        <DotLoading/>\n        <View>主题色 Loading</View>\n        <DotLoading color='primary'/>\n        <View>白色 Loading</View>\n        <View style={{backgroundColor: '#ddd'}}>\n          <DotLoading color='white'/>\n        </View>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义颜色 Loading</View>\n        <Space>\n          <DotLoading color='#155ACF'/>\n          <DotLoading color='#00b578'/>\n          <DotLoading color='#ff8f1f'/>\n          <DotLoading color='#ff3141'/>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自动适配字号</View>\n        <Space>\n          <View style={{fontSize: 14}}><DotLoading/></View>\n          <View style={{fontSize: 18}}><DotLoading/></View>\n          <View style={{fontSize: 24}}><DotLoading/></View>\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Dropdown 下拉菜单","description":"Dropdown 下拉菜单","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Dropdown, Space, Icon} = antdTaro;\nconst {View} = taroComponent;\n\nconst items = [\n  {key: 'apple', title: 'apple', children: 'apple'},\n  {key: 'banana', title: 'banana', children: 'banana'},\n  {key: 'orange', title: 'orange', children: 'orange'}\n];\n\nconst BaseExample = () => {\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>一列</View>\n        <Dropdown items={items.slice(0, 1)}/>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>两列</View>\n        <Dropdown items={items.slice(0, 2)}/>\n      </Space>\n      <Space direction={'vertical'} closeOnMaskClick={false}>\n        <View>三列</View>\n        <Dropdown items={items}/>\n      </Space>\n      <Space direction={'vertical'} closeOnMaskClick={false}>\n        <View>自定义箭头</View>\n        <Dropdown\n          arrow={<Icon className={\"adm-component\"} type=\"check-mark\"/>}\n          items={[...items.slice(0, 2), Object.assign({}, items[2], {arrow: <Icon className={\"adm-component\"} type=\"checkCircleFill\"/>})]}\n        />\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Ellipsis 文本省略","description":"Ellipsis 文本省略","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View, Text} = taroComponent;\nconst {Ellipsis, Space} = antdTaro;\n\nconst content = 'antd-taro 是一个基于@tarojs/components的高级组件库，它提供基础的UI交互组件，它旨在解决小程序应用中的复杂场景问题。Ellipsis是一个文本省略组件，展示空间不足时，隐去部分内容并用“...”替代。当文本内容长度或高度超过列宽或行高、图表中空间有限、文本内容无法完全显示、自适应调整时宽度变小时就可以考虑使用该组件。'\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <Text>单行省略</Text>\n      <Ellipsis content={content} />\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>展开收起文本</Text>\n      <Ellipsis expandText='展开文本' collapseText='收起文本' content={content} />\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>取消展开收起</Text>\n      <Ellipsis showAction={false} content={content} />\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>默认展开</Text>\n      <Ellipsis defaultExpanded content={content} />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Empty 空状态","description":"Empty 空状态","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Empty, Space, Icon} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Empty />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>描述文字</View>\n        <Empty description={'空状态'} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义样式</View>\n        <Empty description={'暂无数据'} imageStyle={{ width: 128 }} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义图片</View>\n        <Empty description={'暂无数据'} image={<Icon className={\"adm-component\"} type=\"check-mark\" size={'64px'} color={'#ff6700'} />}/>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Grid 栅格","description":"Grid 栅格","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Grid, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst style = `{\n  background: #EEE;\n  text-align: center;\n  color: #999999;\n  height: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  border: solid 2px #999;\n}`;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Grid gap={[10, 20]}>\n          <Grid.Item span={12}>\n            <View style={style}>A</View>\n          </Grid.Item>\n          <Grid.Item span={12}>\n            <View style={style}>B</View>\n          </Grid.Item>\n          <Grid.Item span={8}>\n            <View style={style}>C</View>\n          </Grid.Item>\n          <Grid.Item span={8}>\n            <View style={style}>D</View>\n          </Grid.Item>\n          <Grid.Item span={8}>\n            <View style={style}>E</View>\n          </Grid.Item>\n        </Grid>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>控制格子的跨度</View>\n        <Grid gap={[10, 20]}>\n          <Grid.Item span={8}>\n            <View style={style}>A</View>\n          </Grid.Item>\n          <Grid.Item span={16}>\n            <View style={style}>B</View>\n          </Grid.Item>\n          <Grid.Item span={16}>\n            <View style={style}>C</View>\n          </Grid.Item>\n          <Grid.Item span={8}>\n            <View style={style}>D</View>\n          </Grid.Item>\n          <Grid.Item span={24}>\n            <View style={style}>E</View>\n          </Grid.Item>\n        </Grid>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Icon 图标","description":"Icon 图标","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Icon, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'}>\n      <Space direction = {'vertical'}>\n        <View>基础用法</View>\n        <Space>\n          <Icon type={'clockCircleFill'} className=\"adm-component\" />\n          <Icon type={'informationCircleFill'} className=\"adm-component\" />\n          <Icon type={'checkCircleFill'} className=\"adm-component\" />\n        </Space>\n      </Space>\n      <Space direction = {'vertical'}>\n        <View>自定义尺寸</View>\n        <Space>\n          <Icon type={'clockCircleFill'} className=\"adm-component\" size={'24px'} />\n          <Icon type={'informationCircleFill'} className=\"adm-component\" size={'32px'} />\n          <Icon type={'checkCircleFill'} className=\"adm-component\" size={'40px'} />\n        </Space>\n      </Space>\n      <Space direction = {'vertical'}>\n        <View>自定义颜色</View>\n        <Space>\n          <Icon type={'clockCircleFill'} className=\"adm-component\" color={'#2db7f5'} />\n          <Icon type={'informationCircleFill'} className=\"adm-component\" color={'#87d068'} />\n          <Icon type={'checkCircleFill'} className=\"adm-component\" color={'#ff6430'} />\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Input 输入框","description":"Input 输入框","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Input, Space} = antdTaro;\nconst {View, Text} = taroComponent;\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <Text>可以自动聚焦的 input</Text>\n      <Input type='text' placeholder='将会获取焦点' focus/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>控制最大输入长度的 input</Text>\n      <Input type='text' placeholder='最大输入长度为 10' maxLength={10}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>数字输入的 input</Text>\n      <Input type='number' placeholder='这是一个数字输入框'/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>密码输入的 input</Text>\n      <Input type='password' password placeholder='这是一个密码输入框'/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>带小数点的 input</Text>\n      <Input type='digit' placeholder='带小数点的数字键盘'/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>身份证输入的 input</Text>\n      <Input type='idcard' placeholder='身份证输入键盘'/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>控制占位符颜色的 input</Text>\n      <Input type='text' placeholder='占位符字体是红色的' placeholderStyle='color:red'/>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"List 列表","description":"List 列表","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {List,Switch,Icon} = antdTaro;\nconst {View} = taroComponent;\nconst BaseExample = () => {\n    return <View style={{ background: '#eee' }}>\n        <List header='基础用法'>\n            <List.Item>1</List.Item>\n            <List.Item>2</List.Item>\n            <List.Item>3</List.Item>\n        </List>\n\n        <List header='可点击列表'>\n            <List.Item prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>} onClick={() => {\n            }}>\n                账单\n            </List.Item>\n            <List.Item prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>} onClick={() => {\n            }}>\n                总资产\n            </List.Item>\n            <List.Item prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>} onClick={() => {\n            }}>\n                设置\n            </List.Item>\n        </List>\n\n        <List header='复杂列表' mode=\"card\">\n            <List.Item extra={<Switch defaultChecked/>}>新消息通知</List.Item>\n            <List.Item extra='未开启' clickable>\n                大字号模式\n            </List.Item>\n            <List.Item description='管理已授权的产品和设备' clickable>\n                授权管理\n            </List.Item>\n            <List.Item title='副标题信息A' description='副标题信息B' clickable>\n                这里是主信息\n            </List.Item>\n        </List>\n\n        <List header='禁用状态'>\n            <List.Item disabled clickable prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>}>\n                账单\n            </List.Item>\n            <List.Item disabled prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>}>\n                总资产\n            </List.Item>\n        </List>\n    </View>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Navbar 导航栏","description":"Navbar 导航栏","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {NavBar, Space} = antdTaro;\nconst {View} = taroComponent;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = () => {\n  const back = () => showToast({\n    title: '点击了返回区域',\n    duration: 1000,\n    icon: 'none'\n  })\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <NavBar onBack={back}>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>不展示返回按钮</View>\n        <NavBar backArrow={false}>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>返回按钮显示文字</View>\n        <NavBar onBack={back} back='返回'>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义左侧区域</View>\n        <NavBar onBack={back} back='返回' left={'关闭'}>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义右侧区域</View>\n        <NavBar onBack={back} back='返回' left={'关闭'} right={'关闭'}>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>标题超长</View>\n        <NavBar onBack={back}>一条长长长长长长长长长长长长长长的标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>显示副标题</View>\n        <NavBar onBack={back}>\n          <View>\n            <View>标题</View>\n            <View style={{fontSize: '12px'}}>副标题</View>\n          </View>\n        </NavBar>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Picker 选择器","description":"Picker 选择器","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Button, View} = taroComponent;\nconst {useState} = React;\nconst {Space, Picker} = antdTaro;\n\nconst basicColumns = [\n  [\n    { label: '周一', value: 'Mon' },\n    { label: '周二', value: 'Tues' },\n    { label: '周三', value: 'Wed' },\n    { label: '周四', value: 'Thur' },\n    { label: '周五', value: 'Fri' },\n  ],\n  [\n    { label: '上午', value: 'am' },\n    { label: '下午', value: 'pm' },\n  ],\n];\n\nconst BaseExample = () => {\n  const [open,setOpen] = useState(false);\n  const [open2,setOpen2] = useState(false);\n  const [value, setValue] = useState([]);\n\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Button onClick={()=>{\n        setOpen(true);\n      }}>打开</Button>\n      <Picker\n        open={open}\n        onOpenChange={setOpen}\n        columns={basicColumns}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>渲染所选值</View>\n      <Space>\n        <Button onClick={()=>{\n          setOpen2(true);\n        }}>打开</Button>\n        <View>{value ? value.join(',') : '未选择'}</View>\n      </Space>\n      <Picker\n        open={open2}\n        onOpenChange={setOpen2}\n        onChange={setValue}\n        columns={basicColumns}\n        value={value}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Popup 弹出菜单","description":"Popup 弹出菜单","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"}],"code":"const {Popup, Button, Space} = antdTaro;\nconst {useState} = React;\n\nconst BaseExample = () => {\n    const [open, setOpen] = useState('');\n    return <Space>{['center', 'top', 'bottom', 'left', 'right'].map((position) => {\n        return <>\n            <Button onClick={() => {\n                setOpen(position);\n            }}>点击</Button>\n            <Popup open={open === position} onOpenChange={(open) => {\n                if (open) {\n                    setOpen(position);\n                } else {\n                    setOpen('');\n                }\n            }} position={position}>\n                popup窗口{position}\n            </Popup>\n        </>\n    })}</Space>;\n};\n\nrender(<BaseExample/>);\n\n\n"},{"title":"Result 结果","description":"Result 结果","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Result, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'}>\n      <Space wrap direction={'vertical'}>\n        <View>Status</View>\n        <Result status={'success'} description={'success'}/>\n        <Result status={'error'} description={'error'}/>\n        <Result status={'info'} description={'info'}/>\n        <Result status={'waiting'} description={'waiting'}/>\n        <Result status={'warning'} description={'warning'}/>\n      </Space>\n      <Space wrap direction={'vertical'}>\n        <View>Title</View>\n        <Result status={'success'} description={'success'} title={'success'}/>\n        <Result status={'error'} description={'error'} title={'error'}/>\n        <Result status={'info'} description={'info'} title={'info'}/>\n        <Result status={'waiting'} description={'waiting'} title={'waiting'}/>\n        <Result status={'warning'} description={'warning'} title={'warning'}/>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"SafeArea 安全区","description":"SafeArea 安全区","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {SafeArea, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <View>\n      <View style={{background: '#eee'}}><SafeArea position={'top'}/></View>\n      <View>Aliqua consectetur enim commodo labore Lorem in cillum fugiat amet fugiat nulla laboris nulla. Exercitation mollit do culpa deserunt. Culpa ad dolor culpa sunt adipisicing magna nostrud pariatur aliqua et est ullamco. Enim voluptate ea cillum minim et commodo qui officia. Nisi labore laborum consectetur culpa ut. Esse dolor culpa officia elit nisi amet eiusmod sunt ipsum. Ut ex Lorem consectetur cupidatat duis do. Ad officia duis laborum enim veniam fugiat elit eu cillum anim reprehenderit. Ex quis est amet cupidatat laboris nisi nisi veniam ea voluptate culpa. Do nisi fugiat laboris. Dolore ut laborum sint exercitation eiusmod consectetur anim. Esse reprehenderit ex aute tempor eiusmod do proident minim cillum incididunt. Est aliquip aute non id tempor aliqua. Culpa labore id elit velit qui minim reprehenderit. Voluptate esse aliquip ullamco fugiat occaecat Lorem non pariatur cupidatat ullamco esse ex. Quis exercitation enim aliquip proident magna occaecat sint quis. Fugiat pariatur ad nisi eiusmod culpa dolor. Enim in aliquip magna anim duis adipisicing duis quis fugiat ad nulla. Ullamco eu reprehenderit exercitation eu aliqua aliquip. Cupidatat consectetur cupidatat dolore eiusmod do tempor sint in deserunt velit amet id excepteur pariatur. Irure nostrud labore cupidatat consectetur cupidatat qui non ullamco cupidatat cillum. Labore Lorem proident fugiat occaecat laborum sint sint in pariatur sit irure. Velit aliquip occaecat magna id aliqua laboris adipisicing amet eiusmod do sint consectetur culpa culpa. Culpa nostrud ad occaecat consequat. Mollit irure voluptate in reprehenderit Lorem duis nisi velit duis. Sunt veniam et cupidatat tempor laborum sint deserunt eiusmod cillum commodo cupidatat Lorem sit ut. Qui dolor ea do aliquip dolore esse culpa minim velit qui nulla nisi est. Dolor Lorem eiusmod aliquip fugiat aliqua sint irure qui esse aliquip in ut ad. Ipsum ullamco culpa non incididunt Lorem labore occaecat. Nostrud enim ipsum sit. Ipsum quis occaecat consequat amet incididunt amet veniam ea dolor ullamco reprehenderit est quis nisi reprehenderit. Ipsum occaecat mollit voluptate sint est culpa elit magna dolor id occaecat veniam eiusmod ad proident. Sit adipisicing elit est culpa laborum magna nostrud aliqua laboris sint eiusmod elit nulla. Voluptate fugiat dolore dolore pariatur ut. Eiusmod cillum duis deserunt culpa eiusmod aliqua amet Lorem esse amet est est. Do fugiat pariatur eiusmod labore. Sint anim dolore amet aliquip enim labore commodo veniam esse consectetur culpa mollit proident et velit. Eiusmod ut duis eiusmod aliqua dolore exercitation elit voluptate ipsum voluptate incididunt consectetur adipisicing. Ad id et mollit aliqua elit elit ut in tempor consectetur dolore pariatur velit reprehenderit duis. Nulla occaecat velit aliquip in. Incididunt eiusmod minim ea fugiat esse fugiat fugiat enim amet. Incididunt ipsum in labore esse aliqua exercitation ex elit id ullamco. Laborum ipsum sint mollit aliqua incididunt labore cillum anim et exercitation ullamco Lorem mollit. Sit enim enim consequat sit id elit non. Dolor mollit nisi qui elit minim minim velit ex incididunt elit ullamco et dolore dolor. Aliqua magna non id minim mollit est et irure duis aliqua. Ut sint amet et sint. Aliqua reprehenderit duis sit labore. Nostrud eu velit aute et qui. Quis sit ullamco deserunt excepteur. Eiusmod est Lorem quis incididunt aute ipsum elit ea sit culpa velit quis ullamco aliqua. Laboris aute sit quis non. Exercitation ullamco elit et minim. Excepteur veniam incididunt ex nisi ex sint non. Quis sit aute aliqua sunt in voluptate sint velit sit laboris ipsum. Commodo labore dolor fugiat ex. Do officia cillum adipisicing velit commodo minim cupidatat cillum dolor exercitation magna consequat sunt commodo aute. Veniam non reprehenderit enim est amet laborum nisi duis ut deserunt aute eu. Laboris mollit sit aliquip elit laboris mollit nisi eu voluptate minim cillum. Do incididunt reprehenderit nisi anim ad. Qui reprehenderit non laboris. Sint proident proident commodo laboris sit ullamco. Minim dolore sunt ut nostrud.</View>\n      <View style={{background: '#eee'}}><SafeArea position={'bottom'}/></View>\n    </View>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"SearchBar 搜索框","description":"SearchBar 搜索框","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {SearchBar, Space, Button} = antdTaro;\nconst {View} = taroComponent;\nconst {useRef} = React;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = ()=>{\n  const searchRef = useRef(null);\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <SearchBar placeholder='请输入内容' />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>不显示搜索按钮</View>\n        <SearchBar showSearchButton={false} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义搜索按钮</View>\n        <SearchBar autoFocus searchText='立即搜索' />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>搜索按钮长显</View>\n        <SearchBar placeholder='请输入内容' showSearchButton={() => true} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>事件监听和 Ref</View>\n        <SearchBar\n          ref={searchRef}\n          placeholder='请输入内容'\n          onSearch={val => {\n            console.log('你搜索了')\n            showToast({title: `你搜索了：${val}`, icon: 'none'})\n          }}\n          onFocus={() => {\n            console.log('获得焦点')\n            setTimeout(() => searchRef.current?.focus(), 300)\n\n          }}\n          onBlur={() => {\n            console.log('失去焦点')\n          }}\n          onCancel={() => {\n            console.log('取消搜索')\n          }}\n        />\n        <Space>\n          <Button\n            onClick={() => {\n              searchRef.current?.clear()\n            }}\n          >\n            清空内容\n          </Button>\n          <Button\n            onClick={() => {\n              searchRef.current?.focus()\n            }}\n          >\n            激活\n          </Button>\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Selector 选择组","description":"Selector 选择组","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Selector} = antdTaro;\nconst {View} = taroComponent;\nconst BaseExample = () => {\n  return <View>\n    <Selector options={[{label: '男', value: '0'}, {label: '女', value: '1'}]}/>\n    <View style={{height: '20px'}}></View>\n    <Selector multiple options={[\n      {label: '选项1', value: '0'},\n      {label: '选项2', value: '1'},\n      {label: '选项3', value: '2'},\n      {label: '选项4', value: '3'},\n      {label: '选项5', value: '5'}\n    ]}/>\n  </View>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Slider 滑动输入条","description":"Slider 滑动输入条","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {Slider, Space} = antdTaro;\nconst {View} = taroComponent;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = ()=>{\n  const toastValue = (value) => {\n    let text = ''\n    if (typeof value === 'number') {\n      text = `${value}`\n    } else {\n      text = `[${value.join(',')}]`\n    }\n    showToast({icon: 'none', title: `当前选中值为：${text}`});\n    console.log(value);\n  }\n\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Slider onChange={toastValue} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>设置 step</View>\n        <Slider ticks step={10} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>显示当前 value</View>\n        <Slider step={1} value={50} showValue/>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>设置最小/最大值</View>\n        <Slider step={1} value={100} showValue min={50} max={200}/>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Space 间距","description":"Space 间距","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Space, Button} = antdTaro;\nconst {View} = taroComponent;\n\nconst style = `{\n  font-size: 12px;\n  background: #ddd;\n  padding: 20px;\n  box-sizing: border-box;\n}`;\n\nconst styleWidth = `{\n  font-size: 12px;\n  max-width: 80px;\n}`;\n\nconst BaseExample = () => {\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>水平方向的间距</View>\n        <Space>\n          <View style={style}>horizontal</View>\n          <View style={style}>horizontal</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>换行</View>\n        <Space wrap>\n          {\n            Array(10).fill().map((_item, index) => (\n              <View style={style} key={`view${index}`}>view{index}</View>\n            ))\n          }\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>垂直方向的间距</View>\n        <Space direction={'vertical'}>\n          <View style={style}>vertical</View>\n          <View style={style}>vertical</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义间距大小</View>\n        <Space size={16} wrap>\n          <View style={style}>horizontal</View>\n          <View style={style}>horizontal</View>\n          <View style={style}>horizontal</View>\n          <View style={style}>horizontal</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>渲染为块级元素</View>\n        <Space direction='vertical' block>\n          <Button>按钮1</Button>\n          <Button>按钮2</Button>\n          <Button>按钮3</Button>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>主轴对齐方式</View>\n        <Space justify='center' block>\n          <View style={style + styleWidth}>1</View>\n          <View style={style + styleWidth}>2{`\\n`}2{`\\n`}2</View>\n          <View style={style + styleWidth}>3{`\\n`}3{`\\n`}3{`\\n`}3{`\\n`}3</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>交叉轴对齐方式</View>\n        <Space justify='center' block>\n          <View style={style + styleWidth}>1</View>\n          <View style={style + styleWidth}>2{`\\n`}2{`\\n`}2</View>\n          <View style={style + styleWidth}>3{`\\n`}3{`\\n`}3{`\\n`}3{`\\n`}3</View>\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Steps 步骤条","description":"Steps 步骤条","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Steps} = antdTaro;\nconst BaseExample = () => {\n    return <>\n        <Steps current={2} items={[{\n            title: '第一步', description: '完成时间：2020-12-01 12:30'\n        }, {\n            title: '第二步', description: '完成时间：2020-12-01 12:30'\n        }, {\n            title: '第三步', status: 'error', description: '完成时间：2020-12-01 12:30'\n        }, {\n            title: '第四步', description: '完成时间：2020-12-01 12:30'\n        }]}/>\n        <Steps direction=\"vertical\" current={2} items={[{\n            title: '第一步', description: '完成时间：2020-12-01 12:30'\n        }, {\n            title: '第二步', description: '完成时间：2020-12-01 12:30'\n        }, {\n            title: '第三步', status: 'error', description: '完成时间：2020-12-01 12:30'\n        }, {\n            title: '第四步', description: '完成时间：2020-12-01 12:30'\n        }]}/>\n    </>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Switch 开关","description":"Switch 开关","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {Switch, Space} = antdTaro;\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Switch />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>有默认值</View>\n      <Switch checked />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>禁用</View>\n      <Switch disabled />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>type 为 checkbox</View>\n      <Switch checked type={'checkbox'} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>color</View>\n      <Switch checked color={'#04BE02'} />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"TabBar 标签栏","description":"TabBar 标签栏","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {useState} = React;\nconst {TabBar, Space, Icon, Badge} = antdTaro;\n\nconst tabs = [\n  {key: 'index', title: '首页', icon: <Icon type={'clockCircleFill'} className=\"adm-component\" />},\n  {key: 'info', title: '信息', icon: <Icon type={'informationCircleFill'} className=\"adm-component\" />},\n  {key: 'question', title: '问题', icon: <Icon type={'exclamationCircleFill'} className=\"adm-component\" />},\n];\n\nconst tabsPath = [\n  {key: 'index', title: '首页', icon: <Icon type={'clockCircleFill'} className=\"adm-component\" />, path: '/'},\n  {key: 'info', title: '信息', icon: <Icon type={'informationCircleFill'} className=\"adm-component\" />, path: '/info'},\n  {key: 'question', title: '问题', icon: <Icon type={'exclamationCircleFill'} className=\"adm-component\" />, path: '/question'},\n];\n\nconst tabsBadge = [\n  {key: 'index', title: '首页', icon: <Icon type={'clockCircleFill'} className=\"adm-component\" />, badge: Badge.dot},\n  {key: 'info', title: '信息', icon: <Icon type={'informationCircleFill'} className=\"adm-component\" />, badge: 5},\n  {key: 'question', title: '问题', icon: <Icon type={'exclamationCircleFill'} className=\"adm-component\" />, badge: '99+'},\n  {key: 'check', title: 'Check', icon: <Icon type={'checkCircleFill'} className=\"adm-component\" />},\n];\n\nconst BaseExample = () => {\n  const [activeKey, setActiveKey] = useState('info')\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <TabBar items={tabs}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>徽标</View>\n      <TabBar items={tabsPath}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>徽标</View>\n      <TabBar items={tabsBadge}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>仅图标</View>\n      <TabBar items={tabs.map(({title, ...item}) => item)}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>仅标题</View>\n      <TabBar items={tabs.map(({icon, ...item}) => item)}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>受控组件</View>\n      <TabBar items={tabs} activeKey={activeKey} onChange={setActiveKey}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>开启安全区</View>\n      <TabBar items={tabs} safeArea/>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Tabs 选项卡","description":"Tabs 选项卡","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Tabs} = antdTaro;\nconst {View} = taroComponent;\nconst BaseExample = () => {\n    return <>\n        <Tabs.Header items={[{key: 'tab1', title: 'tab1'}, {key: 'tab2', title: 'tab2'}]}/>\n        <Tabs swiperOpen items={[{\n            key: 'tab1', title: 'tab1', children: <View>\n                哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈\n                哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈\n                哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈\n                哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈\n                哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈\n                哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈\n                哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈\n            </View>\n        }, {\n            key: 'tab2', title: 'tab2', children: <>\n                tab2\n            </>\n        }]}/>\n    </>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Tag 标签","description":"Tag 标签","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {Tag, Space} = antdTaro;\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Tag>123</Tag>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>线框标签</View>\n      <Space wrap>\n        <Tag color='primary' fill='outline'>Primary</Tag>\n        <Tag color='#87d068' fill='outline'>#87d068</Tag>\n        <Tag color='#ff6430' fill='outline'>#ff6430</Tag>\n      </Space>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>语义标签</View>\n      <Space wrap>\n        <Tag color='default'>Default</Tag>\n        <Tag color='primary'>测试</Tag>\n        <Tag color='success'>Success</Tag>\n        <Tag color='warning'>Warning</Tag>\n        <Tag color='danger'>Danger</Tag>\n      </Space>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>圆角标签</View>\n      <Tag round color='#2db7f5'>圆角标签</Tag>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>自定义颜色</View>\n      <Space>\n        <Tag color='#2db7f5'>#2db7f5</Tag>\n        <Tag color='#87d068'>#87d068</Tag>\n        <Tag color='#108ee9'>#108ee9</Tag>\n      </Space>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>背景色透明度</View>\n      <Space>\n        <Tag color='#2db7f5' opacity>#2db7f5</Tag>\n        <Tag color='#87d068' opacity>#87d068</Tag>\n        <Tag color='#108ee9' opacity>#108ee9</Tag>\n      </Space>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>通过 CSS 变量个性化</View>\n      <Space>\n        <Tag color='primary' fill='outline' style={{ '--border-radius': '6px' }}>Primary</Tag>\n        <Tag color='success' fill='outline' style={{ '--background-color': '#c8f7cFFF' }}>Success</Tag>\n        <Tag color='warning' style={{ '--text-color': 'var(--adm-color-text)' }}>Warning</Tag>\n        <Tag color='danger' fill='outline' style={{ '--border-color': 'var(--adm-color-weak)' }}>Danger</Tag>\n      </Space>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"TextArea 文本域","description":"TextArea 文本域","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {TextArea, Space} = antdTaro;\nconst {useState} = React;\n\nconst content = 'antd-taro 是一个基于@tarojs/components的高级组件库，它提供基础的UI交互组件，它旨在解决小程序应用中的复杂场景问题。Ellipsis是一个文本省略组件，展示空间不足时，隐去部分内容并用“...”替代。当文本内容长度或高度超过列宽或行高、图表中空间有限、文本内容无法完全显示、自适应调整时宽度变小时就可以考虑使用该组件。'\n\nconst BaseExample = () => {\n  const [value, setValue] = useState(content)\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基本的输入框组件</View>\n      <TextArea value={value} onChange={setValue} maxLength={-1} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>字数限制</View>\n      <TextArea placeholder='请输入内容' maxLength={500} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>禁用状态</View>\n      <TextArea placeholder='请输入内容' value={'北极星垂地，\\n东山月满川。'} disabled/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>输入区域高度自适应，不会出现滚动条</View>\n      <TextArea placeholder='请输入内容' autoSize maxLength={-1}/>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"}]}}}]}
