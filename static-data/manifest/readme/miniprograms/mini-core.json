{"name":"mini-core","summary":"<p><em><strong>mini-core</strong></em> 是一个Taro的高级组件库，它有别于 <em><strong>@kne/antd-taro</strong></em> 只提供简单的UI交互组件，它旨在解决toB类小程序应用中的复杂场景问题，例如：</p>\n<ol>\n<li>主题色问题</li>\n<li>Layout问题</li>\n<li>弹出页面问题</li>\n<li>表单问题</li>\n<li>列表下拉加载问题</li>\n<li>详情页展示问题</li>\n<li>筛选项问题</li>\n<li>登录用户信息问题</li>\n<li>显示项权限问题</li>\n<li>枚举值问题</li>\n<li>服务器获取数据及接口管理问题</li>\n<li>解决了项目中的components开发及调试问题</li>\n</ol>\n<p>它按照目前主流的形式解决了以上问题，可以作为一个应用的底层。\n它提供了相对较大的组件粒度，也对应用做出了一定程度的规范。使用它能快速构建这一类型的小程序。\n它提供了一个components的开发及调试环境和文档编写规范，可以使项目拥有一个良好的组件开发流程和规范，避免和业务混淆在一起</p>\n<h4>使用脚手架</h4>\n<p>你可以使用Taro官方提供的脚手架初始化项目</p>\n<pre><code class=\"language-shell\">npm install -g @tarojs/cli\n</code></pre>\n<pre><code class=\"language-shell\">taro init myApp\n</code></pre>\n<p>或者使用npx执行</p>\n<pre><code class=\"language-shell\">npx @tarojs/cli init myApp\n</code></pre>\n<p>初始化完成之后安装<em><strong>mini-core</strong></em>包</p>\n<pre><code class=\"language-shell\">npm i --save @kne/mini-core\n</code></pre>\n<p>然后安装example演示程序及components所需包</p>\n<pre><code class=\"language-shell\">npm i --save-dev @kne/mini-example @kne/md-doc\n</code></pre>\n<p>package.json的scripts中添加对应的启动命令</p>\n<pre><code class=\"language-json\">{\n  \"init\": \"mini-example install &amp;&amp; create-md &amp;&amp; mini-example build\",\n  \"start\": \"npm run build:md &amp;&amp;npm run build:doc &amp;&amp; run-p dev:weapp start:md start:doc start:example\",\n  \"build\": \"run-s build:weapp build:md build:doc build:example\",\n  \"build:weapp\": \"taro build --type weapp\",\n  \"dev:weapp\": \"cross-env NODE_ENV=production npm run build:weapp -- --watch\",\n  \"build:md\": \"create-md\",\n  \"start:md\": \"create-md --watch\",\n  \"build:doc\": \"mini-example build\",\n  \"start:doc\": \"mini-example start\",\n  \"build:example\": \"cd example &amp;&amp; npm run build:weapp\",\n  \"build:example:dd\": \"cd example &amp;&amp; npm run build:dd\",\n  \"start:example\": \"cd example &amp;&amp; cross-env NODE_ENV=production npm run build:weapp -- --watch\"\n}\n</code></pre>\n<h4>示例程序的使用</h4>\n<ol>\n<li>新建components目录</li>\n<li>新建文件 项目根目录/temp/config/alias.js 并添加</li>\n<li>按照examples规则在doc文件夹下完成对应的示例程序</li>\n<li>执行npm run start</li>\n<li>在小程序调试工具中打开 项目根目录/example 进行组件示例调试</li>\n</ol>\n<pre><code class=\"language-js\">module.exports = {\n    '@components': require.resolve('../../src/components'),\n};\n</code></pre>\n<h4>最佳实践</h4>\n<p>我们推荐把所有复杂逻辑都封装成组件放在components文件夹里，并且在doc里面完成对应的文档和示例，在pages里面调用时只包含简单的组件组合以及少量参数的传递。不要把业务写在pages里面，因为那通常不可维护。</p>\n<p>把组件里面的api调用参数及逻辑全部放在项目的preset.js里面。</p>\n<p>在开发阶段，通过mock接口数据来完成components里面具体业务组件的编写，不要硬依赖后端api。</p>\n<p>components内的组件命名尽量可以看出派生关系和业务所属。</p>","api":"<h3>Global</h3>\n<p>Global管理了一个全局的Context，preset及公共样式，css变量，dayjs默认插件引入，dayjs汉化语言包引入等</p>\n<p>Global组件需要放在最外面，推荐在app.js中</p>\n<p>常见的 preset如下：</p>\n<p>ajax: 发送ajax请求的方法，通常为axios.create()对象。因为在项目中可能回存在给axios对象添加拦截器或者其他config的情况，所以在应用内部用到的地方均应获取该对象使用。</p>\n<p>apis: 该应用的所有后端apis，应用内部，不管是组件还是业务在使用api时都应从这里获取，以保证后端api的可迁移性</p>\n<p>enums: 枚举定义，应用内部用到枚举的都应该通过Enum组件获取，Enum组件会根据此配置去加载对应的枚举数据</p>\n<p>formInfo: FormInfo组件会从此获取应用的Form预设配置</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>preset</td>\n<td>全局preset设置</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n</tbody>\n</table>\n<h3>AvatarPreview 照片预览</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>头像链接</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>头像点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Calendar 日历</h3>\n<h3>Comment 评论列表</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user</td>\n<td>行为用户</td>\n<td>{name: string}</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>title</td>\n<td>列表标题</td>\n<td>string</td>\n<td>'添加了评论'</td>\n</tr>\n<tr>\n<td>time</td>\n<td>列表时间</td>\n<td>PickerDate</td>\n<td>-</td>\n</tr>\n<tr>\n<td>timeFormat</td>\n<td>列表时间格式</td>\n<td>string</td>\n<td>'YYYY-MM-DD HH:mm:ss'</td>\n</tr>\n<tr>\n<td>action</td>\n<td>列表项动作按钮</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>列表项右侧区域</td>\n<td>ReactNode | string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Content 内容展示</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>empty</td>\n<td>数据为空时展示</td>\n<td>ReactNode | string</td>\n<td>'-'</td>\n</tr>\n<tr>\n<td>list</td>\n<td>每条内容数据</td>\n<td>ContentItem[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h4>ContentItem</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>display</td>\n<td>数据为空时展示</td>\n<td>boolean | () =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>label</td>\n<td>内容标题文案</td>\n<td>ReactNode | string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>content</td>\n<td>内容数据</td>\n<td>ReactNode | string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>block</td>\n<td>是否将内容数据渲染为块级元素</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tips</td>\n<td>文案提示</td>\n<td>ReactNode | string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>action</td>\n<td>单条内容动作</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Enum 显示或获取枚举值</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>moduleName</td>\n<td>枚举值的名字，在preset设置的枚举对象的key,当其为数组时可以一次性获取多个枚举值列表</td>\n<td>string | string[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>name</td>\n<td>枚举值的key，用来从moduleName的枚举值列表中获取对应key的值，传入该参数时moduleName不能为数组，不传时可以获取到整个枚举列表</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>children</td>\n<td>获取到枚举值，当组件有name传入时获取name所对应的枚举值，如果没有name传入则获取到整个枚举列表，如果moduleName为数组获取到对应的多个枚举列表</td>\n<td>({description})=&gt; void | ({enum1, enum2, ...})=&gt; void</td>\n<td>({description})=&gt;description</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>加载枚举值期间显示内容</td>\n<td>jsx</td>\n<td>null</td>\n</tr>\n<tr>\n<td>force</td>\n<td>在加载枚举列表时，如果之前已经加载过了默认会直接获取上次加载缓存的枚举列表，当该参数为true时则会忽略缓存从新获取枚举值列表数据</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3>File 文件显示及预览</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>icon</td>\n<td>文件图标</td>\n<td>ReactNode</td>\n<td>Icon className=\"iconfont\" type={\"fujian\"}</td>\n</tr>\n<tr>\n<td>originalName</td>\n<td>文件名称</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>value</td>\n<td>文件ID</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Filter 条件筛选</h3>\n<p>一般放在页面顶部</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter</td>\n<td>筛选器的值</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>筛选器值修改时触发执行</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>Filter.SearchBar 关键字文本搜索</h4>\n<p>一般放在Filter顶部</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>searchPlaceholder</td>\n<td>输入框为空时占位符</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>点击搜索或输入Enter键时触发执行</td>\n<td>(value: string) =&gt; void</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>Filter.StateBar 状态筛选</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>items</td>\n<td>状态列表</td>\n<td>{key: string,children: ReactNode|string}[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h4>Filter.OptionsBar 复杂多条件筛选</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>items</td>\n<td>状态列表</td>\n<td>{key: string,label: string,type: string,className:string,api: Object}[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h4>OptionsBarItem</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>label</td>\n<td>筛选条件的名称</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>type</td>\n<td>筛选条件的类型</td>\n<td>CitySelect |ListSelect |UserListSelect |FunctionSelect |IndustrySelect</td>\n<td>-</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义筛选条件样式</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>api</td>\n<td>筛选条件需要远程获取数据时的接口</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>其他所需参数和对应type的组件参数一致</li>\n</ul>\n<h3>FixedView 浮动层</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>noPadding</td>\n<td>不要内间距</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>hasSafeArea</td>\n<td>是否需要底部安全距离</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>是否固定在底部</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>fixBottomExtra</td>\n<td>固定在底部的额外显示</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>FormInfo</h3>\n<p><em><strong>@kne/react-form-antd-taro</strong></em> 的再封装，实现了基本的Form样式和风格，统一和限制了调用方法，使写法更加统一规范，实现了一些复杂选择数据的Field组件</p>\n<h4>FormInfo{FormPart}</h4>\n<p>用以显示一个表单部分，可以包含对该段表单片段的说明</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>list</td>\n<td>表单组件列表，一般为一个Field的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题，说明该部分表单的内容</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>子标题，辅助说明</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isSubheading</td>\n<td>是否使标题显示为一个二级标题</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h4>FormInfo{List}</h4>\n<p>用以显示一个子表单，可以通过添加一条相同格式数据，一般用在类似教育经历，工作经历场景中。可以控制最大最小条数</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>list</td>\n<td>表单组件列表，一般为一个Field的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>name</td>\n<td>groupName，用来将该段表单的数据放置在对应的formData中</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题，说明该部分表单的内容</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>子标题，辅助说明</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>addText</td>\n<td>添加按钮文案</td>\n<td>string</td>\n<td>添加</td>\n</tr>\n<tr>\n<td>removeText</td>\n<td>删除按钮文案</td>\n<td>string</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>minLength</td>\n<td>最小个数，表单初始化会至少显示minLength条，实际条数等于minLength时将隐藏删除按钮</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>maxLength</td>\n<td>最大个数，实际条数等于maxLength时将隐藏添加按钮</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isUnshift</td>\n<td>新增时，新一条表单时添加到表单列表最前面还是最后面</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>defaultLength</td>\n<td>初始化需要显示几段表单列表</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>itemTitle</td>\n<td>表单列表的二级title生成规则</td>\n<td>function,string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>FormInfo{usePopupForm}</h4>\n<p>可以弹出一个Form页面来填写信息，hooks返回一个function，调用后即可弹出页面</p>\n<pre><code class=\"language-js\">const popupForm = usePopupForm();\n\nconst { close } = popupForm({\n  title, formProps, children\n});\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>表单弹出页面的标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>formProps</td>\n<td>传给Form的参数</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>children</td>\n<td>放置在Form中的children，一般为FormPart或者FormList</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>Form的提交和取消按钮，已经默认预置号，通常不需要额外传值，除非业务上需要额外的一些设计和功能</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>FormInfo{fields}</h4>\n<p>表单的Field组件集合</p>\n<p>此处将所有Field的共同参数作出说明，后面的具体Field将不包含这些共同部分</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>表单字段的名称，将作为formData的属性的一部分</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>label</td>\n<td>表单字段的显示文案，用以向用户说明字段的作用</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>rule</td>\n<td>表单字段的校验规则，以空格分开，在表单字段触发校验时串行执行校验规则，全部通过时允许提交</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>labelTips</td>\n<td>字段提示说明，用来向用户补充说明字段的一些注意事项</td>\n<td>string,function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>labelHidden</td>\n<td>是否隐藏label显示</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>labelRender</td>\n<td>一般情况label为string，当需要展示一个react组件时需要再传入该参数用以修饰label</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Field.Item</p>\n<p>当Field需要放在FormPart或者List中，需要以此方法形式调用（目前的UI规范规定必须以此种方式调用Field，不推荐直接调用Field）如</p>\n<pre><code class=\"language-jsx\">&lt;AdvancedSelect.Item name=\"name\" label=\"label\" rule=\"rule\" /&gt;\n</code></pre>\n<h4>FormInfo{fields:{AdvancedSelect}}</h4>\n<p>高级列表选择器</p>\n<h4>FormInfo{fields:{AutoComplete}}</h4>\n<p>自动完成选择器</p>\n<h4>FormInfo{fields:{Avatar}}</h4>\n<p>头像或图片上传</p>\n<h4>FormInfo{fields:{Calendar}}</h4>\n<p>复杂日期选择器</p>\n<h4>FormInfo{fields:{CardType}}</h4>\n<p>证件类型选择和证件号码输入</p>\n<h4>FormInfo{fields:{CitySelect}}</h4>\n<p>城市选择</p>\n<h4>FormInfo{fields:{FunctionSelect}}</h4>\n<p>职能选择</p>\n<h4>FormInfo{fields:{IndustrySelect}}</h4>\n<p>行业选择</p>\n<h4>FormInfo{fields:{InputNumber}}</h4>\n<p>数字输入</p>\n<h4>FormInfo{fields:{InputNumberUnit}}</h4>\n<p>带单位数字输入</p>\n<h4>FormInfo{fields:{PhoneNumber}}</h4>\n<p>手机号输入</p>\n<h4>FormInfo{fields:{SalaryInput}}</h4>\n<p>薪资输入</p>\n<h4>FormInfo{fields:{TextArea}}</h4>\n<p>多行文本</p>\n<h4>FormInfo{fields:{Upload}}</h4>\n<p>文件上传</p>\n<h4>FormInfo{fields:{UserListSelect}}</h4>\n<p>用户选择</p>\n<h3>HeaderContainer 导航头</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bgColor</td>\n<td>背景色</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>额外展示的内容</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onHeightChange</td>\n<td>当HeaderContainer高度改变时触发</td>\n<td>(height: number) =&gt; void</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>HighLight 文字高亮</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>高亮区域内所有的内容</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tagName</td>\n<td>高亮关键字包裹Tag</td>\n<td>string</td>\n<td>Text</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>HighLightProvider</h4>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keyword</td>\n<td>需要高亮度关键字</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>caseSensitive</td>\n<td>区分大小写</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>highlightClassName</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>InfoPage 显示复杂数据</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>InfoPage.Part 带标题内容</h4>\n<p>放置于InfoPage内部显示，如果InfoPage.Part内部再放置InfoPage.Part显示为二级标题，再放置一层则不显示标题</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>额外操作，显示于标题行最右侧</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>InfoPage.Collapse 折叠面板</h4>\n<p>放置于InfoPage内部显示</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>activeKey</td>\n<td>打开的折叠面板key</td>\n<td>array,any</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>defaultActiveKey</td>\n<td>打开的折叠面板key,在需要非受控时使用</td>\n<td>array,any</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>折叠面板展开或收起时触发事件</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>items</td>\n<td>折叠面板内容列表</td>\n<td>InfoPageCollapseItem[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h4>InfoPageCollapseItem</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td>折叠面板key</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td>ReactNode | string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>children</td>\n<td>放置在Collapse中的children</td>\n<td>ReactNode | string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Layout 布局</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>header</td>\n<td>页面导航头</td>\n<td>LayoutHeaderProps</td>\n<td>-</td>\n</tr>\n<tr>\n<td>toolBar</td>\n<td>底部工具栏</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>toolBarList</td>\n<td>标题</td>\n<td>TabBarItem[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>hasSafeArea</td>\n<td>是否显示安全区域</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<h4>LayoutHeaderProps</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>导航头部内容</td>\n<td>string | ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>bgColor</td>\n<td>同 HeaderContainer 中的 bgColor</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>同 HeaderContainer 中的 extra</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>backArrow</td>\n<td>返回按钮</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onBack</td>\n<td>返回事件</td>\n<td>(router: RouterInfo) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>TabBarItem</h4>\n<p>同 @kne/antd-taro 中的 TabBar 参数。</p>\n<h3>Modal 模态对话框</h3>\n<h4>Modal</h4>\n<h5>属性 extend ModalInnerProps</h5>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>open</td>\n<td>是否可见</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>打开关闭 Modal 时触发</td>\n<td>(open: boolean) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>closeOnMaskClick</td>\n<td>点击背景蒙层后是否关闭</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h4>ModalButton</h4>\n<h5>属性 extend Modal</h5>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>按钮文案</td>\n<td>string | ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>buttonProps</td>\n<td>按钮属性</td>\n<td>参考 @kne/antd-taro 的 Button props</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>useModal</h4>\n<h5>属性 extend @kne/antd-taro Popup &amp; ModalInnerProps</h5>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>closeOnMaskClick</td>\n<td>点击背景蒙层后是否关闭</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h4>ModalInnerProps</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>标题左侧图标</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>content</td>\n<td>内容</td>\n<td>ReactNode | string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>cancel</td>\n<td>取消按钮</td>\n<td>ModalCancelProps</td>\n<td>false</td>\n</tr>\n<tr>\n<td>onCancel</td>\n<td>点击取消按钮时触发</td>\n<td>() =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>confirm</td>\n<td>确认按钮</td>\n<td>ModalConfirmProps</td>\n<td>false</td>\n</tr>\n<tr>\n<td>onConfirm</td>\n<td>点击确认按钮时触发</td>\n<td>() =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClose</td>\n<td>关闭弹窗时触发</td>\n<td>() =&gt; void</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>ModalCancelProps</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>按钮文案</td>\n<td>string</td>\n<td>'取消'</td>\n</tr>\n<tr>\n<td>span</td>\n<td>跨度</td>\n<td>number</td>\n<td>12</td>\n</tr>\n</tbody>\n</table>\n<h4>ModalConfirmProps</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>按钮文案</td>\n<td>string</td>\n<td>'确定'</td>\n</tr>\n<tr>\n<td>span</td>\n<td>跨度</td>\n<td>number</td>\n<td>12</td>\n</tr>\n</tbody>\n</table>\n<h3>Permission 权限判断</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>类型</td>\n<td>'hidden' | 'error'</td>\n<td>'确定'</td>\n</tr>\n<tr>\n<td>message</td>\n<td>当 type 为 'error' 时的提示文案</td>\n<td>ReactNode</td>\n<td>'您暂无权限，请联系管理员'</td>\n</tr>\n<tr>\n<td>request</td>\n<td>需要的权限点</td>\n<td>string[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>children</td>\n<td>权限通过展示的内容</td>\n<td>ReactNode | (idPass: boo</td>\n<td></td>\n</tr>\n</tbody>\n</table>","example":{"isFull":false,"className":"mini_core_b4cf7","style":"","list":[{"title":"AvatarPreview 照片预览","description":"AvatarPreview 头像预览","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const { Global, AvatarPreview } = miniCore;\nconst { Space, Button } = antd;\nconst { View } = tarojsComponents;\nconst { showToast } = tarojsTaro;\n\nconst demoAvatarImages = \"https://avatars.githubusercontent.com/u/37367461?v=4\";\n\nconst BaseExample = () => {\n  return (<Global preset={{\n      apis: {\n        file: {\n          getFileUrl: {\n            loader: ({params}) => {\n              return \"https://attachment.test.fatalent.cn/attachment/Q0ol94kBBZgnCXyZKG1Y.jpg?Expires=1700814537&OSSAccessKeyId=LTAI5tAfbu2aBppB3jMj1kMt&Signature=KcJHlI8FDYMolFQFxacGzhoaA1A%3D\";\n            }\n          }\n        }\n      }\n    }}>\n      <Space direction=\"vertical\" size={30}>\n        <Space direction={\"vertical\"}>\n          <View>基础用法</View>\n          <AvatarPreview value={demoAvatarImages} />\n        </Space>\n\n        <Space direction={\"vertical\"}>\n          <View>点击事件</View>\n          <AvatarPreview\n            value={demoAvatarImages}\n            onClick={() => {\n              showToast({ icon: \"none\", title: \"点击事件。。。\" });\n            }}\n          />\n        </Space>\n      </Space>\n    </Global>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Calendar 日历","description":"展示日历组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"},{"name":"dayjs","packageName":"dayjs"}],"code":"const {\n  Calendar,\n  CalendarMonthView,\n  CalendarMonthSelector,\n  CalendarMonthSwiper,\n  CalendarTimeStepView,\n  CalendarTimeLengthView,\n  CalendarView,\n  CalendarTimeRangeView,\n  CalendarTimeRangePopup,\n  CalendarRangeView,\n  CalendarPopup,\n  CalendarRangePopup,\n  CalendarTimeStepPopup\n} = miniCore;\nconst { Space, Button } = antd;\nconst { useState } = React;\nconst { View } = tarojsComponents;\nconst BaseExample = () => {\n  const [value, onChange] = useState(new Date());\n  const [time, onTimeChange] = useState(\"09:15\");\n  const [timeLength, setTimeLength] = useState(60);\n  const [timeRange, setTimeRange] = useState([new Date(), new Date(Date.now() + 60 * 60 * 1000)]);\n  const [open, setOpen] = useState(false);\n  const [open2, setOpen2] = useState(false);\n  const [open3, setOpen3] = useState(false);\n  const [open4, setOpen4] = useState(false);\n  return <Space direction=\"vertical\" size={30}>\n    <Space direction=\"vertical\">\n      <View>CalendarMonthView:展示一个月日期</View>\n      <CalendarMonthView current={value} onChange={onChange} minDate=\"2020-10-01\" maxDate=\"2030-01-01\"\n                         marks={[\"2023-10-01\", \"2023-09-30\"]} />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarTimeStepView:展示一个时间段选择</View>\n      <View>已选：{time}</View>\n      <View style={{ \"--picker-height\": \"400px\" }}>\n        <CalendarTimeStepView value={time} onChange={onTimeChange} />\n      </View>\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarTimeLengthView:展示一个时长选择 </View>\n      <View>已选：{timeLength}分钟</View>\n      <View style={{ \"--picker-height\": \"400px\" }}>\n        <CalendarTimeLengthView value={timeLength} onChange={setTimeLength} />\n      </View>\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarMonthSelector:展示月份选择</View>\n      <View style={{ \"--month-selector-height\": \"200px\" }}>\n        <CalendarMonthSelector value={value} minDate=\"2020-10-01\" maxDate=\"2030-01-01\" onChange={onChange} />\n      </View>\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarMonthSwiper:展示一个月日期并且可以左右滑动切换月份</View>\n      <CalendarMonthSwiper current={value} onChange={onChange} minDate=\"2020\" maxDate=\"2030-01-01\"\n                           marks={[\"2023-10-01\", \"2023-09-30\"]} />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarView:完整日历视图</View>\n      <View style={{ \"--month-selector-height\": \"600px\" }}>\n        <CalendarView value={value} onChange={onChange} disabledDate={(date) => {\n          return dayjs(date).format(\"YYYY-MM-DD\") === \"2023-09-15\";\n        }} />\n      </View>\n    </Space>\n    <Space direction=\"vertical\">\n      <View>Calendar:完整日历功能</View>\n      <Calendar\n        value={value}\n        onChange={onChange}\n        extraOptions={<Button size=\"small\">添加</Button>}\n      />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarTimeRangeView:时间段选择器</View>\n      <View>已选：{dayjs(timeRange[0]).format(\"YYYY-MM-DD HH:mm\")}~{dayjs(timeRange[1]).format(\"YYYY-MM-DD HH:mm\")}</View>\n      <CalendarTimeRangeView value={timeRange} startTime=\"15:00\" endTime=\"21:00\" onChange={setTimeRange} />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarRangeView:</View>\n      <CalendarRangeView />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarTimeStepPopup:展示一个时间段选择弹窗</View>\n      <Button onClick={() => {\n        setOpen(true);\n      }}>点击弹出</Button>\n      <CalendarTimeStepPopup open={open} onOpenChange={setOpen} />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarPopup:展示一个日期选择弹窗</View>\n      <Button onClick={() => {\n        setOpen2(true);\n      }}>点击弹出</Button>\n      <CalendarPopup open={open2} onOpenChange={setOpen2} />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarRangePopup:展示一个日期范围选择弹窗</View>\n      <Button onClick={() => {\n        setOpen3(true);\n      }}>点击弹出</Button>\n      <CalendarRangePopup open={open3} onOpenChange={setOpen3} />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>CalendarTimeRangePopup:展示一个日期时间段范围选择弹窗</View>\n      <Button onClick={() => {\n        setOpen4(true);\n      }}>点击弹出</Button>\n      <CalendarTimeRangePopup open={open4} onOpenChange={setOpen4} value={timeRange} onChange={setTimeRange} />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Comment 评论列表","description":"Comment 评论列表","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const { Comment } = miniCore;\nconst { Space, Button } = antd;\nconst { View } = tarojsComponents;\nconst { showToast } = tarojsTaro;\n\nconst BaseExample = () => {\n  return <Space direction=\"vertical\" size={30}>\n    <Space direction=\"vertical\">\n      <View>基础用法</View>\n      <Comment user={{ name: \"张三\" }} time={new Date()}>\n        评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n      </Comment>\n    </Space>\n    <Space direction=\"vertical\">\n      <View>添加事件</View>\n      <Comment\n        user={{ name: \"张三\" }}\n        time={new Date()}\n        action={<Button onClick={() => {\n          showToast({ icon: \"none\", title: \"点击撤回...\" });\n        }}>撤回</Button>}\n      >\n        评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n      </Comment>\n    </Space>\n    <Space direction=\"vertical\">\n      <View>自定义标题</View>\n      <Comment\n        user={{ name: \"张三\" }}\n        time={new Date()}\n        title={\"添加了备注\"}\n      >\n        评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n      </Comment>\n    </Space>\n    <Space direction=\"vertical\">\n      <View>自定义时间格式</View>\n      <Comment\n        user={{ name: \"张三\" }}\n        time={new Date()}\n        timeFormat={\"YYYY-MM-DD\"}\n      >\n        评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n      </Comment>\n    </Space>\n    <Space direction=\"vertical\">\n      <View>添加 Extra 区域内容</View>\n      <Comment\n        user={{ name: \"张三\" }}\n        time={new Date()}\n        action={<Button onClick={() => {\n          showToast({ icon: \"none\", title: \"点击撤回...\" });\n        }}>撤回</Button>}\n        title={\"添加了备注\"}\n        timeFormat={\"YYYY-MM-DD\"}\n        extra={<View>这里是Extra</View>}\n      >\n        评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n      </Comment>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Common 通用组件","description":"Common 通用组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {\n  CommonIsJSON: isJSON,\n  CommonAutoComplete,\n  CommonFileList,\n  CommonListTitle,\n  CommonLoadingView,\n  CommonSelectedFooter,\n  CommonSelectedLabel,\n} = miniCore;\nconst { Space, Icon } = antd;\nconst { View } = tarojsComponents;\nconst { showToast } = tarojsTaro;\n\nconst data = \"data\";\nconst dataJson = {\n  \"title\": \"Warning 警告提示\",\n  \"description\": \"Warning 警告提示\",\n  \"code\": \"./warning.js\",\n  \"scope\": [\n    {\n      \"name\": \"miniCore\",\n      \"packageName\": \"@kne/mini-core\"\n    },\n    {\n      \"name\": \"antd\",\n      \"packageName\": \"@kne/antd-taro\"\n    },\n    {\n      \"name\": \"tarojsComponents\",\n      \"packageName\": \"@tarojs/components\"\n    }\n  ]\n};\n\nconst fileList = [\n  { fileName: \"file1\", id: \"1\" },\n  { originalName: \"file2\", id: \"2\" }\n];\n\nconst SubTitle = ({ children }) => {\n  return <View style=\"font-size: 16px\">{children}</View>;\n};\n\nconst BaseExample = () => {\n  return <Space direction=\"vertical\" size={30}>\n    <Space direction=\"vertical\">\n      <View>CommonIsJSON</View>\n      <Space direction=\"vertical\">\n        <View>{(!!isJSON(data)).toString()}</View>\n        <View>{(!!isJSON(dataJson)).toString()}</View>\n      </Space>\n    </Space>\n    <Space direction=\"vertical\">\n      <View>AutoComplete</View>\n      <SubTitle>输入框自动完成功能。</SubTitle>\n      <CommonAutoComplete placeholder={\"AutoComplete--\"} />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>FileList</View>\n      <SubTitle>基础用法</SubTitle>\n      <CommonFileList list={fileList} />\n      <SubTitle>可删除</SubTitle>\n      <CommonFileList\n        list={fileList}\n        apis={{\n          onDelete: ({ id, fileName, originalName }) => {\n            showToast({\n              icon: \"none\",\n              title: `ID为${id}的文件${fileName || originalName}被点击删除...`\n            });\n          }\n        }}\n      />\n    </Space>\n    <Space direction=\"vertical\">\n      <View>ListTitle</View>\n      <Space direction={\"vertical\"}>\n        <SubTitle>基础用法</SubTitle>\n        <CommonListTitle>标题</CommonListTitle>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <SubTitle>副标题</SubTitle>\n        <CommonListTitle subtitle={\"副标题\"}>标题</CommonListTitle>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <SubTitle>extra</SubTitle>\n        <CommonListTitle\n          subtitle={\"副标题\"}\n          extra={<Icon\n            type=\"arrow-bold-right\"\n            className=\"iconfont nav-bar-icon\"\n            onClick={() => {\n              showToast({ icon: \"none\", title: \"点击 Extra\" });\n            }}\n          />}\n        >\n          标题\n        </CommonListTitle>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <SubTitle>内标题</SubTitle>\n        <CommonListTitle subtitle={\"副标题\"} isSubheading>标题</CommonListTitle>\n      </Space>\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>LoadingView</View>\n      <Space direction={\"vertical\"}>\n        <SubTitle>基础用法</SubTitle>\n        <CommonLoadingView />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <SubTitle>自定义加载文案</SubTitle>\n        <CommonLoadingView>CommonLoadingView...</CommonLoadingView>\n      </Space>\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>SelectedFooter</View>\n      <Space direction={\"vertical\"}>\n        <SubTitle>基础用法</SubTitle>\n        <CommonSelectedFooter />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <SubTitle>修改底部按钮文案</SubTitle>\n        <CommonSelectedFooter confirmText={\"Confirm\"} resetText={\"Cancel\"} />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <SubTitle>添加按钮事件</SubTitle>\n        <CommonSelectedFooter\n          confirmText={\"Confirm\"}\n          onConfirm={() => {\n            showToast({icon: 'none', title: 'on click confirm...'})\n          }}\n          resetText={\"Reset\"}\n          onReset={() => {\n            showToast({icon: 'none', title: 'on click reset...'})\n          }}\n        />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <SubTitle>只展示一个按钮</SubTitle>\n        <CommonSelectedFooter showReset={false} />\n        <CommonSelectedFooter showConfirm={false} />\n      </Space>\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>SelectedLabel</View>\n      <CommonSelectedLabel\n        maxLength={10}\n        value={[{ label: \"测试\", value: \"1\" }, { label: \"文案\", value: \"2\" }]}\n        onClose={({label, value}) => {\n          showToast({\n            icon: 'none',\n            title: `值为“${value}”、Label为“${label}”的数据被点击删除...`\n          })\n        }}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"FetchList 获取并显示列表","description":"FetchList 获取并显示列表","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"},{"name":"mockData","packageName":"@mock"}],"code":"const { CommonFetchList, Global, usePreset } = miniCore;\nconst { Space, Avatar } = antd;\nconst { View } = tarojsComponents;\n\nconst BaseExample = () => {\n  const { apis } = usePreset();\n  return <Space direction=\"vertical\" size={30}>\n    <Space direction=\"vertical\">\n      <View>基础用法</View>\n      <CommonFetchList showTotalCount {...apis.user.getUserList}>\n        {\n          ({ pageData }) => {\n            return (\n              <Space direction=\"vertical\" style={{ padding: \"10px 0\", boxSizing: \"border-box\" }}>\n                {\n                  pageData.map(item => (\n                    <Space key={item.id} style={{ border: \"1px solid #ddd\", padding: \"10px\", boxSizing: \"border-box\", width: '100%' }}>\n                      <Avatar gender={item.gender} />\n                      <View>\n                        <View>Name: {[item.name, item.englishName].join(\"，\")}</View>\n                        <View>Gender: {item.gender}</View>\n                        <View>Email: {item.email}</View>\n                      </View>\n                    </Space>\n                  ))\n                }\n              </Space>\n            );\n          }\n        }\n      </CommonFetchList>\n    </Space>\n  </Space>;\n};\n\nrender(<Global\n  preset={{\n    apis: {\n      baseURL: \"https://erc.test.fatalent.cn\",\n      user: {\n        getUserList: {\n          loader: () => {\n            return mockData.userList.data;\n          }\n        }\n      }\n    }\n  }}>\n  <BaseExample />\n</Global>);\n\n"},{"title":"Content 信息展示","description":"Content 信息展示","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { Content, TipsMessage } = miniCore;\nconst { Button, Space } = antd;\nconst { View } = tarojsComponents;\n\nconst BaseExample = () => {\n  return <Space direction={\"vertical\"} size={30}>\n    <Space direction={\"vertical\"}>\n      <View>基础用法</View>\n      <Content\n        list={[\n          { label: \"测试\", content: \"哈哈啊哈哈\" },\n          { label: \"测试\", content: \"哈哈啊哈哈\", tips: \"哈哈哈哈\", action: <Button>查看</Button> },\n          { label: \"tips\", content: <TipsMessage content=\"哈哈哈哈\" title=\"我是一个title\" icon={null} /> }\n        ]}\n      />\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>数据为空时展示</View>\n      <Content\n        empty={\"-此处是空数据-\"}\n        list={[\n          { label: \"测试\" },\n          { label: \"测试\", tips: \"哈哈哈哈\" }\n        ]}\n      />\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>内容单独一行显示</View>\n      <Content\n        empty={\"-\"}\n        list={[\n          { label: \"测试\" },\n          { label: \"测试\", content: \"哈哈啊哈哈\", tips: \"哈哈哈哈\", block: true }\n        ]}\n      />\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>数据展示判断</View>\n      <Content\n        empty={\"-\"}\n        list={[\n          { label: \"测试1\", content: '哈哈啊哈哈' },\n          { label: \"测试2\", content: \"哈哈啊哈哈\", display: false },\n          { label: \"测试3\", content: \"哈哈啊哈哈\", display: () => true }\n        ]}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Enum 枚举值","description":"Enum 展示获取枚举值和批量获取枚举值","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { Enum } = miniCore;\nconst { Space } = antd;\nconst { View } = tarojsComponents;\n\nconst BaseExample = () => {\n  return <Space direction={\"vertical\"} size={30}>\n    <Space direction={\"vertical\"}>\n      <View>基础用法</View>\n      <Enum loading={null} moduleName=\"degreeEnum\" name={30} />\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>返回值自定义</View>\n      <Enum moduleName=\"experienceEnum\" name={\"0-1\"}>\n        {({ description }) => {\n          return \"experienceEnum-\" + description;\n        }}\n      </Enum>\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>展示 Enum 所有值</View>\n      <Enum moduleName=\"experienceEnum\">\n        {experienceEnum => (\n          <Space split={','} size={0}>\n            {experienceEnum.map(item => <View>{item.description}</View>)}\n          </Space>\n        )}\n      </Enum>\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>Enum 一次加载多个</View>\n      <Enum moduleName={[\"experienceEnum\", \"political\"]}>\n        {([experienceEnum, political]) => (\n          <Space direction={'vertical'}>\n            <Space split={','} size={0}>\n              {experienceEnum.map(item => <View>{item.description}</View>)}\n            </Space>\n            <Space split={','} size={0}>\n              {political.map(item => <View>{item.description}</View>)}\n            </Space>\n          </Space>\n        )}\n      </Enum>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"File 文件预览","description":"File 文件预览","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { Global, File } = miniCore;\nconst { Space, Icon } = antd;\nconst { View } = tarojsComponents;\n\nconst BaseExample = () => {\n  return <Global preset={{\n    apis: {\n      file: {\n        getFileUrl: {\n          loader: ({ params }) => {\n            return \"https://attachment.test.fatalent.cn/attachment/Q0ol94kBBZgnCXyZKG1Y.jpg?Expires=1700814537&OSSAccessKeyId=LTAI5tAfbu2aBppB3jMj1kMt&Signature=KcJHlI8FDYMolFQFxacGzhoaA1A%3D\";\n          }\n        }\n      }\n    }\n  }}>\n    <Space direction={\"vertical\"} size={30}>\n      <Space direction={\"vertical\"}>\n        <View>基础用法</View>\n        <File value=\"xxxxx\" originalName=\"预览文件.jpg\" />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>修改文件图标</View>\n        <File value=\"xxxxx\" originalName=\"预览文件.jpg\" icon={<Icon className=\"iconfont\" type=\"tianjia\" />} />\n      </Space>\n    </Space>\n  </Global>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Filter 筛选","description":"Filter 展示条件筛选器","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { Enum, Filter } = miniCore;\nconst { Space } = antd;\nconst { View } = tarojsComponents;\nconst { useState } = React;\n\nconst stateBarItems = [\n  { key: \"all\", children: \"全部\" },\n  { key: \"progress\", children: \"进展中\" },\n  { key: \"stop\", children: \"暂停\" },\n  { key: \"close\", children: \"关闭\" },\n  { key: \"other1\", children: \"其他1\" },\n  { key: \"other2\", children: \"其他2\" },\n  { key: \"other3\", children: \"其他3\" },\n  { key: \"other4\", children: \"其他4超长超长超长超长\" },\n  { key: \"other5\", children: \"其他5\" }\n];\n\nconst optionsBarItems = ({ degreeEnum, political }) => [\n  { key: \"mine\", label: \"我上传的\", type: \"SwitchButton\" },\n  {\n    key: \"political\",\n    label: \"政治面貌\",\n    type: \"ListSelect\",\n    api: {\n      loader: () => {\n        return {\n          pageData: political.map(({ value, description }) => ({\n            value, label: description\n          }))\n        };\n      }\n    }\n  },\n  { key: \"city\", label: \"期望城市\", type: \"CitySelect\" },\n  { key: \"currentCity\", label: \"现居城市\", type: \"CitySelect\" },\n  { key: \"function\", label: \"职能\", type: \"FunctionSelect\" },\n  { key: \"industry\", label: \"行业\", type: \"IndustrySelect\" },\n  {\n    key: \"positionUser\",\n    label: \"职位负责人\",\n    type: \"UserListSelect\",\n    apis: {\n      getUserList: {\n        loader: () => {\n          return {\n            pageData: degreeEnum.map(({ value, description }) => ({\n              uid: value, name: description, description\n            }))\n          };\n        }\n      }\n    }\n  }\n];\n\nconst BaseExample = () => {\n  const [filter4, setFilter4] = useState({\n    state: \"stop\",\n    option2: { mine: true, political: [{ value: \"中共党员\", label: \"中共党员\" }] }\n  });\n\n  return <Space direction={\"vertical\"} size={30}>\n    <View>Filter 组合</View>\n    <Filter filter={filter4} onChange={setFilter4}>\n      <Filter.SearchBar name=\"keyword\" />\n      <Filter.StateBar name=\"state\" items={stateBarItems} />\n      <Enum loading={null} moduleName={[\"degreeEnum\", \"political\"]}>\n        {([degreeEnum, political]) => {\n          return <Filter.OptionsBar name=\"option2\" items={optionsBarItems({ degreeEnum, political })} />;\n        }}\n      </Enum>\n      <Filter.OptionsBar\n        name=\"option3\"\n        items={[\n          { key: \"city\", label: \"期望城市\", type: \"CitySelect\" },\n          { key: \"currentCity\", label: \"现居城市\", type: \"CitySelect\" }\n        ]}\n      />\n    </Filter>\n  </Space>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"FixedView 底部固定视图容器","description":"FixedView 底部固定视图容器","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const {FixedView,FixedButton, FixedLoadingButton} = miniCore;\nconst {Space} = antd;\nconst {View} = tarojsComponents;\n\nconst BaseExample = () => {\n    return (\n      <FixedView\n        noPadding\n        hasSafeArea\n        direction={'vertical'}\n        fixBottomExtra={<Space direction={'vertical'}><View>fixBottomExtra</View><View>fixBottomExtra2</View></Space>}\n      >\n        哈哈哈\n        <Space>\n          <FixedButton type='default'>FixedButton</FixedButton>\n          <FixedButton type='primary'>FixedButton</FixedButton>\n        </Space>\n        <FixedLoadingButton loading type='primary'>FixedLoadingButton</FixedLoadingButton>\n      </FixedView>\n    );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"FormInfo 表单","description":"FormInfo 展示表单组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { FormInfo, Global, CommonListTitle } = miniCore;\nconst { range } = lodash;\nconst { Space, Button } = antd;\nconst { useMemo } = React;\nconst { View } = tarojsComponents;\n\nconst {\n  FormPart,\n  FormList,\n  Form,\n  Input,\n  SalaryInput,\n  PhoneNumber,\n  CardType,\n  Picker,\n  AdvancedSelect,\n  AutoComplete,\n  CalendarTimeRange,\n  Calendar,\n  CitySelect,\n  IndustrySelect,\n  FunctionSelect,\n  TimeStep,\n  CalendarRange,\n  UserListSelect,\n  InputNumber,\n  InputNumberUnit,\n  Upload,\n  SubmitButton,\n  useFormContext,\n  usePopupForm,\n  TextArea\n} = FormInfo;\n\nconst { useRef } = React;\n\nconst BaseExample = () => {\n  const popupForm = usePopupForm();\n  const listRef = useRef();\n  return <Global preset={{\n    apis: {\n      baseURL: \"https://erc.test.fatalent.cn\", resume: {\n        ossUpload: {\n          url: \"/api/v1/attachment/upload\"\n        }\n      }, user: {\n        getUserList: {\n          loader: () => {\n            return {\n              pageData: range(0, 20).map((index) => ({\n                uid: index, name: `用户${index}`, description: `用户${index}`\n              }))\n            };\n          }\n        }\n      }\n    },\n    enums: {\n      cardTypeEnum: [\n        { \"value\": 1, \"description\": \"身份证\" },\n        { \"value\": 2, \"description\": \"护照\" }\n      ]\n    }\n  }}>\n    {/*<CommonListTitle subtitle=\"(至少填写一段工作经历)\" extra=\"添加\">工作经历</CommonListTitle>\n        <CommonListTitle subtitle=\"(至少填写一段工作经历)\" isSubheading extra=\"添加\">工作经历</CommonListTitle>*/}\n    <Space direction={\"vertical\"} size={30}>\n      <Space direction={\"vertical\"}>\n        <View>弹出表单</View>\n        <Button onClick={() => {\n          popupForm({\n            title: \"新增表单\",\n            formProps: {\n              onSubmit: (data) => {\n                console.log(data);\n              }\n            },\n            children: <FormPart list={[\n              <Input.Item name=\"name\" label=\"姓名\" rule=\"REQ\" />,\n              <CalendarTimeRange.Item name=\"time\" label=\"时间\" rule=\"REQ\" />,\n              <CitySelect.Item name=\"city\" label=\"城市\" />,\n              <FunctionSelect.Item name=\"function\" label=\"职能\" />,\n              <TextArea.Item name=\"des\" label=\"说明\" />\n            ]} />\n          });\n        }}>点击弹出popup</Button>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>基础用法</View>\n        <Form\n          data={{\n            \"name\": \"张三\",\n            \"date-range\": [\"2010-01-01\", \"2012-01-02\"],\n            \"test2\": [3],\n            \"city\": [\"020\"],\n            \"industry\": [\"00100d4\"],\n            \"function\": [\"001001002\"]\n          }}\n          onSubmit={(data) => {\n            console.log(data);\n          }}\n        >\n          <FormPart\n            title=\"表单标题\"\n            list={[\n              <Input.Item label=\"姓名\" name=\"name\" rule=\"REQ LEN-0-10\" />,\n              <Picker.DateRangePicker.Item name=\"date-range\" label=\"时间段\" />,\n              <PhoneNumber.Item name=\"phone\" label=\"手机\" />,\n              <CardType.Item name=\"id-card\" label=\"身份证\" />,\n              <SalaryInput.Item name=\"salary\" label=\"薪资\" hasMonth typeEnum={({ render }) => render([{\n                description: \"年薪\", value: 6\n              }, { description: \"月薪\", value: 5 }, { description: \"周薪\", value: 4 }, {\n                description: \"日薪\", value: 3\n              }, { description: \"时薪\", value: 2 }])} />,\n              <AdvancedSelect.Item name=\"test2\" label=\"高级选择\" rule=\"REQ\" getSearchProps={() => {\n                return {};\n              }} api={{\n                loader: () => {\n                  return {\n                    pageData: [{ label: \"第一项\", value: 1 }, {\n                      label: \"第二项\", value: 2, disabled: true\n                    }, {\n                      label: \"第三项\", value: 3\n                    }]\n                  };\n                }\n              }} />,\n              <CitySelect.Item name=\"city\" label=\"城市选择\" />,\n              <IndustrySelect.Item name=\"industry\" label=\"行业选择\" multiple />,\n              <FunctionSelect.Item name=\"function\" label=\"职能选择\" multiple={false} />,\n              <CalendarTimeRange.Item name=\"time\" label=\"面试时间\" rule=\"REQ\" />,\n              <InputNumber.Item name=\"number\" label=\"数字\" addonAfter=\"元\" step={2} />,\n              <InputNumberUnit.Item name=\"date\" label=\"试用期\" />,\n              <Calendar.Item name=\"time2\" label=\"时间\" />, <TimeStep.Item name=\"timeStep\" label=\"时间2\" />,\n              <CalendarRange.Item name=\"time3\" label=\"时间段\" />,\n              <CalendarTimeRange.Item name=\"time2\" label=\"面试时间2\" rule=\"REQ\" durationHidden />,\n              <UserListSelect.Item name=\"user\" label=\"用户\" rule=\"REQ\" />,\n              <Upload.Item name=\"attachment\" label=\"附件\" rule=\"REQ\" />,\n              <AutoComplete.Item name=\"school\" label=\"学校\" rule=\"REQ\" api={{\n                loader: ({ data }) => {\n                  return {\n                    pageData: [{\n                      label: \"第一项\" + data.searchText, value: 1\n                    }, { label: \"第二项\" + data.searchText, value: 2, disabled: true }, {\n                      label: \"第三项\" + data.searchText, value: 3\n                    }]\n                  };\n                }\n              }} />,\n              <SubmitButton>提交</SubmitButton>\n            ]}\n          />\n        </Form>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>列表</View>\n        <Form\n          onSubmit={(data) => {\n            console.log(data);\n          }}\n        >\n          <CommonListTitle\n            subtitle=\"(填写工作经历)\"\n            extra={<Button fill=\"none\" onClick={() => {\n              listRef.current.add();\n            }}>添加</Button>}\n          >\n            工作经历\n          </CommonListTitle>\n          <FormList\n            title=\"列表1\"\n            ref={listRef}\n            name=\"list1\"\n            minLength={1}\n            list={[\n              <Input.Item name=\"name\" label=\"名称\" labelTips=\"哈哈哈哈\" />,\n              <Input.Item name=\"field0\" label=\"字段\" />,\n              <Input.Item name=\"field1\" label=\"字段1\" />\n            ]}\n          />\n          <FormList\n            name=\"list2\"\n            title=\"列表2\"\n            subtitle=\"副标题\"\n            minLength={1}\n            itemTitle={({ index }) => `第${index + 1}项`}\n            list={[\n              <Input.Item name=\"name\" label=\"名称\" />,\n              <Input.Item name=\"field0\" label=\"字段\" />,\n              <Input.Item name=\"field1\" label=\"字段1\" />\n            ]}\n          />\n          <SubmitButton>提交</SubmitButton>\n        </Form>\n      </Space>\n    </Space>\n  </Global>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"HeaderContainer 页面头部容器","description":"HeaderContainer 页面头部容器","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const { HeaderContainer } = miniCore;\nconst { Space, Icon } = antd;\nconst Taro = tarojsTaro;\n\nconst BaseExample = () => {\n  return <HeaderContainer\n    bgColor={'#6740C3'}\n    extra={<Space>\n      <Icon\n        type={\"arrow-thin-left\"}\n        className=\"iconfont\"\n        onClick={() => Taro.navigateBack({\n          delta: 1\n        }).catch(({ errMsg }) => {\n          Taro.switchTab({ url: \"/pages/index/index\" });\n        })}\n      />\n      返回\n    </Space>}\n  >\n    哈哈哈\n  </HeaderContainer>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"HighLight 高亮","description":"HighLight 展示搜索高亮","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { HighLight, HighLightProvider } = miniCore;\nconst { View } = tarojsComponents;\nconst { Space } = antd;\n\nconst BaseExample = () => {\n  return <Space direction={\"vertical\"} size={30}>\n    <Space direction={\"vertical\"}>\n      <View>默认标签</View>\n      <HighLightProvider keyword=\"东北\">\n        <HighLight text=\"我的家在东北，松花江上呀！\" />\n      </HighLightProvider>\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>自定义容器标签</View>\n      <HighLightProvider keyword={[\"项目需求分析\", \"新的技术栈\"]}>\n        <HighLight tagName={View}\n                   text=\"工作描述: 参与项目需求分析,业务模块划分↵学习一些新的技术栈↵部分功能模块代码的实现↵对自身完成代码进行简单测试↵对于电商项目的核心业务有一定经验↵后端开发RabbitMQJavaMySQLRedisSpringCloudElasticsearch微服务架构\" />\n      </HighLightProvider>\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>忽略大小写</View>\n      <HighLightProvider keyword={[\"哈尔滨\", \"信息\", \"abs\", \"wang\"]}>\n        <HighLight tagName={View} text=\"ABs Wang我的家在东北，松花江上呀！哈尔滨真美，信息通达\" />\n      </HighLightProvider>\n      <View>区分大小写</View>\n      <HighLightProvider keyword={[\"哈尔滨\", \"信息\", \"abs\", \"Wang\"]} caseSensitive>\n        <HighLight tagName={View} text=\"ABs Wang我的家在东北，松花江上呀！哈尔滨真美，信息通达\" />\n      </HighLightProvider>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample />);\n"},{"title":"InfoPage 复杂信息展示","description":"InfoPage 复杂信息展示","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { InfoPage, Content, Comment, Table } = miniCore;\nconst { Button, Steps, Space } = antd;\nconst { View } = tarojsComponents;\n\nconst contentList = [\n  { label: \"开票ID\", content: \"IN00001533\" },\n  { label: \"客户名称\", content: \"自动化测试有限公司\" },\n  { label: \"合同\", content: \"onsiteRPO合同\", action: <Button>预览</Button> },\n  {\n    label: \"划转人\",\n    block: true,\n    content: <Table\n      dataSource={[\n        { id: 1, name: \"哈哈哈\", count: 12 },\n        { id: 2, name: \"张三张三张三张三张三张三张三张三张三张三张三张三张三张三张三张三张三\", count: 200 }\n      ]}\n      columns={[{ name: \"name\", title: \"名称\" }, { name: \"count\", title: \"数量\" }]}\n    />\n  },\n  { label: \"备注\", content: null }\n];\n\nconst stepsItems = [{\n  title: \"第一步\", description: \"完成时间：2020-12-01 12:30\"\n}, {\n  title: \"第二步\", description: \"完成时间：2020-12-01 12:30\"\n}, {\n  title: \"第三步\", description: \"完成时间：2020-12-01 12:30\"\n}, {\n  title: \"第四步\", description: \"完成时间：2020-12-01 12:30\"\n}];\n\nconst BaseExample = () => {\n  return (\n    <Space direction={\"vertical\"} size={30}>\n      <Space direction={\"vertical\"}>\n        <View>基础用法</View>\n        <InfoPage>\n          <InfoPage.Part title=\"开票信息\">\n            <InfoPage.Part>\n              <Content list={contentList} />\n            </InfoPage.Part>\n          </InfoPage.Part>\n        </InfoPage>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>带有副标题</View>\n        <InfoPage>\n          <InfoPage.Part title=\"开票信息\">\n            <InfoPage.Part title=\"发票费用信息\">\n              <InfoPage.Part>\n                发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息\n              </InfoPage.Part>\n              <InfoPage.Part title=\"开票信息详情\">\n                <Content list={contentList} />\n              </InfoPage.Part>\n            </InfoPage.Part>\n          </InfoPage.Part>\n        </InfoPage>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>折叠面板</View>\n        <InfoPage.Part title=\"开票信息\">\n          <InfoPage.Collapse items={[{\n            key: \"1\", title: \"第一项\", children: <Content list={[{\n              label: \"开票ID\", content: \"IN00001533\", tips: \"哈哈哈\"\n            }, {\n              label: \"客户名称\", content: \"自动化测试有限公司\"\n            }, {\n              label: \"合同\", content: \"onsiteRPO合同\", action: <Button>预览</Button>\n            }]} />\n          }, {\n            key: \"2\", title: \"第二项\", children: \"第二项第二项第二项第二项第二项第二项第二项第二项\"\n          }, {\n            key: \"3\", title: \"第三项\", children: \"第三项第三项第三项第三项第三项第三项第三项第三项第三项\"\n          }]} />\n        </InfoPage.Part>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>内容自定义</View>\n        <InfoPage>\n          <InfoPage.Part title=\"审批流程\">\n            <Steps current={2} items={stepsItems} />\n            <Steps direction=\"vertical\" current={2} items={stepsItems} />\n            <Steps\n              direction=\"vertical\"\n              current={2}\n              items={[{\n                title: \"第一步\",\n                description: <Space direction=\"vertical\">\n                  <Comment user={{ name: \"张三\" }} time={new Date()}>\n                    评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n                  </Comment>\n                  <Comment user={{ name: \"张三\" }} time={new Date()} action={<Button>撤回</Button>}>\n                    评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n                  </Comment>\n                </Space>\n              },\n                { title: \"第二步\", description: \"完成时间：2020-12-01 12:30\" },\n                { title: \"第三步\", status: \"error\", description: \"完成时间：2020-12-01 12:30\" },\n                { title: \"第四步\", description: \"完成时间：2020-12-01 12:30\" }\n              ]}\n            />\n          </InfoPage.Part>\n        </InfoPage>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Layout 布局","description":"Layout 布局","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { Layout } = miniCore;\nconst { View } = tarojsComponents;\nconst { Icon } = antd;\nconst BaseExample = () => {\n  return <Layout\n    hasSafeArea\n    toolbarList={[{\n      key: \"/pages/index/index\",\n      icon: (active) => active ? <Icon type=\"tabgongzuotai-xuanzhong\" className={\"iconfont\"} /> :\n        <Icon type=\"tabgongzuotai-moren\" className={\"iconfont\"} />,\n      title: \"首页\"\n    }, {\n      key: \"/pages/components/index\",\n      icon: (active) => active ? <Icon type=\"tabzhiwei-xuanzhong\" className={\"iconfont\"} /> :\n        <Icon type=\"tabzhiwei-moren\" className={\"iconfont\"} />,\n      title: \"组件示例\"\n    }]}\n    header={{\n      title: \"layout\",\n      bgColor: \"#ff8f1f\",\n      extra: <View>extra</View>,\n      backArrow: <Icon type=\"arrow-bold-left\" className=\"iconfont nav-bar-icon\" />\n    }}\n  >\n    哈哈哈\n  </Layout>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Modal 确认对话框","description":"Modal 展示确认对话框","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { Modal, ModalButton, useModal } = miniCore;\nconst { useState } = React;\nconst { Button, Space } = antd;\nconst { View } = tarojsComponents;\n\nconst ExampleUseModal = () => {\n  const modal = useModal();\n  return <Button onClick={() => {\n    modal({\n      title: \"确认解除微信关联？\", content: \"解除后，将无法直接通过企业微信发起聊天。\"\n    });\n  }}>按钮</Button>;\n};\n\nconst BaseExample = () => {\n  const [open, setOpen] = useState(false);\n  return <Space direction={\"vertical\"} size={30}>\n    <Space direction={\"vertical\"}>\n      <View>基础用法</View>\n      <View>\n        <Button onClick={() => {\n          setOpen(true);\n        }}>按钮</Button>\n        <Modal\n          open={open}\n          onOpenChange={setOpen}\n          title=\"确认解除微信关联？\"\n          content=\"解除后，将无法直接通过企业微信发起聊天。\"\n        />\n      </View>\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>ModalButton</View>\n      <ModalButton title=\"确认解除微信关联？\" content=\"解除后，将无法直接通过企业微信发起聊天。\">点击弹出</ModalButton>\n    </Space>\n    <Space direction={\"vertical\"}>\n      <View>useModal Hook 调用</View>\n      <ExampleUseModal />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Popup Form 弹出表单页面","description":"Popup Form 展示popup里面的表单组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {FormInfo, HeaderContainer} = miniCore;\nconst {range} = lodash;\nconst {Button, Popup} = antd;\n\nconst {useState} = React;\n\nconst {\n    FormPart,\n    Input,\n    TextArea,\n    CalendarTimeRange,\n    Calendar,\n    CitySelect,\n    FunctionSelect,\n    UserListSelect,\n    SubmitButton,\n    usePopupForm\n} = FormInfo;\n\nconst BaseExample = () => {\n    const popupForm = usePopupForm();\n    return <Button onClick={() => {\n        popupForm({\n            title: '新增表单',\n            formProps: {\n                onSubmit: (data) => {\n                    console.log(data);\n                }\n            },\n            children: <FormPart list={[<Input.Item name=\"name\" label=\"姓名\" rule=\"REQ\"/>,\n                <CalendarTimeRange.Item name=\"time\" label=\"时间\" rule=\"REQ\"/>,\n                <CitySelect.Item name=\"city\" label=\"城市\"/>, <FunctionSelect.Item name=\"function\" label=\"职能\"/>,\n                <TextArea.Item name=\"des\" label=\"说明\"/>]}/>\n        });\n    }}>点击弹出popup</Button>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Popup View 弹出页面","description":"Popup View 弹出页面","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { usePopupView, FormInfo, FixedView, CommonListTitle, Warning } = miniCore;\nconst { Space, Button } = antd;\nconst { Text } = tarojsComponents;\n\nconst {\n  Form,\n  FormList,\n  FormPart,\n  Input,\n  TextArea,\n  CalendarTimeRange,\n  CitySelect,\n  IndustrySelect,\n  FunctionSelect,\n  SubmitButton\n} = FormInfo;\n\nconst { useRef } = React;\n\nconst PopupViewButton = ({ position }) => {\n  const popupView = usePopupView({ position });\n  return (\n    <Button key={position} onClick={() => {\n      popupView({\n        title: position,\n        children: <Text>从{position}弹出</Text>\n      });\n    }}>从{position}弹出</Button>\n  );\n};\n\nconst BaseExample = () => {\n  const popupView = usePopupView();\n  const listRef = useRef();\n  return (\n    <Space direction={\"vertical\"} size={30}>\n      <Space direction={\"vertical\"}>\n        <Text>基础用法</Text>\n        <Button onClick={() => {\n          popupView({\n            title: \"基础用法\",\n            children: <Text>基础用法弹窗</Text>\n          });\n        }}>点击弹出</Button>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <Text>自定义弹出方向</Text>\n        <Space wrap>\n          {\n            [\"center\", \"top\", \"bottom\", \"left\", \"right\"].map(position => (\n              <PopupViewButton key={position} position={position} />\n            ))\n          }\n        </Space>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <Text>联合表单</Text>\n        <Button onClick={() => {\n          const { close } = popupView({\n            className: \"bg-grey\", title: \"欢迎页面\", children: <Form onSubmit={(data) => {\n              console.log(data);\n              close();\n            }}>\n              <Warning>警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示</Warning>\n              <FormPart list={[<Input.Item name=\"name\" label=\"姓名\" rule=\"REQ\" />,\n                <CalendarTimeRange.Item name=\"time\" label=\"时间\" rule=\"REQ\" />,\n                <CitySelect.Item name=\"city\" label=\"城市\" />, <FunctionSelect.Item name=\"function\" label=\"职能\" />,\n                <IndustrySelect.Item name=\"industry\" label=\"行业选择\" multiple />,\n                <TextArea.Item name=\"des\" label=\"说明\" />]} />\n              <CommonListTitle subtitle=\"(填写工作经历)\" extra={<Button onClick={() => {\n                listRef.current.add();\n              }}>添加</Button>}>工作经历</CommonListTitle>\n              <FormList ref={listRef} name=\"list\" minLength={1}\n                        list={[<Input.Item name=\"name\" label=\"名称\" labelTips=\"哈哈哈哈哈哈\" />,\n                          <Input.Item name=\"field0\" label=\"字段\" />,\n                          <Input.Item name=\"field1\" label=\"字段1\" />]} />\n              <Button onClick={() => {\n                popupView({\n                  title: \"下一个页面\",\n                  children: \"下一个页面下一个页面下一个页面下一个页面下一个页面\",\n                  hasSafeArea: true\n                });\n              }}>点击弹出下一个页面</Button>\n              <FixedView>\n                <SubmitButton>提交</SubmitButton>\n              </FixedView>\n            </Form>\n          });\n        }}>点击弹出</Button>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"ScrollLoader 滚动加载","description":"ScrollLoader 滚动加载","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { CommonScrollLoader } = miniCore;\nconst {Space} = antd;\nconst {View} = tarojsComponents;\n\nconst ScrollLoaderInner = () => {\n  return (\n    <Space direction={'vertical'}>\n      {\n        ['one', 'two'].map(item => (\n          <View key={item} style={{padding: '10px', boxSizing: 'border-box', border: '1px solid #ddd'}}>\n            {item}\n          </View>\n        ))\n      }\n    </Space>\n  )\n}\n\nconst BaseExample = () => {\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <CommonScrollLoader>\n          <ScrollLoaderInner />\n        </CommonScrollLoader>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>加载中</View>\n        <CommonScrollLoader isLoading loadingTips={'正在加载数据...'}>\n          <ScrollLoaderInner />\n        </CommonScrollLoader>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>没有更多数据</View>\n        <CommonScrollLoader noMore completeTips={'加载已完成，没有更多数据了'}>\n          <ScrollLoaderInner />\n        </CommonScrollLoader>\n      </Space>\n    </Space>\n  )\n};\n\nrender(<BaseExample />);\n\n"},{"title":"StateTag 状态标签","description":"StateTag 状态标签","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { StateTag } = miniCore;\nconst { Space } = antd;\nconst { View } = tarojsComponents;\n\nconst BaseExample = () => {\n  return (\n    <Space direction={\"vertical\"} size={30}>\n      <Space direction={\"vertical\"}>\n        <View>基础用法</View>\n        <StateTag type=\"primary\">哈哈哈</StateTag>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>不同类型</View>\n        <Space wrap>\n          {\n            [\"default\", \"result\", \"success\", \"progress\", \"danger\", \"info\", \"other\", \"primary\"].map(type => (\n              <StateTag key={type} type={type}>{type}</StateTag>\n            ))\n          }\n        </Space>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>不展示背景色</View>\n        <Space wrap>\n          {\n            [\"default\", \"result\", \"success\", \"progress\", \"danger\", \"info\", \"other\", \"primary\"].map(type => (\n              <StateTag key={type} type={type} showBackground={false}>{type}</StateTag>\n            ))\n          }\n        </Space>\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>展示边框</View>\n        <Space wrap>\n          <StateTag type=\"primary\" showBorder text=\"类型: Primary\" />\n          {\n            [\"default\", \"result\", \"success\", \"progress\", \"danger\", \"info\", \"other\", \"primary\"].map(type => (\n              <StateTag key={type} type={type} showBorder text={`${type}`} />\n            ))\n          }\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Table 表格","description":"Table 表格","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { Table } = miniCore;\nconst { Space } = antd;\nconst { View } = tarojsComponents;\n\nconst dataSource = [\n  { id: 1, name: \"哈哈哈\", count: 12 },\n  { id: 2, name: \"张三\", count: 200 },\n  { id: 3, name: \"李四\", count: 100 }\n];\n\nconst columns = [\n  { name: \"name\", title: \"名称\" },\n  { name: \"count\", title: \"数量\" }\n];\n\nconst BaseExample = () => {\n  return (\n    <Space direction={\"vertical\"} size={30}>\n      <Space direction={\"vertical\"}>\n        <View>基础用法</View>\n        <Table dataSource={dataSource} columns={columns} />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>多列</View>\n        <Table\n          dataSource={dataSource}\n          columns={[{ name: \"id\", title: \"ID\" }].concat(columns)}\n        />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>自定义rowKey</View>\n        <Table rowKey={\"name\"} dataSource={dataSource} columns={columns} />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>自定义列渲染</View>\n        <Table\n          dataSource={dataSource}\n          columns={[{\n            name: \"id\",\n            title: \"ID\",\n            render: (record, {dataSource, column}) => {\n              console.log(record, dataSource, column);\n              return record.id + '-' +  record.name\n            }\n          }].concat(columns)}\n        />\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"TipsMessage 提示信息","description":"TipsMessage 提示信息","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { TipsMessage } = miniCore;\nconst { Space, Icon } = antd;\nconst { View } = tarojsComponents;\n\nconst BaseExample = () => {\n  return (\n    <Space direction={\"vertical\"} size={30}>\n      <Space direction={\"vertical\"}>\n        <View>基础用法</View>\n        <TipsMessage\n          content={\"客户下任一合同包含Hands-off条款，该客户即受Hands-off限制。默认按照最严格的赔偿责任及条款描述提交审批。\"}\n          title={\"Hands-off信息\"}\n        />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>自定义弹窗 Title 图标</View>\n        <TipsMessage\n          content={\"客户下任一合同包含Hands-off条款，该客户即受Hands-off限制。默认按照最严格的赔偿责任及条款描述提交审批。\"}\n          title={\"Hands-off信息\"}\n          icon={<Icon type=\"tabzhiwei-xuanzhong\" className={'iconfont'} />}\n        />\n      </Space>\n      <Space direction={\"vertical\"}>\n        <View>取消确认按钮</View>\n        <TipsMessage\n          content={\"客户下任一合同包含Hands-off条款，该客户即受Hands-off限制。默认按照最严格的赔偿责任及条款描述提交审批。\"}\n          title={\"Hands-off信息\"}\n          cancel={{ span: 10, text: \"Cancel\" }}\n          confirm={{ span: 14, text: \"Confirm\" }}\n        />\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Warning 警告提示","description":"Warning 警告提示","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const { Warning } = miniCore;\nconst { Space } = antd;\nconst { View } = tarojsComponents;\n\nconst BaseExample = () => {\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Warning>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</Warning>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>不同类型</View>\n        <Space direction={'vertical'}>\n          {\n            ['success', 'info', 'error', 'warning'].map(type => (\n              <Warning key={type} type={type}>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</Warning>\n            ))\n          }\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>文字颜色根据类型改变</View>\n        <Space direction={'vertical'}>\n          {\n            ['success', 'info', 'error', 'warning'].map(type => (\n              <Warning key={type} type={type} fontColorful>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</Warning>\n            ))\n          }\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"}]}}
