{"name":"mini-core","summary":"<p><em><strong>mini-core</strong></em> 是一个Taro的高级组件库，它有别于 <em><strong>@kne/antd-taro</strong></em> 只提供简单的UI交互组件，它旨在解决toB类小程序应用中的复杂场景问题，例如：</p>\n<ol>\n<li>主题色问题</li>\n<li>Layout问题</li>\n<li>弹出页面问题</li>\n<li>表单问题</li>\n<li>列表下拉加载问题</li>\n<li>详情页展示问题</li>\n<li>筛选项问题</li>\n<li>登录用户信息问题</li>\n<li>显示项权限问题</li>\n<li>枚举值问题</li>\n<li>服务器获取数据及接口管理问题</li>\n<li>解决了项目中的components开发及调试问题</li>\n</ol>\n<p>它按照目前主流的形式解决了以上问题，可以作为一个应用的底层。\n它提供了相对较大的组件粒度，也对应用做出了一定程度的规范。使用它能快速构建这一类型的小程序。\n它提供了一个components的开发及调试环境和文档编写规范，可以使项目拥有一个良好的组件开发流程和规范，避免和业务混淆在一起</p>\n<h4>使用脚手架</h4>\n<p>你可以使用Taro官方提供的脚手架初始化项目</p>\n<pre><code class=\"language-shell\">npm install -g @tarojs/cli\n</code></pre>\n<pre><code class=\"language-shell\">taro init myApp\n</code></pre>\n<p>或者使用npx执行</p>\n<pre><code class=\"language-shell\">npx @tarojs/cli init myApp\n</code></pre>\n<p>初始化完成之后安装<em><strong>mini-core</strong></em>包</p>\n<pre><code class=\"language-shell\">npm i --save @kne/mini-core\n</code></pre>\n<p>然后安装example演示程序及components所需包</p>\n<pre><code class=\"language-shell\">npm i --save-dev @kne/mini-example @kne/md-doc\n</code></pre>\n<p>package.json的scripts中添加对应的启动命令</p>\n<pre><code class=\"language-json\">{\n  \"init\": \"mini-example install &amp;&amp; create-md &amp;&amp; mini-example build\",\n  \"start\": \"npm run build:md &amp;&amp;npm run build:doc &amp;&amp; run-p dev:weapp start:md start:doc start:example\",\n  \"build\": \"run-s build:weapp build:md build:doc build:example\",\n  \"build:weapp\": \"taro build --type weapp\",\n  \"dev:weapp\": \"cross-env NODE_ENV=production npm run build:weapp -- --watch\",\n  \"build:md\": \"create-md\",\n  \"start:md\": \"create-md --watch\",\n  \"build:doc\": \"mini-example build\",\n  \"start:doc\": \"mini-example start\",\n  \"build:example\": \"cd example &amp;&amp; npm run build:weapp\",\n  \"build:example:dd\": \"cd example &amp;&amp; npm run build:dd\",\n  \"start:example\": \"cd example &amp;&amp; cross-env NODE_ENV=production npm run build:weapp -- --watch\"\n}\n</code></pre>\n<h4>示例程序的使用</h4>\n<ol>\n<li>新建components目录</li>\n<li>新建文件 项目根目录/temp/config/alias.js 并添加</li>\n<li>按照examples规则在doc文件夹下完成对应的示例程序</li>\n<li>执行npm run start</li>\n<li>在小程序调试工具中打开 项目根目录/example 进行组件示例调试</li>\n</ol>\n<pre><code class=\"language-js\">module.exports = {\n    '@components': require.resolve('../../src/components'),\n};\n</code></pre>\n<h4>最佳实践</h4>\n<p>我们推荐把所有复杂逻辑都封装成组件放在components文件夹里，并且在doc里面完成对应的文档和示例，在pages里面调用时只包含简单的组件组合以及少量参数的传递。不要把业务写在pages里面，因为那通常不可维护。</p>\n<p>把组件里面的api调用参数及逻辑全部放在项目的preset.js里面。</p>\n<p>在开发阶段，通过mock接口数据来完成components里面具体业务组件的编写，不要硬依赖后端api。</p>\n<p>components内的组件命名尽量可以看出派生关系和业务所属。</p>","api":"<h3>Global</h3>\n<p>Global管理了一个全局的Context，preset及公共样式，css变量，dayjs默认插件引入，dayjs汉化语言包引入等</p>\n<p>Global组件需要放在最外面，推荐在app.js中</p>\n<p>常见的 preset如下：</p>\n<p>ajax: 发送ajax请求的方法，通常为axios.create()对象。因为在项目中可能回存在给axios对象添加拦截器或者其他config的情况，所以在应用内部用到的地方均应获取该对象使用。</p>\n<p>apis: 该应用的所有后端apis，应用内部，不管是组件还是业务在使用api时都应从这里获取，以保证后端api的可迁移性</p>\n<p>enums: 枚举定义，应用内部用到枚举的都应该通过Enum组件获取，Enum组件会根据此配置去加载对应的枚举数据</p>\n<p>formInfo: FormInfo组件会从此获取应用的Form预设配置</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>preset</td>\n<td>全局preset设置</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n</tbody>\n</table>\n<h3>Filter</h3>\n<p>一般放在页面顶部作为条件筛选</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter</td>\n<td>筛选器的值</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>筛选器值修改时触发执行</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>Filter.SearchBar</h4>\n<p>一般放在Filter顶部，负责关键字文本搜索部分</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>Filter.StateBar</h4>\n<p>负责状态筛选</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>items</td>\n<td>状态列表，为{key,children}结构的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h4>Filter.OptionsBar</h4>\n<p>负责复杂多条件筛选</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>筛选器的key，会赋值给filter</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>items</td>\n<td>状态列表，为{key,label,type}结构的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>type可选值: CitySelect, ListSelect, UserListSelect, FunctionSelect, IndustrySelect</li>\n<li>其他所需参数和对应type的组件参数一致</li>\n</ul>\n<h3>InfoPage</h3>\n<p>用以显示复杂数据</p>\n<h4>InfoPage.Part</h4>\n<p>放置于InfoPage内部显示带标题内容，如果InfoPage.Part内部再放置InfoPage.Part显示为二级标题，再放置一层则不显示标题</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>额外操作，显示于标题行最右侧</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>InfoPage.Collapse</h4>\n<p>放置于InfoPage内部显示止折叠面板</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>activeKey</td>\n<td>打开的折叠面板key</td>\n<td>array,any</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>defaultActiveKey</td>\n<td>打开的折叠面板key,在需要非受控时使用</td>\n<td>array,any</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>折叠面板展开或收起时触发事件</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>items</td>\n<td>折叠面板内容为{key,title,children}格式的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h3>Enum</h3>\n<p>显示或获取枚举值</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>moduleName</td>\n<td>枚举值的名字，在preset设置的枚举对象的key,当其为数组时可以一次性获取多个枚举值列表</td>\n<td>string,array</td>\n<td>-</td>\n</tr>\n<tr>\n<td>name</td>\n<td>枚举值的key，用来从moduleName的枚举值列表中获取对应key的值，传入该参数时moduleName不能为数组，不传时可以获取到整个枚举列表</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>children</td>\n<td>获取到枚举值，当组件有name传入时获取name所对应的枚举值，如果没有name传入则获取到整个枚举列表，如果moduleName为数组获取到对应的多个枚举列表</td>\n<td>function</td>\n<td>({description})=&gt;description</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>加载枚举值期间显示内容</td>\n<td>jsx</td>\n<td>null</td>\n</tr>\n<tr>\n<td>force</td>\n<td>在加载枚举列表时，如果之前已经加载过了默认会直接获取上次加载缓存的枚举列表，当该参数为true时则会忽略缓存从新获取枚举值列表数据</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3>FormInfo</h3>\n<p><em><strong>@kne/react-form-antd-taro</strong></em> 的再封装，实现了基本的Form样式和风格，统一和限制了调用方法，使写法更加统一规范，实现了一些复杂选择数据的Field组件</p>\n<h4>FormInfo{FormPart}</h4>\n<p>用以显示一个表单部分，可以包含对该段表单片段的说明</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>list</td>\n<td>表单组件列表，一般为一个Field的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题，说明该部分表单的内容</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>子标题，辅助说明</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isSubheading</td>\n<td>是否使标题显示为一个二级标题</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h4>FormInfo{List}</h4>\n<p>用以显示一个子表单，可以通过添加一条相同格式数据，一般用在类似教育经历，工作经历场景中。可以控制最大最小条数</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>list</td>\n<td>表单组件列表，一般为一个Field的数组</td>\n<td>array</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>name</td>\n<td>groupName，用来将该段表单的数据放置在对应的formData中</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题，说明该部分表单的内容</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>子标题，辅助说明</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>addText</td>\n<td>添加按钮文案</td>\n<td>string</td>\n<td>添加</td>\n</tr>\n<tr>\n<td>removeText</td>\n<td>删除按钮文案</td>\n<td>string</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>minLength</td>\n<td>最小个数，表单初始化会至少显示minLength条，实际条数等于minLength时将隐藏删除按钮</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>maxLength</td>\n<td>最大个数，实际条数等于maxLength时将隐藏添加按钮</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>isUnshift</td>\n<td>新增时，新一条表单时添加到表单列表最前面还是最后面</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>defaultLength</td>\n<td>初始化需要显示几段表单列表</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>itemTitle</td>\n<td>表单列表的二级title生成规则</td>\n<td>function,string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>FormInfo{usePopupForm}</h4>\n<p>可以弹出一个Form页面来填写信息，hooks返回一个function，调用后即可弹出页面</p>\n<pre><code class=\"language-js\">const popupForm = usePopupForm();\n\nconst {close} = popupForm({\n    title, formProps, children\n});\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>表单弹出页面的标题</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>formProps</td>\n<td>传给Form的参数</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>children</td>\n<td>放置在Form中的children，一般为FormPart或者FormList</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>Form的提交和取消按钮，已经默认预置号，通常不需要额外传值，除非业务上需要额外的一些设计和功能</td>\n<td>jsx</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>FormInfo{fields}</h4>\n<p>表单的Field组件集合</p>\n<p>此处将所有Field的共同参数作出说明，后面的具体Field将不包含这些共同部分</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>表单字段的名称，将作为formData的属性的一部分</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>label</td>\n<td>表单字段的显示文案，用以向用户说明字段的作用</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>rule</td>\n<td>表单字段的校验规则，以空格分开，在表单字段触发校验时串行执行校验规则，全部通过时允许提交</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>labelTips</td>\n<td>字段提示说明，用来向用户补充说明字段的一些注意事项</td>\n<td>string,function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>labelHidden</td>\n<td>是否隐藏label显示</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>labelRender</td>\n<td>一般情况label为string，当需要展示一个react组件时需要再传入该参数用以修饰label</td>\n<td>function</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Field.Item</p>\n<p>当Field需要放在FormPart或者List中，需要以此方法形式调用（目前的UI规范规定必须以此种方式调用Field，不推荐直接调用Field）如</p>\n<pre><code class=\"language-jsx\">&lt;AdvancedSelect.Item name=\"name\" label=\"label\" rule=\"rule\"/&gt;\n</code></pre>\n<h4>FormInfo{fields:{AdvancedSelect}}</h4>\n<p>高级列表选择器</p>\n<h4>FormInfo{fields:{AutoComplete}}</h4>\n<p>自动完成选择器</p>\n<h4>FormInfo{fields:{Avatar}}</h4>\n<p>头像或图片上传</p>\n<h4>FormInfo{fields:{Calendar}}</h4>\n<p>复杂日期选择器</p>\n<h4>FormInfo{fields:{CardType}}</h4>\n<p>证件类型选择和证件号码输入</p>\n<h4>FormInfo{fields:{CitySelect}}</h4>\n<p>城市选择</p>\n<h4>FormInfo{fields:{FunctionSelect}}</h4>\n<p>职能选择</p>\n<h4>FormInfo{fields:{IndustrySelect}}</h4>\n<p>行业选择</p>\n<h4>FormInfo{fields:{InputNumber}}</h4>\n<p>数字输入</p>\n<h4>FormInfo{fields:{InputNumberUnit}}</h4>\n<p>带单位数字输入</p>\n<h4>FormInfo{fields:{PhoneNumber}}</h4>\n<p>手机号输入</p>\n<h4>FormInfo{fields:{SalaryInput}}</h4>\n<p>薪资输入</p>\n<h4>FormInfo{fields:{TextArea}}</h4>\n<p>多行文本</p>\n<h4>FormInfo{fields:{Upload}}</h4>\n<p>文件上传</p>\n<h4>FormInfo{fields:{UserListSelect}}</h4>\n<p>用户选择</p>\n<h3>Permission</h3>\n<p>权限判断</p>\n<h3>Modal</h3>\n<p>模态对话框</p>\n<h3>PopupView</h3>\n<p>弹出页面</p>\n<h3>FixedView</h3>\n<p>浮动层</p>\n<h3>HeaderContainer</h3>\n<p>导航头</p>\n<h3>Highlight</h3>\n<p>文字高亮</p>\n<h3>File</h3>\n<p>文件显示及预览</p>\n<h3>Content</h3>\n<p>内容展示</p>\n<h3>StateTag</h3>\n<p>状态标签</p>\n<h3>TipsMessage</h3>\n<p>提示消息</p>\n<h3>Warning</h3>\n<p>警告文案</p>\n<h3>Calendar</h3>\n<p>日历</p>\n<h3>AvatarPreview</h3>\n<p>照片预览</p>\n<h3>Comment</h3>\n<p>评论列表</p>\n<h3>Table</h3>\n<p>表格</p>","example":{"isFull":false,"className":"mini_core_b4cf7","style":"","list":[{"title":"状态标签","description":"这里填写示例说明","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"}],"code":"const {StateTag} = miniCore;\nconst BaseExample = () => {\n    return <StateTag type=\"primary\">哈哈哈</StateTag>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"警告提示","description":"这里填写示例说明","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"}],"code":"const {Warning} = miniCore;\nconst BaseExample = () => {\n    return <Warning>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</Warning>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"枚举值","description":"展示获取枚举值和批量获取枚举值","scope":[{"name":"miniCore","packageName":"@kne/mini-core"}],"code":"const {Enum} = miniCore;\nconst BaseExample = () => {\n    return <Enum loading={null} moduleName=\"degreeEnum\" name={30}/>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"筛选","description":"展示条件筛选器","scope":[{"name":"miniCore","packageName":"@kne/mini-core"}],"code":"const {Enum, Filter} = miniCore;\nconst {useState} = React;\n\nconst BaseExample = () => {\n    const [filter, setFilter] = useState({});\n    return <Filter filter={filter} onChange={setFilter}>\n        <Filter.SearchBar name=\"keyword\"/>\n        <Filter.StateBar name=\"state\" items={[{\n            key: 'all', children: '全部'\n        }, {\n            key: 'progress', children: '进展中'\n        }, {\n            key: 'stop', children: '暂停'\n        }, {\n            key: 'close', children: '关闭'\n        }, {\n            key: 'other1', children: '其他1'\n        }, {\n            key: 'other2', children: '其他2'\n        }, {\n            key: 'other3', children: '其他3'\n        }, {\n            key: 'other4', children: '其他4超长超长超长超长'\n        }, {\n            key: 'other5', children: '其他5'\n        }]}/>\n        <Enum loading={null}\n              moduleName={[\"degreeEnum\", \"political\", \"positionStateEnum\"]}>{([degreeEnum, political, positionStateEnum]) => {\n            return <Filter.OptionsBar name=\"option2\" items={[{\n                key: 'city', label: '期望城市', type: 'CitySelect'\n            }, {\n                key: 'currentCity', label: '现居城市', type: 'CitySelect'\n            }, {\n                key: 'function', label: '职能', type: 'FunctionSelect'\n            }, {\n                key: 'industry', label: '行业', type: 'IndustrySelect'\n            }, {\n                key: 'mine', label: '我上传的', type: 'SwitchButton'\n            }, {\n                key: 'positionUser', label: '职位负责人', type: 'UserListSelect', apis: {\n                    getUserList: {\n                        loader: () => {\n                            return {\n                                pageData: degreeEnum.map(({value, description}) => ({\n                                    uid: value, name: description, description\n                                }))\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: 'political', label: '政治面貌', type: \"ListSelect\", api: {\n                    loader: () => {\n                        return {\n                            pageData: political.map(({value, description}) => ({\n                                value, label: description\n                            }))\n                        }\n                    }\n                }\n            }]}/>\n        }}</Enum>\n        <Filter.OptionsBar name=\"option3\" items={[{\n            key: 'city', label: '期望城市', type: 'CitySelect'\n        }, {\n            key: 'currentCity', label: '现居城市', type: 'CitySelect'\n        }]}/>\n    </Filter>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"表单","description":"展示表单组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {FormInfo, Global, CommonListTitle} = miniCore;\nconst {range} = lodash;\nconst {Button} = antd;\nconst {useMemo} = React;\n\nconst {\n    FormPart,\n    FormList,\n    Form,\n    Input,\n    SalaryInput,\n    PhoneNumber,\n    CardType,\n    Picker,\n    AdvancedSelect,\n    AutoComplete,\n    CalendarTimeRange,\n    Calendar,\n    CitySelect,\n    IndustrySelect,\n    FunctionSelect,\n    TimeStep,\n    CalendarRange,\n    UserListSelect,\n    InputNumber,\n    InputNumberUnit,\n    Upload,\n    SubmitButton,\n    useFormContext\n} = FormInfo;\n\nconst {useRef} = React;\n\nconst FormInner = () => {\n    const {formData} = useFormContext();\n    console.log('FormInner render');\n    return <FormPart title=\"表单标题\"\n                     list={[<AdvancedSelect.Item readOnly name=\"test2\" label=\"高级选择\"\n                                                 interceptor={[\"picker-value\", \"picker-single\"]} rule=\"REQ\"\n                                                 getSearchProps={() => {\n                                                     return {};\n                                                 }} api={{\n                         loader: () => {\n                             return {\n                                 pageData: [{label: \"第一项\", value: 1}, {\n                                     label: \"第二项\", value: 2, disabled: true\n                                 }, {\n                                     label: \"第三项\", value: 3,\n                                 },],\n                             };\n                         }\n                     }}/>, <Input.Item name=\"input\" label=\"输入框\"/>, <SubmitButton>提交</SubmitButton>]}/>;\n};\n\nconst BaseExample = () => {\n    const listRef = useRef();\n    return <Global preset={{\n        apis: {\n            baseURL: 'https://erc.test.fatalent.cn', resume: {\n                ossUpload: {\n                    url: '/api/v1/attachment/upload'\n                }\n            }, user: {\n                getUserList: {\n                    loader: () => {\n                        return {\n                            pageData: range(0, 20).map((index) => ({\n                                uid: index, name: `用户${index}`, description: `用户${index}`\n                            }))\n                        }\n                    }\n                }\n            },\n        }\n    }}>\n        {/*<CommonListTitle subtitle=\"(至少填写一段工作经历)\" extra=\"添加\">工作经历</CommonListTitle>\n        <CommonListTitle subtitle=\"(至少填写一段工作经历)\" isSubheading extra=\"添加\">工作经历</CommonListTitle>*/}\n        <Form data={{\n            'name': \"张三\",\n            'date-range': ['2010-01-01', '2012-01-02'],\n            'test2': {value: 3, label: '第三项'},\n            'city': ['020'],\n            'industry': [\"00100d4\"],\n            'function': [\"001001002\"]\n        }} onSubmit={(data) => {\n            console.log(data);\n        }}>\n            <FormInner/>\n            <FormList title=\"列表\" ref={listRef} name=\"list\" minLength={1}\n                      list={[<Input.Item name=\"name\" label=\"名称\" labelTips=\"哈哈哈哈\"/>, <Input.Item name=\"field0\" label=\"字段\"/>,\n                          <Input.Item name=\"field1\" label=\"字段1\"/>]}/>\n        </Form>\n        {/*<Form data={{\n            'name': \"张三\",\n            'date-range': ['2010-01-01', '2012-01-02'],\n            'test2': [3],\n            'city': ['020'],\n            'industry': [\"00100d4\"],\n            'function': [\"001001002\"]\n        }} onSubmit={(data) => {\n            console.log(data);\n        }}>\n            <FormPart title=\"表单标题\"\n                      list={[<Input.Item label=\"姓名\" name=\"name\" rule=\"REQ LEN-0-10\"/>,\n                          <Picker.DateRangePicker.Item name=\"date-range\" label=\"时间段\"/>,\n                          <PhoneNumber.Item name=\"phone\" label=\"手机\"/>, <CardType.Item name=\"id-card\" label=\"身份证\"/>,\n                          <SalaryInput.Item name=\"salary\" label=\"薪资\" hasMonth typeEnum={({render}) => render([{\n                              description: '年薪', value: 6\n                          }, {description: '月薪', value: 5}, {description: '周薪', value: 4}, {\n                              description: '日薪', value: 3\n                          }, {description: '时薪', value: 2}])}/>,\n                          <AdvancedSelect.Item name=\"test2\" label=\"高级选择\" rule=\"REQ\" getSearchProps={() => {\n                              return {};\n                          }} api={{\n                              loader: () => {\n                                  return {\n                                      pageData: [{label: \"第一项\", value: 1}, {\n                                          label: \"第二项\", value: 2, disabled: true\n                                      }, {\n                                          label: \"第三项\", value: 3,\n                                      },],\n                                  };\n                              }\n                          }}/>, <CitySelect.Item name=\"city\" label=\"城市选择\"/>,\n                          <IndustrySelect.Item name=\"industry\" label=\"行业选择\" multiple/>,\n                          <FunctionSelect.Item name=\"function\" label=\"职能选择\" multiple={false}/>,\n                          <CalendarTimeRange.Item name=\"time\" label=\"面试时间\" rule=\"REQ\"/>,\n                          <InputNumber.Item name=\"number\" label=\"数字\" addonAfter=\"元\" step={2}/>,\n                          <InputNumberUnit.Item name=\"date\" label=\"试用期\"/>,\n                          <Calendar.Item name=\"time2\" label=\"时间\"/>, <TimeStep.Item name=\"timeStep\" label=\"时间2\"/>,\n                          <CalendarRange.Item name=\"time3\" label=\"时间段\"/>,\n                          <CalendarTimeRange.Item name=\"time2\" label=\"面试时间2\" rule=\"REQ\" durationHidden/>,\n                          <UserListSelect.Item name=\"user\" label=\"用户\" rule=\"REQ\"/>,\n                          <Upload.Item name=\"attachment\" label=\"附件\" rule=\"REQ\"/>,\n                          <AutoComplete.Item name=\"school\" label=\"学校\" rule=\"REQ\" api={{\n                              loader: ({data}) => {\n                                  return {\n                                      pageData: [{\n                                          label: \"第一项\" + data.searchText, value: 1\n                                      }, {label: \"第二项\" + data.searchText, value: 2, disabled: true}, {\n                                          label: \"第三项\" + data.searchText, value: 3,\n                                      },],\n                                  };\n                              }\n                          }}/>, <SubmitButton>提交</SubmitButton>]}/>\n            <CommonListTitle subtitle=\"(填写工作经历)\" extra={<Button fill=\"none\" onClick={() => {\n                listRef.current.add();\n            }}>添加</Button>}>工作经历</CommonListTitle>\n            <FormList ref={listRef} name=\"list\" minLength={1}\n                      list={[<Input.Item name=\"name\" label=\"名称\"/>, <Input.Item name=\"field0\" label=\"字段\"/>,\n                          <Input.Item name=\"field1\" label=\"字段1\"/>]}/>\n            <FormList name=\"list2\" title=\"list2\" subtitle=\"副标题\" minLength={1}\n                      itemTitle={({index}) => `第${index + 1}项`}\n                      list={[<Input.Item name=\"name\" label=\"名称\"/>, <Input.Item name=\"field0\" label=\"字段\"/>,\n                          <Input.Item name=\"field1\" label=\"字段1\"/>]}/>\n        </Form>*/}\n    </Global>;\n}\n\nrender(<BaseExample/>);\n\n"},{"title":"popup里面的表单","description":"展示popup里面的表单组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"lodash","packageName":"lodash"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {FormInfo, HeaderContainer, FixView} = miniCore;\nconst {range} = lodash;\nconst {Button, Popup, NavBar} = antd;\n\nconst {useState} = React;\n\nconst {\n    FormPart,\n    Input,\n    TextArea,\n    CalendarTimeRange,\n    Calendar,\n    CitySelect,\n    FunctionSelect,\n    UserListSelect,\n    SubmitButton,\n    usePopupForm\n} = FormInfo;\n\nconst BaseExample = () => {\n    const popupForm = usePopupForm();\n    return <Button onClick={() => {\n        popupForm({\n            title: '新增表单',\n            formProps: {\n                onSubmit: (data) => {\n                    console.log(data);\n                }\n            },\n            children: <FormPart list={[<Input.Item name=\"name\" label=\"姓名\" rule=\"REQ\"/>,\n                <CalendarTimeRange.Item name=\"time\" label=\"时间\" rule=\"REQ\"/>,\n                <CitySelect.Item name=\"city\" label=\"城市\"/>, <FunctionSelect.Item name=\"function\" label=\"职能\"/>,\n                <TextArea.Item name=\"des\" label=\"说明\"/>]}/>\n        });\n    }}>点击弹出popup</Button>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"高亮","description":"展示搜索高亮","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const {HighLight, HighLightProvider} = miniCore;\nconst {View} = tarojsComponents;\n\nconst BaseExample = () => {\n  return <View>\n    <View>示例1：默认标签</View>\n    <HighLightProvider keyword=\"东北\">\n      <HighLight text=\"我的家在东北，松花江上呀！\"/>\n    </HighLightProvider>\n    <View style={{height: '30px'}}></View>\n    <View>示例2：自定义容器标签</View>\n    <HighLightProvider keyword={[\"项目需求分析\", \"新的技术栈\"]}>\n      <HighLight tagName={View} text=\"工作描述: 参与项目需求分析,业务模块划分↵学习一些新的技术栈↵部分功能模块代码的实现↵对自身完成代码进行简单测试↵对于电商项目的核心业务有一定经验↵后端开发RabbitMQJavaMySQLRedisSpringCloudElasticsearch微服务架构\"/>\n    </HighLightProvider>\n    <View style={{height: '30px'}}></View>\n    <View>示例2：忽略大小写</View>\n    <HighLightProvider keyword={[\"哈尔滨\", \"信息\", \"abs wang\"]}>\n      <HighLight tagName={View} text=\"ABs Wang我的家在东北，松花江上呀！哈尔滨真美，信息通达\"/>\n    </HighLightProvider>\n  </View>\n};\n\nrender(<BaseExample/>);\n"},{"title":"日历","description":"展示日历组件","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"},{"name":"dayjs","packageName":"dayjs"}],"code":"const {\n    Calendar,\n    CalendarMonthView,\n    CalendarMonthSelector,\n    CalendarMonthSwiper,\n    CalendarWeekTitle,\n    CalendarWeekView,\n    CalendarTimeStepView,\n    CalendarTimeLengthView,\n    CalendarView,\n    CalendarTimeRangeView,\n    CalendarTimeRangePopup,\n    CalendarRangeView,\n    CalendarPopup,\n    CalendarRangePopup,\n    CalendarTimeStepPopup\n} = miniCore;\nconst {Space, Button} = antd;\nconst {useState} = React;\nconst {View} = tarojsComponents;\nconst BaseExample = () => {\n    const [value, onChange] = useState(new Date());\n    const [time, onTimeChange] = useState('09:15');\n    const [timeLength, setTimeLength] = useState(60);\n    const [timeRange, setTimeRange] = useState([new Date(), new Date(Date.now() + 60 * 60 * 1000)]);\n    const [open, setOpen] = useState(false);\n    const [open2, setOpen2] = useState(false);\n    const [open3, setOpen3] = useState(false);\n    const [open4, setOpen4] = useState(false);\n    return <Space direction=\"vertical\">\n        <View>CalendarWeekTitle:展示星期文案</View>\n        <CalendarWeekTitle/>\n        <View>CalendarWeekView:展示一个周日期</View>\n        <CalendarWeekView current={value} onChange={onChange} minDate=\"2020-10-01\" maxDate=\"2030-01-01\"\n                          marks={['2023-10-01', '2023-09-30']}/>\n        <View>CalendarMonthView:展示一个月日期</View>\n        <CalendarMonthView current={value} onChange={onChange} minDate=\"2020-10-01\" maxDate=\"2030-01-01\"\n                           marks={['2023-10-01', '2023-09-30']}/>\n        <View>CalendarTimeStepView:展示一个时间段选择 {time}</View>\n        <View style={{'--picker-height': '400px'}}>\n            <CalendarTimeStepView value={time} onChange={onTimeChange}/>\n        </View>\n        <View>CalendarTimeLengthView:展示一个时长选择 {timeLength}分钟</View>\n        <View style={{'--picker-height': '400px'}}>\n            <CalendarTimeLengthView value={timeLength} onChange={setTimeLength}/>\n        </View>\n        <View>CalendarMonthSelector:展示月份选择</View>\n        <View style={{'--month-selector-height': '200px'}}>\n            <CalendarMonthSelector value={value} minDate=\"2020-10-01\" maxDate=\"2030-01-01\" onChange={onChange}/>\n        </View>\n        <View>CalendarMonthSwiper:展示一个月日期并且可以左右滑动切换月份</View>\n        <CalendarMonthSwiper current={value} onChange={onChange} minDate=\"2020\" maxDate=\"2030-01-01\"\n                             marks={['2023-10-01', '2023-09-30']}/>\n        <View>CalendarView:完整日历视图</View>\n        <View style={{'--month-selector-height': '600px'}}>\n            <CalendarView value={value} onChange={onChange} disabledDate={(date) => {\n                return dayjs(date).format('YYYY-MM-DD') === '2023-09-15';\n            }}/>\n        </View>\n        <View>Calendar:完整日历功能</View>\n        <Calendar\n          value={value}\n          onChange={onChange}\n          extraOptions={<Button size=\"small\">添加</Button>}\n        />\n        <View>CalendarTimeRangeView:时间段选择器 {dayjs(timeRange[0]).format('YYYY-MM-DD HH:mm')}~{dayjs(timeRange[1]).format('YYYY-MM-DD HH:mm')}</View>\n        <CalendarTimeRangeView value={timeRange} startTime=\"15:00\" endTime=\"21:00\" onChange={setTimeRange}/>\n        <View>CalendarRangeView:</View>\n        <CalendarRangeView/>\n        <View>CalendarTimeRangePopup:</View>\n        <Button onClick={() => {\n            setOpen(true);\n        }}>点击弹出</Button>\n        <CalendarTimeRangePopup open={open} onOpenChange={setOpen} value={timeRange} onChange={setTimeRange}/>\n        <View>CalendarPopup:</View>\n        <Button onClick={() => {\n            setOpen2(true);\n        }}>点击弹出</Button>\n        <CalendarPopup open={open2} onOpenChange={setOpen2}/>\n        <View>CalendarRangePopup:</View>\n        <Button onClick={() => {\n            setOpen3(true);\n        }}>点击弹出</Button>\n        <View>CalendarTimeStepPopup:展示一个时间段选择弹窗</View>\n        <Button onClick={() => {\n            setOpen4(true);\n        }}>点击弹出</Button>\n        <CalendarTimeStepPopup open={open4} onOpenChange={setOpen4}/>\n        <CalendarRangePopup open={open3} onOpenChange={setOpen3}/>\n    </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"确认对话框","description":"展示确认对话框","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const {Modal, ModalButton, useModal} = miniCore;\nconst {useState} = React;\nconst {Button} = antd;\n\nconst ExampleUseModal = () => {\n    const modal = useModal();\n    return <Button onClick={() => {\n        modal({\n            title: '确认解除微信关联？', content: '解除后，将无法直接通过企业微信发起聊天。'\n        });\n    }}>按钮</Button>;\n};\nconst BaseExample = () => {\n    const [open, setOpen] = useState(false);\n    return <>\n        <Button onClick={() => {\n            setOpen(true);\n        }}>按钮</Button>\n        <Modal open={open} onOpenChange={setOpen} title=\"确认解除微信关联？\"\n               content=\"解除后，将无法直接通过企业微信发起聊天。\"/>\n\n        <ModalButton title=\"确认解除微信关联？\" content=\"解除后，将无法直接通过企业微信发起聊天。\">点击弹出</ModalButton>\n        <ExampleUseModal />\n    </>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"信息展示","description":"信息展示","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const {Content, TipsMessage} = miniCore;\nconst {Button} = antd;\nconst BaseExample = () => {\n  return <Content list={[{\n    label: '测试', content: '哈哈啊哈哈'\n  }, {\n    label: '测试', content: '哈哈啊哈哈', tips: '哈哈哈哈', action: <Button>查看</Button>\n  },{\n    label:'tips',content:<TipsMessage content=\"哈哈哈哈\" title=\"我是一个title\" icon={null}/>\n  }]}/>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"复杂信息展示","description":"复杂信息展示","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"},{"name":"tarojsComponents","packageName":"@tarojs/components"}],"code":"const {InfoPage, Content, Comment, Table} = miniCore;\nconst {Button, Steps, Space} = antd;\nconst BaseExample = () => {\n    return <InfoPage>\n        <InfoPage.Part title=\"开票信息\">\n            <InfoPage.Part>\n                <Content list={[{\n                    label: '开票ID', content: 'IN00001533'\n                }, {\n                    label: '客户名称', content: '自动化测试有限公司'\n                }, {\n                    label: '合同', content: 'onsiteRPO合同', action: <Button>预览</Button>\n                }, {\n                    label: '划转人', block: true, content: <Table dataSource={[{\n                        id: 1, name: '哈哈哈', count: 12\n                    }, {\n                        id: 2, name: '张三张三张三张三张三张三张三张三张三张三张三张三张三张三张三张三张三', count: 200\n                    }]} columns={[{name: 'name', title: '名称'}, {name: 'count', title: '数量'}]}/>\n                }, {\n                    label: '备注', content: null\n                }]}/>\n            </InfoPage.Part>\n            <InfoPage.Part title=\"发票费用信息\">\n                <InfoPage.Part>\n                    发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息\n                </InfoPage.Part>\n                <InfoPage.Part>\n                    <Content list={[{\n                        label: '开票ID', content: 'IN00001533'\n                    }, {\n                        label: '客户名称', content: '自动化测试有限公司'\n                    }, {\n                        label: '合同', content: 'onsiteRPO合同', action: <Button>预览</Button>\n                    }, {\n                        label: '划转人', block: true, content: <Table dataSource={[{\n                            id: 1, name: '哈哈哈', count: 12\n                        }, {\n                            id: 2, name: '张三', count: 200\n                        }]} columns={[{name: 'name', title: '名称'}, {name: 'count', title: '数量'}]}/>\n                    }, {\n                        label: '备注', content: null\n                    }]}/>\n                </InfoPage.Part>\n                <InfoPage.Part>\n                    <Content list={[{\n                        label: '开票ID', content: 'IN00001533'\n                    }, {\n                        label: '客户名称', content: '自动化测试有限公司'\n                    }, {\n                        label: '合同', content: 'onsiteRPO合同', action: <Button>预览</Button>\n                    }, {\n                        label: '划转人', block: true, content: <Table dataSource={[{\n                            id: 1, name: '哈哈哈', count: 12\n                        }, {\n                            id: 2, name: '张三', count: 200\n                        }]} columns={[{name: 'name', title: '名称'}, {name: 'count', title: '数量'}]}/>\n                    }, {\n                        label: '备注', content: null\n                    }]}/>\n                </InfoPage.Part>\n            </InfoPage.Part>\n            <InfoPage.Part title=\"发票信息\">\n                发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息\n            </InfoPage.Part>\n        </InfoPage.Part>\n        <InfoPage.Part title=\"开票信息\">\n            <InfoPage.Part title=\"发票费用信息\">\n                发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息\n            </InfoPage.Part>\n            <InfoPage.Part title=\"发票信息\">\n                发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息发票费用信息\n            </InfoPage.Part>\n        </InfoPage.Part>\n        <InfoPage.Part title=\"开票信息\">\n            <InfoPage.Collapse items={[{\n                key: '1', title: '第一项', children: <Content list={[{\n                    label: '开票ID', content: 'IN00001533', tips: '哈哈哈'\n                }, {\n                    label: '客户名称', content: '自动化测试有限公司'\n                }, {\n                    label: '合同', content: 'onsiteRPO合同', action: <Button>预览</Button>\n                }]}/>\n            }, {\n                key: '2', title: '第二项', children: '第二项第二项第二项第二项第二项第二项第二项第二项'\n            }, {\n                key: '3', title: '第三项', children: '第三项第三项第三项第三项第三项第三项第三项第三项第三项'\n            }]}/>\n        </InfoPage.Part>\n        <InfoPage.Part title=\"审批流程\">\n            <Steps current={2} items={[{\n                title: '第一步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第二步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第三步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第四步', description: '完成时间：2020-12-01 12:30'\n            }]}/>\n            <Steps direction=\"vertical\" current={2} items={[{\n                title: '第一步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第二步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第三步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第四步', description: '完成时间：2020-12-01 12:30'\n            }]}/>\n            <Steps direction=\"vertical\" current={2} items={[{\n                title: '第一步', description: <Space direction=\"vertical\">\n                    <Comment user={{name: '张三'}} time={new Date()}>\n                        评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n                    </Comment>\n                    <Comment user={{name: '张三'}} time={new Date()} action={<Button>撤回</Button>}>\n                        评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n                    </Comment>\n                </Space>\n            }, {\n                title: '第二步', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第三步', status: 'error', description: '完成时间：2020-12-01 12:30'\n            }, {\n                title: '第四步', description: '完成时间：2020-12-01 12:30'\n            }]}/>\n        </InfoPage.Part>\n    </InfoPage>\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"评论","description":"评论","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {Comment} = miniCore;\nconst {Space, Button} = antd;\n\n\nconst BaseExample = () => {\n    return <Space direction=\"vertical\">\n        <Comment user={{name: '张三'}} time={new Date()}>\n            评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n        </Comment>\n        <Comment user={{name: '张三'}} time={new Date()} action={<Button>撤回</Button>}>\n            评论评论评论评论评论评论评论评论评论评论评论评论评论评论\n        </Comment>\n    </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"弹出页面","description":"弹出页面","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {usePopupView, FormInfo, FixedView, CommonListTitle, Warning} = miniCore;\nconst {Button} = antd;\n\nconst {\n    Form,\n    FormList,\n    FormPart,\n    Input,\n    TextArea,\n    CalendarTimeRange,\n    CitySelect,\n    IndustrySelect,\n    FunctionSelect,\n    SubmitButton,\n} = FormInfo;\n\nconst {useRef} = React;\n\nconst BaseExample = () => {\n    const popupView = usePopupView();\n    const listRef = useRef();\n    return <Button onClick={() => {\n        const {close} = popupView({\n            className: 'bg-grey', title: '欢迎页面', children: <Form onSubmit={(data) => {\n                console.log(data);\n                close();\n            }}>\n                <Warning>警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示警告提示</Warning>\n                <FormPart list={[<Input.Item name=\"name\" label=\"姓名\" rule=\"REQ\"/>,\n                    <CalendarTimeRange.Item name=\"time\" label=\"时间\" rule=\"REQ\"/>,\n                    <CitySelect.Item name=\"city\" label=\"城市\"/>, <FunctionSelect.Item name=\"function\" label=\"职能\"/>,\n                    <IndustrySelect.Item name=\"industry\" label=\"行业选择\" multiple/>,\n                    <TextArea.Item name=\"des\" label=\"说明\"/>]}/>\n                <CommonListTitle subtitle=\"(填写工作经历)\" extra={<Button onClick={() => {\n                    listRef.current.add();\n                }}>添加</Button>}>工作经历</CommonListTitle>\n                <FormList ref={listRef} name=\"list\" minLength={1}\n                          list={[<Input.Item name=\"name\" label=\"名称\" labelTips=\"哈哈哈哈哈哈\"/>, <Input.Item name=\"field0\" label=\"字段\"/>,\n                              <Input.Item name=\"field1\" label=\"字段1\"/>]}/>\n                <Button onClick={() => {\n                    popupView({\n                        title: '下一个页面',\n                        children: '下一个页面下一个页面下一个页面下一个页面下一个页面',\n                        hasSafeArea: true,\n                    });\n                }}>点击弹出下一个页面</Button>\n                <FixedView>\n                    <SubmitButton>提交</SubmitButton>\n                </FixedView>\n            </Form>\n        });\n    }}>点击弹出</Button>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"文件预览","description":"文件预览","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {Global, File} = miniCore;\nconst BaseExample = () => {\n    return <Global preset={{\n        apis: {\n            file: {\n                getFileUrl: {\n                    loader: ({params}) => {\n                        return \"https://attachment.test.fatalent.cn/attachment/Q0ol94kBBZgnCXyZKG1Y.jpg?Expires=1700814537&OSSAccessKeyId=LTAI5tAfbu2aBppB3jMj1kMt&Signature=KcJHlI8FDYMolFQFxacGzhoaA1A%3D\";\n                    }\n                }\n            }\n        }\n    }}>\n        <File value=\"xxxxx\" originalName=\"预览文件.jpg\"/>\n    </Global>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"表格","description":"表格","scope":[{"name":"miniCore","packageName":"@kne/mini-core"},{"name":"antd","packageName":"@kne/antd-taro"}],"code":"const {Table} = miniCore;\nconst BaseExample = () => {\n    return <Table dataSource={[{\n        id: 1, name: '哈哈哈', count: 12\n    }, {\n        id: 2, name: '张三', count: 200\n    }]} columns={[{name: 'name', title: '名称'}, {name: 'count', title: '数量'}]}/>;\n};\n\nrender(<BaseExample/>);\n\n"}]}}
