{"name":"antd-taro","summary":"<p><em><strong>antd-taro</strong></em> 是一个参考 <a href=\"https://mobile.ant.design/\">antd-mobile</a> api和组件设计样式实现的用于Taro框架进行微信小程序的开发的组件库。</p>\n<p>注意事项：</p>\n<ul>\n<li><em><strong>antd-taro</strong></em>并不是antd-mobile的官方迁移，是我们参考antd-mobile源代码去除Taro微信小程序无法兼容部分和部分使用频率较低的组件</li>\n<li><em><strong>antd-taro</strong></em>的API和antd-mobile有很多差异，所以使用时请参考我们提供的API文档</li>\n<li><em><strong>antd-taro</strong></em>目前只测试了在微信小程序下以react模式进行开发，其他类似支付宝小程序等尚未进行测试，具体表现未知</li>\n<li>@kne/mini-core 是依赖<em><strong>antd-taro</strong></em>的更加上层的实现，提供了微信小程序开发的整套开发流程，组件规范和更大粒度的复杂组件实现，可以搭配一起进行使用</li>\n</ul>","api":"<h3>Avatar 头像</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>头像的图片地址</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>size</td>\n<td>大小，宽度和高度，等效于设置 --size CSS 变量</td>\n<td>number</td>\n<td>48</td>\n</tr>\n</tbody>\n</table>\n<h4>CSS 变量</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>默认值</th>\n<th>全局变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--border-radius</td>\n<td>圆角</td>\n<td>50%</td>\n<td>--adm-avatar-border-radius</td>\n</tr>\n<tr>\n<td>--size</td>\n<td>大小，宽度和高度</td>\n<td>48px</td>\n<td>--adm-avatar-size</td>\n</tr>\n</tbody>\n</table>\n<h3>Badge 徽标</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bordered</td>\n<td>是否增加描边</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>color</td>\n<td>徽标背景色，等效于设置 --color CSS 变量</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>content</td>\n<td>徽标内容：如果传 null undefined '' 或不传，则不显示徽标；如果传 Badge.dot，会显示小红点</td>\n<td>React.ReactNode  | typeof Badge.dot</td>\n<td>-</td>\n</tr>\n<tr>\n<td>wrapperClassName</td>\n<td>Badge wrap 自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>wrapperStyle</td>\n<td>Badge wrap 自定义样式</td>\n<td>React.CSSProperties</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>CSS 变量</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>默认值</th>\n<th>全局变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--color</td>\n<td>徽标背景色</td>\n<td>#ff411c</td>\n<td>--adm-badge-color</td>\n</tr>\n<tr>\n<td>--right</td>\n<td>相对于最右边，向左的偏移量</td>\n<td>0</td>\n<td>-</td>\n</tr>\n<tr>\n<td>--top</td>\n<td>相对于最上边，向下的偏移量</td>\n<td>0</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>Button 按钮</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td>是否是块级元素</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>color</td>\n<td>按钮的颜色</td>\n<td>'default' | 'primary' | 'success' | 'warning' | 'danger'</td>\n<td>'default'</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>fill</td>\n<td>填充模式</td>\n<td>'solid' | 'outline' | 'none'</td>\n<td>'solid'</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>是否处于加载状态，'auto' 模式会监听 onClick 的 Promise 状态自动更新 loading</td>\n<td>boolean | 'auto'</td>\n<td>false</td>\n</tr>\n<tr>\n<td>loadingIcon</td>\n<td>加载状态下的 icon 图标</td>\n<td>ReactNode</td>\n<td>&lt;DotLoading color='currentColor' /&gt;</td>\n</tr>\n<tr>\n<td>loadingText</td>\n<td>加载状态下额外展示的文字</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>shape</td>\n<td>按钮的形状</td>\n<td>'default' | 'rounded' | 'rectangular'</td>\n<td>'default'</td>\n</tr>\n<tr>\n<td>size</td>\n<td>大小</td>\n<td>'mini' | 'small' | 'middle' | 'large'</td>\n<td>'middle'</td>\n</tr>\n<tr>\n<td>type</td>\n<td>原生 button 元素的 type 属性</td>\n<td>'submit' | 'reset' | 'button'</td>\n<td>'button'</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void | Promise</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><em><strong>此外，还支持原生 button 元素的以下属性：onMouseDown onMouseUp onTouchStart onTouchEnd。</strong></em></p>\n<h4>CSS 变量</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>默认值</th>\n<th>全局变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--background-color</td>\n<td>背景颜色</td>\n<td>var(--adm-color-background) #ffffff</td>\n<td>--adm-button-background-color</td>\n</tr>\n<tr>\n<td>--border-color</td>\n<td>边框颜色</td>\n<td>var(--adm-color-border) #f1f1f1</td>\n<td>--adm-button-border-color</td>\n</tr>\n<tr>\n<td>--border-radius</td>\n<td>圆角大小</td>\n<td>8px</td>\n<td>--adm-button-border-radius</td>\n</tr>\n<tr>\n<td>--border-style</td>\n<td>边框样式</td>\n<td>solid</td>\n<td>--adm-button-border-style</td>\n</tr>\n<tr>\n<td>--border-width</td>\n<td>边框样式</td>\n<td>2px</td>\n<td>--adm-button-border-width</td>\n</tr>\n<tr>\n<td>--text-color</td>\n<td>文字颜色</td>\n<td>var(--adm-color-text) '#333333'</td>\n<td>--adm-button-text-color</td>\n</tr>\n</tbody>\n</table>\n<h3>Card 卡片</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bodyClassName</td>\n<td>body 自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>bodyStyle</td>\n<td>body 自定义样式</td>\n<td>React.CSSProperties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>header 右边区域</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>headerClassName</td>\n<td>header 自定义类名</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>headerStyle</td>\n<td>header 自定义样式</td>\n<td>React.CSSProperties</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onBodyClick</td>\n<td>body 区域点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>卡片点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onHeaderClick</td>\n<td>header 区域点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>header 左边区域</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>CheckList 可勾选列表</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>activeIcon</td>\n<td>选中图标</td>\n<td>ReactNode</td>\n<td>&lt;CheckOutline /&gt;</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>列表右侧区域</td>\n<td>(active: boolean) =&gt; ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>默认项</td>\n<td>string[]</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否允许多选</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选项改变时触</td>\n<td>(value: string[]) =&gt; void</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>value</td>\n<td>选中项</td>\n<td>string[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<p>此外，还支持 List 的 mode 属性</p>\n<h3>CheckListItem</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>value</td>\n<td>选项值</td>\n<td>string[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<h4>CSS 变量</h4>\n<p><em><strong>同 List.Item</strong></em></p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--active-background-color</td>\n<td>点击时的背景颜色</td>\n<td>var(--adm-color-border)</td>\n</tr>\n<tr>\n<td>--align-items</td>\n<td>列表项的 align-item</td>\n<td>center</td>\n</tr>\n<tr>\n<td>--border-bottom</td>\n<td>列表容器底部的边框样式</td>\n<td>solid 2px var(--adm-color-border)</td>\n</tr>\n<tr>\n<td>--border-inner</td>\n<td>列表项底部的边框样式</td>\n<td>solid 2px var(--adm-color-border)</td>\n</tr>\n<tr>\n<td>--border-top</td>\n<td>列表容器顶部的边框样式</td>\n<td>solid 2px var(--adm-color-border)</td>\n</tr>\n<tr>\n<td>--extra-max-width</td>\n<td>extra 部分的最大宽度</td>\n<td>70%</td>\n</tr>\n<tr>\n<td>--font-size</td>\n<td>Body 内容的字体大小</td>\n<td>var(--adm-font-size-9) 34px</td>\n</tr>\n<tr>\n<td>--header-font-size</td>\n<td>头部的字体大小</td>\n<td>var(--adm-font-size-7) 30px</td>\n</tr>\n<tr>\n<td>--padding-left</td>\n<td>列表项和列表头部左侧的 padding</td>\n<td>24px</td>\n</tr>\n<tr>\n<td>--padding-right</td>\n<td>列表项和列表头部右侧的 padding</td>\n<td>24px</td>\n</tr>\n<tr>\n<td>--prefix-padding-right</td>\n<td>prefix 部分的右侧 padding</td>\n<td>24px</td>\n</tr>\n<tr>\n<td>--prefix-width</td>\n<td>prefix 部分的宽度</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<h3>Collapse 折叠面板</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accordion</td>\n<td>是否开启手风琴模式</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>activeKey</td>\n<td>当前展开面板的 key</td>\n<td>手风琴模式：string | null&lt;br/&gt; 非手风琴模式：string[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>arrow</td>\n<td>自定义箭头，如果是 ReactNode，那么 antd-mobile 会自动为你增加旋转动画效果</td>\n<td>ReactNode</td>\n<td>((active: boolean) =&gt; React.ReactNode) | []</td>\n</tr>\n<tr>\n<td>defaultActiveKey</td>\n<td>默认展开面板的 key</td>\n<td>手风琴模式：string | null&lt;br/&gt; 非手风琴模式：string[] | []</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>切换面板时触发</td>\n<td>手风琴模式：(activeKey: string | null) =&gt; void&lt;br/&gt; 非手风琴模式：(activeKey: string[]) =&gt; void</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>Collapse.Panel</h4>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrow</td>\n<td>自定义箭头</td>\n<td>ReactNode | ((active: boolean) =&gt; React.ReactNode)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>destroyOnClose</td>\n<td>不可见时是否销毁 DOM 结构</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否为禁用状态</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>forceRender</td>\n<td>被隐藏时是否渲染 DOM 结构</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>key</td>\n<td>唯一标识符</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>标题栏的点击事件</td>\n<td>(event: React.MouseEvent) =&gt; void</td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题栏左侧内容</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>DatePicker日期选择器</h3>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认选中值</td>\n<td>PickerDate</td>\n<td>new Date() 今天</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>","example":{"isFull":false,"className":"antd_taro_168b0","style":"","list":[{"title":"Avatar 头像","description":"Avatar 头像","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Avatar, Space} = antdTaro;\nconst {View, Text} = taroComponent;\n\nconst demoAvatarImages = [\n  'https://github.githubassets.com/assets/app-icon-512-7f9c4ff2e960.png',\n  'https://avatars.githubusercontent.com/u/37367461?v=4',\n];\n\nconst BaseExample = ()=>{\n    return (\n      <Space direction={'vertical'} size={30}>\n        <Space direction={'vertical'}>\n          <View>基础用法</View>\n          <Space>\n            <Avatar src={demoAvatarImages[0]} />\n            <Avatar src={demoAvatarImages[1]} />\n          </Space>\n        </Space>\n        <Space direction={'vertical'}>\n          <View>占位头像</View>\n          <Avatar />\n          <Text style={{color: '#666', fontSize: '14px'}}>如果你不传图片，或者不传性别，或者图片加载失败，那么会显示一个默认的图像</Text>\n        </Space>\n        <Space direction={'vertical'}>\n          <View>性别默认头像</View>\n          <Space>\n            <Avatar gender={'F'} />\n            <Avatar gender={'f'} />\n            <Avatar gender={'female'} />\n          </Space>\n          <Space>\n            <Avatar gender={'M'} />\n            <Avatar gender={'m'} />\n            <Avatar gender={'male'} />\n          </Space>\n        </Space>\n        <Space direction={'vertical'}>\n          <View>自定义尺寸</View>\n          <Space>\n            <Avatar gender={'F'} />\n            <Avatar gender={'f'} size={64} />\n            <Avatar gender={'female'} size={80} />\n          </Space>\n        </Space>\n        <Space direction={'vertical'}>\n          <View>自定义圆角</View>\n          <Space>\n            <Avatar src={demoAvatarImages[0]} style={{'--border-radius': '10%'}} />\n            <Avatar src={demoAvatarImages[1]} style={{'--border-radius': '12px'}} />\n          </Space>\n        </Space>\n      </Space>\n    );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Badge 徽标","description":"Badge 徽标","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Badge, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst style = `\n  {\n    display: block;\n    background: #666666;\n    width: 40px;\n    height: 40px;\n    border-radius: 8px;\n  }\n`;\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Space>\n          <Badge content={1}>Badge</Badge>\n          <Badge content={'新'}><View style={style}/></Badge>\n          <Badge content={Badge.dot}><View style={style}/></Badge>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>带边框</View>\n        <Badge content={'更新啦'} bordered><View style={style}/></Badge>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>独立使用</View>\n        <Space>\n          <Badge content='99+' />\n          <Badge content='新消息!' />\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义颜色</View>\n        <Space>\n          <Badge color='#108ee9' content={Badge.dot}><View style={style}/></Badge>\n          <Badge color='#87d068' content={Badge.dot}><View style={style}/></Badge>\n          <Badge content={Badge.dot}><View style={style}/></Badge>\n          <Badge color='orange' content={Badge.dot}><View style={style}/></Badge>\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Button 按钮","description":"Button 按钮","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Button, Space, DotLoading, Icon} = antdTaro;\nconst {View} = taroComponent;\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'}>\n      <View>按钮尺寸</View>\n      <Space>\n        <Button size={'small'}>small</Button>\n        <Button size={'middle'}>default middle</Button>\n        <Button size={'large'}>large</Button>\n      </Space>\n      <View>填充模式</View>\n      <Space>\n        <Button fill={'solid'}>default</Button>\n        <Button fill={'outline'}>outline</Button>\n        <Button fill={'none'}>none</Button>\n      </Space>\n      <View>加载状态</View>\n      <Space>\n        <Button loading loadingIcon={<DotLoading />}/>\n        <Button loading loadingText={'loadingText'}>loading</Button>\n        <Button loading loadingIcon={<Icon className={\"adm-component\"} type=\"clockCircleFill\"/>}>loading</Button>\n      </Space>\n      <View>禁用状态</View>\n      <Space>\n        <Button disabled>disabled</Button>\n      </Space>\n      <View>形状</View>\n      <Space>\n        <Button shape={'rounded'}>rounded</Button>\n        <Button shape={'rectangular'}>rectangular</Button>\n      </Space>\n      <View>语义按钮</View>\n      <Space>\n        <Button color={'primary'}>primary</Button>\n        <Button color={'success'}>success</Button>\n        <Button color={'danger'}>danger</Button>\n        <Button color={'warning'}>warning</Button>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Card 卡片","description":"Card 卡片","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {Card, Space, Icon, Button} = antdTaro;\nconst {View} = taroComponent;\nconst {showToast} = tarojsTaro;\n\nconst styles = {\n  content: {\n    height: '50px'\n  },\n  footer: {\n    paddingTop: '11px',\n    borderTop: '1px solid #e5e5e5',\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n  customBody: {\n    color: '#00b578'\n  },\n};\n\nconst BaseExample = () => {\n  const onClick = () => {\n    showToast({title: '点击了卡片', icon: 'none'});\n  };\n\n  const onHeaderClick = () => {\n    showToast({title: '点击了卡片Header区域', icon: 'none'});\n  };\n\n  const onBodyClick = () => {\n    showToast({title: '点击了卡片Body区域', icon: 'none'});\n  };\n\n  return (\n    <Space direction={'vertical'} size={30} style={{backgroundColor: '#ddd', padding: '20px', boxSizing: 'border-box'}}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Card title=\"我是title\">我是Card内容</Card>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>没有卡片标题</View>\n        <Card>我是Card内容</Card>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义卡片样式</View>\n        <Card\n          headerStyle={{color: '#1677ff'}}\n          title='卡片标题'\n        >\n          <View style={styles.customBody}>我是Card内容</View>\n        </Card>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义卡片内容</View>\n        <Card\n          title={<View><Icon className={\"adm-component\"} type=\"informationCircleFill\"/>卡片标题</View>}\n          extra={<Icon className={\"adm-component\"} type=\"right-outline\"/>}\n          onBodyClick={onBodyClick}\n          onHeaderClick={onHeaderClick}\n        >\n          <View style={styles.content}>我是Card内容</View>\n          <View style={styles.footer} onClick={e => e.stopPropagation()}>\n            <Button\n              color='primary'\n              onClick={() => {\n                showToast({title: '点击了底部按钮', icon: 'none'});\n              }}\n            >\n              底部按钮\n            </Button>\n          </View>\n        </Card>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"CheckList 可勾选列表","description":"CheckList 可勾选列表","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {CheckList, Space, Icon} = antdTaro;\n\nconst options = [\n  {label: 'A', value: 'A'},\n  {label: 'B', value: 'B'},\n  {label: 'C', value: 'C', disabled: true},\n  {label: 'D', value: 'D', readOnly: true},\n  {label: 'E', value: 'E'},\n];\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <CheckList options={options} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>多选</View>\n      <CheckList multiple options={options.slice(0, 2)} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>自定义选中图标</View>\n      <CheckList options={options} defaultValue={['B']} activeIcon={<Icon className={\"adm-component\"} type=\"checkCircleFill\"/>}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>整组只读</View>\n      <CheckList options={options.slice(0, 2)} defaultValue={['B']} readOnly/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>整组禁用</View>\n      <CheckList options={options.slice(0, 2)} defaultValue={['B']} disabled/>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Collapse 折叠面板","description":"Collapse 折叠面板","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Collapse, Space, Icon} = antdTaro;\nconst {View} = taroComponent;\n\nconst items = [{\n  key: '1', title: '第一项', children: '第一项第一项第一项第一项第一项第一项第一项第一项'\n}, {\n  key: '2', title: '第二项', children: '第二项第二项第二项第二项第二项第二项第二项第二项'\n}, {\n  key: '3', title: '第三项', children: '第三项第三项第三项第三项第三项第三项第三项第三项第三项'\n}];\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Collapse defaultActiveKey={['1']} items={items}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>手风琴模式</View>\n      <Collapse accordion items={items}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>禁用</View>\n      <Collapse accordion items={items.slice(0, 2).concat([Object.assign({}, items[2], {disabled: true})])}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>自定义折叠图标</View>\n      <Collapse\n        arrow={active => <Icon type={active ? \"checkCircleFill\" : 'closeCircleFill'} className=\"adm-component\"/>}\n        items={[\n          items[0],\n          Object.assign({}, items[1], {arrow: <Icon type='exclamationCircleFill' className=\"adm-component\"/>}),\n          Object.assign({}, items[2], {\n            arrow: active => <Icon type={active ? \"informationCircleFill\" : 'clockCircleFill'}\n                                   className=\"adm-component\"/>\n          }),\n        ]}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"DatePicker 日期选择器","description":"DatePicker 日期选择器","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {Button, View} = taroComponent;\nconst {useState} = React;\nconst {DatePicker, Space} = antdTaro;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = () => {\n  const [open, setOpen] = useState(false);\n  const [open2, setOpen2] = useState(false);\n  const [open3, setOpen3] = useState(false);\n  const [open4, setOpen4] = useState(false);\n  const [value, setValue] = useState('');\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Button onClick={() => {\n        setOpen(true);\n      }}>打开</Button>\n      <DatePicker\n        title='时间选择'\n        open={open}\n        onOpenChange={setOpen}\n        onChange={val => {\n          showToast({icon: 'none', title: val.toDateString()})\n        }}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>渲染所选值</View>\n      <Space>\n        <Button onClick={() => {\n          setOpen2(true);\n        }}>打开</Button>\n        <View>{value}</View>\n      </Space>\n      <DatePicker\n        open={open2}\n        onOpenChange={setOpen2}\n        onChange={val => setValue(val.toDateString())}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>控制选择精度</View>\n      <Button onClick={() => {\n        setOpen3(true);\n      }}>年-月</Button>\n      <DatePicker\n        title='时间选择'\n        open={open3}\n        onOpenChange={setOpen3}\n        precision='month'\n        onChange={val => {\n          showToast({icon: 'none', title: val.toDateString()})\n        }}\n      />\n      <Button onClick={() => {\n        setOpen4(true);\n      }}>年-月-日-时-分</Button>\n      <DatePicker\n        title='时间选择'\n        open={open4}\n        onOpenChange={setOpen4}\n        precision='minute'\n        onChange={val => {\n          showToast({icon: 'none', title: val.toDateString()})\n        }}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"DateRangePicker 日期范围选择器","description":"DateRangePicker 日期范围选择器","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {Button, View} = taroComponent;\nconst {useState} = React;\nconst {DateRangePicker, Space} = antdTaro;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = () => {\n  const [open, setOpen] = useState(false);\n  const [open2, setOpen2] = useState(false);\n  const [open3, setOpen3] = useState(false);\n  const [open4, setOpen4] = useState(false);\n  const [value, setValue] = useState([]);\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Button onClick={() => {\n        setOpen(true);\n      }}>打开</Button>\n      <DateRangePicker\n        title='时间选择'\n        open={open}\n        onOpenChange={setOpen}\n        onChange={val => {\n          showToast({icon: 'none', title: val?.map(item => item.toDateString())?.join(' ~ ')})\n        }}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>渲染所选值</View>\n      <Space>\n        <Button onClick={() => {\n          setOpen2(true);\n        }}>打开</Button>\n        <View>{(value || [])?.map(item => item.toLocaleDateString())?.join(' ~ ')}</View>\n      </Space>\n      <DateRangePicker\n        open={open2}\n        onOpenChange={setOpen2}\n        onChange={val => setValue(val)}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>控制选择精度</View>\n      <Button onClick={() => {\n        setOpen3(true);\n      }}>年-月</Button>\n      <DateRangePicker\n        title='时间选择'\n        open={open3}\n        onOpenChange={setOpen3}\n        precision='month'\n        onChange={val => {\n          showToast({icon: 'none', title: val?.map(item => item.toLocaleDateString())?.join(' ~ ')})\n        }}\n      />\n      <Button onClick={() => {\n        setOpen4(true);\n      }}>年-月-日-时-分</Button>\n      <DateRangePicker\n        title='时间选择'\n        open={open4}\n        onOpenChange={setOpen4}\n        precision='minute'\n        onChange={val => {\n          showToast({icon: 'none', title: val?.map(item => item.toTimeString())?.join(' ~ ')})\n        }}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Divider 分隔线","description":"Divider 分隔线","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Divider, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础分割线</View>\n        <Divider />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>带内容的分割线</View>\n        <Divider>内容在中间</Divider>\n        <Divider contentPosition='left'>左侧内容</Divider>\n        <Divider contentPosition='right'>右侧内容</Divider>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>竖向分割线1</View>\n        <Space>\n          <View>Text1</View>\n          <Divider direction={'vertical'} />\n          <View>Text2</View>\n          <Divider direction={'vertical'} />\n          <View>Text3</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义样式</View>\n        <Divider\n          style={{\n            color: '#1677ff',\n            borderColor: '#1677ff',\n            borderStyle: 'dashed',\n          }}\n        >\n          自定义样式\n        </Divider>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"DotLoading 点状加载图标","description":"DotLoading 点状加载图标","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {DotLoading, Space, Button} = antdTaro;\nconst {View} = taroComponent;\nconst BaseExample = () => {\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>默认颜色 Loading</View>\n        <DotLoading/>\n        <View>主题色 Loading</View>\n        <DotLoading color='primary'/>\n        <View>白色 Loading</View>\n        <View style={{backgroundColor: '#ddd'}}>\n          <DotLoading color='white'/>\n        </View>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义颜色 Loading</View>\n        <Space>\n          <DotLoading color='#155ACF'/>\n          <DotLoading color='#00b578'/>\n          <DotLoading color='#ff8f1f'/>\n          <DotLoading color='#ff3141'/>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自动适配字号</View>\n        <Space>\n          <View style={{fontSize: 14}}><DotLoading/></View>\n          <View style={{fontSize: 18}}><DotLoading/></View>\n          <View style={{fontSize: 24}}><DotLoading/></View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>在 Button 中使用</View>\n        <Space>\n          <Button><DotLoading color='#ff3141'/></Button>\n          <Button color={'primary'}><DotLoading /></Button>\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Dropdown 下拉菜单","description":"Dropdown 下拉菜单","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Dropdown, Space, Icon} = antdTaro;\nconst {View} = taroComponent;\n\nconst items = [\n  {key: 'apple', title: 'apple', children: 'apple'},\n  {key: 'banana', title: 'banana', children: 'banana'},\n  {key: 'orange', title: 'orange', children: 'orange'}\n];\n\nconst BaseExample = () => {\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>一列</View>\n        <Dropdown items={items.slice(0, 1)}/>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>两列</View>\n        <Dropdown items={items.slice(0, 2)}/>\n      </Space>\n      <Space direction={'vertical'} closeOnMaskClick={false}>\n        <View>三列</View>\n        <Dropdown items={items}/>\n      </Space>\n      <Space direction={'vertical'} closeOnMaskClick={false}>\n        <View>自定义箭头</View>\n        <Dropdown\n          arrow={<Icon className={\"adm-component\"} type=\"check-mark\"/>}\n          items={[...items.slice(0, 2), Object.assign({}, items[2], {arrow: <Icon className={\"adm-component\"} type=\"checkCircleFill\"/>})]}\n        />\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Ellipsis 文本省略","description":"Ellipsis 文本省略","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View, Text} = taroComponent;\nconst {Ellipsis, Space} = antdTaro;\n\nconst content = 'antd-taro 是一个基于@tarojs/components的高级组件库，它提供基础的UI交互组件，它旨在解决小程序应用中的复杂场景问题。Ellipsis是一个文本省略组件，展示空间不足时，隐去部分内容并用“...”替代。当文本内容长度或高度超过列宽或行高、图表中空间有限、文本内容无法完全显示、自适应调整时宽度变小时就可以考虑使用该组件。'\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <Text>单行省略</Text>\n      <Ellipsis content={content} />\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>展开收起文本</Text>\n      <Ellipsis expandText='展开文本' collapseText='收起文本' content={content} />\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>取消展开收起</Text>\n      <Ellipsis showAction={false} content={content} />\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>默认展开</Text>\n      <Ellipsis defaultExpanded content={content} />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Empty 空状态","description":"Empty 空状态","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Empty, Space, Icon} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Empty />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>描述文字</View>\n        <Empty description={'空状态'} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义样式</View>\n        <Empty description={'暂无数据'} imageStyle={{ width: 128 }} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义图片</View>\n        <Empty description={'暂无数据'} image={<Icon className={\"adm-component\"} type=\"check-mark\" size={'64px'} color={'#ff6700'} />}/>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Grid 栅格","description":"Grid 栅格","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Grid, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst style = `{\n  background: #EEE;\n  text-align: center;\n  color: #999999;\n  height: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  border: solid 2px #999;\n}`;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Grid gap={[10, 20]}>\n          <Grid.Item span={12}>\n            <View style={style}>A</View>\n          </Grid.Item>\n          <Grid.Item span={12}>\n            <View style={style}>B</View>\n          </Grid.Item>\n          <Grid.Item span={8}>\n            <View style={style}>C</View>\n          </Grid.Item>\n          <Grid.Item span={8}>\n            <View style={style}>D</View>\n          </Grid.Item>\n          <Grid.Item span={8}>\n            <View style={style}>E</View>\n          </Grid.Item>\n        </Grid>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>控制格子的跨度</View>\n        <Grid gap={[10, 20]}>\n          <Grid.Item span={8}>\n            <View style={style}>A</View>\n          </Grid.Item>\n          <Grid.Item span={16}>\n            <View style={style}>B</View>\n          </Grid.Item>\n          <Grid.Item span={16}>\n            <View style={style}>C</View>\n          </Grid.Item>\n          <Grid.Item span={8}>\n            <View style={style}>D</View>\n          </Grid.Item>\n          <Grid.Item span={24}>\n            <View style={style}>E</View>\n          </Grid.Item>\n        </Grid>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Icon 图标","description":"Icon 图标","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Icon, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'}>\n      <Space direction = {'vertical'}>\n        <View>基础用法</View>\n        <Space>\n          <Icon type={'clockCircleFill'} className=\"adm-component\" />\n          <Icon type={'informationCircleFill'} className=\"adm-component\" />\n          <Icon type={'checkCircleFill'} className=\"adm-component\" />\n        </Space>\n      </Space>\n      <Space direction = {'vertical'}>\n        <View>自定义尺寸</View>\n        <Space>\n          <Icon type={'clockCircleFill'} className=\"adm-component\" size={'24px'} />\n          <Icon type={'informationCircleFill'} className=\"adm-component\" size={'32px'} />\n          <Icon type={'checkCircleFill'} className=\"adm-component\" size={'40px'} />\n        </Space>\n      </Space>\n      <Space direction = {'vertical'}>\n        <View>自定义颜色</View>\n        <Space>\n          <Icon type={'clockCircleFill'} className=\"adm-component\" color={'#2db7f5'} />\n          <Icon type={'informationCircleFill'} className=\"adm-component\" color={'#87d068'} />\n          <Icon type={'checkCircleFill'} className=\"adm-component\" color={'#ff6430'} />\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Input 输入框","description":"Input 输入框","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Input, Space} = antdTaro;\nconst {View, Text} = taroComponent;\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <Text>可以自动聚焦的 input</Text>\n      <Input type='text' placeholder='将会获取焦点' focus/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>控制最大输入长度的 input</Text>\n      <Input type='text' placeholder='最大输入长度为 10' maxLength={10}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>数字输入的 input</Text>\n      <Input type='number' placeholder='这是一个数字输入框'/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>密码输入的 input</Text>\n      <Input type='password' password placeholder='这是一个密码输入框'/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>带小数点的 input</Text>\n      <Input type='digit' placeholder='带小数点的数字键盘'/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>身份证输入的 input</Text>\n      <Input type='idcard' placeholder='身份证输入键盘'/>\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>控制占位符颜色的 input</Text>\n      <Input type='text' placeholder='占位符字体是红色的' placeholderStyle='color:red'/>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"List 列表","description":"List 列表","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {List,Switch,Icon} = antdTaro;\nconst {View} = taroComponent;\nconst BaseExample = () => {\n    return <View style={{ background: '#eee' }}>\n        <List header='基础用法'>\n            <List.Item>1</List.Item>\n            <List.Item>2</List.Item>\n            <List.Item>3</List.Item>\n        </List>\n\n        <List header='可点击列表'>\n            <List.Item prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>} onClick={() => {\n            }}>\n                账单\n            </List.Item>\n            <List.Item prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>} onClick={() => {\n            }}>\n                总资产\n            </List.Item>\n            <List.Item prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>} onClick={() => {\n            }}>\n                设置\n            </List.Item>\n        </List>\n\n        <List header='复杂列表' mode=\"card\">\n            <List.Item extra={<Switch defaultChecked/>}>新消息通知</List.Item>\n            <List.Item extra='未开启' clickable>\n                大字号模式\n            </List.Item>\n            <List.Item description='管理已授权的产品和设备' clickable>\n                授权管理\n            </List.Item>\n            <List.Item title='副标题信息A' description='副标题信息B' clickable>\n                这里是主信息\n            </List.Item>\n        </List>\n\n        <List header='禁用状态'>\n            <List.Item disabled clickable prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>}>\n                账单\n            </List.Item>\n            <List.Item disabled prefix={<Icon className={\"adm-component\"} type=\"informationCircleFill\"/>}>\n                总资产\n            </List.Item>\n        </List>\n    </View>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Navbar 导航栏","description":"Navbar 导航栏","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {NavBar, Space} = antdTaro;\nconst {View} = taroComponent;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = () => {\n  const back = () => showToast({\n    title: '点击了返回区域',\n    duration: 1000,\n    icon: 'none'\n  })\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <NavBar onBack={back}>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>不展示返回按钮</View>\n        <NavBar backArrow={false}>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>返回按钮显示文字</View>\n        <NavBar onBack={back} back='返回'>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义左侧区域</View>\n        <NavBar onBack={back} back='返回' left={'关闭'}>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义右侧区域</View>\n        <NavBar onBack={back} back='返回' left={'关闭'} right={'关闭'}>标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>标题超长</View>\n        <NavBar onBack={back}>一条长长长长长长长长长长长长长长的标题</NavBar>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>显示副标题</View>\n        <NavBar onBack={back}>\n          <View>\n            <View>标题</View>\n            <View style={{fontSize: '12px'}}>副标题</View>\n          </View>\n        </NavBar>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Picker 选择器","description":"Picker 选择器","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Button, View} = taroComponent;\nconst {useState} = React;\nconst {Space, Picker} = antdTaro;\n\nconst basicColumns = [\n  [\n    { label: '周一', value: 'Mon' },\n    { label: '周二', value: 'Tues' },\n    { label: '周三', value: 'Wed' },\n    { label: '周四', value: 'Thur' },\n    { label: '周五', value: 'Fri' },\n  ],\n  [\n    { label: '上午', value: 'am' },\n    { label: '下午', value: 'pm' },\n  ],\n];\n\nconst BaseExample = () => {\n  const [open,setOpen] = useState(false);\n  const [open2,setOpen2] = useState(false);\n  const [value, setValue] = useState([]);\n\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Button onClick={()=>{\n        setOpen(true);\n      }}>打开</Button>\n      <Picker\n        open={open}\n        onOpenChange={setOpen}\n        columns={basicColumns}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>渲染所选值</View>\n      <Space>\n        <Button onClick={()=>{\n          setOpen2(true);\n        }}>打开</Button>\n        <View>{value ? value.join(',') : '未选择'}</View>\n      </Space>\n      <Picker\n        open={open2}\n        onOpenChange={setOpen2}\n        onChange={setValue}\n        columns={basicColumns}\n        value={value}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Popup 弹出菜单","description":"Popup 弹出菜单","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Popup, Button, Space} = antdTaro;\nconst {useState} = React;\nconst {Text} = taroComponent;\n\nconst BaseExample = () => {\n  const [open, setOpen] = useState('');\n  const [open2, setOpen2] = useState('');\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <Text>基础用法</Text>\n        <Space wrap>\n          {['center', 'top', 'bottom', 'left', 'right'].map((position) => {\n            return <>\n              <Button onClick={() => {\n                setOpen(position);\n              }}>从{position}打开</Button>\n              <Popup open={open === position} onOpenChange={(open) => {\n                if (open) {\n                  setOpen(position);\n                } else {\n                  setOpen('');\n                }\n              }} position={position}>\n                popup窗口{position}\n              </Popup>\n            </>\n          })}\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <Text>显示关闭按钮</Text>\n        <Button onClick={() => {\n          setOpen2('bottom');\n        }}>从底部打开</Button>\n        <Popup showCloseButton open={open2 === 'bottom'} onOpenChange={(open) => {\n          if (open) {\n            setOpen2('bottom');\n          } else {\n            setOpen2('');\n          }\n        }} position={'bottom'}>\n          popup窗口\n        </Popup>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n\n"},{"title":"Result 结果","description":"Result 结果","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Result, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <Space direction={'vertical'}>\n      <Space wrap direction={'vertical'}>\n        <View>Status</View>\n        <Result status={'success'} description={'success'}/>\n        <Result status={'error'} description={'error'}/>\n        <Result status={'info'} description={'info'}/>\n        <Result status={'waiting'} description={'waiting'}/>\n        <Result status={'warning'} description={'warning'}/>\n      </Space>\n      <Space wrap direction={'vertical'}>\n        <View>Title</View>\n        <Result status={'success'} description={'success'} title={'success'}/>\n        <Result status={'error'} description={'error'} title={'error'}/>\n        <Result status={'info'} description={'info'} title={'info'}/>\n        <Result status={'waiting'} description={'waiting'} title={'waiting'}/>\n        <Result status={'warning'} description={'warning'} title={'warning'}/>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"SafeArea 安全区","description":"SafeArea 安全区","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {SafeArea, Space} = antdTaro;\nconst {View} = taroComponent;\n\nconst BaseExample = ()=>{\n  return (\n    <View>\n      <View style={{background: '#eee'}}><SafeArea position={'top'}/></View>\n      <View>Aliqua consectetur enim commodo labore Lorem in cillum fugiat amet fugiat nulla laboris nulla. Exercitation mollit do culpa deserunt. Culpa ad dolor culpa sunt adipisicing magna nostrud pariatur aliqua et est ullamco. Enim voluptate ea cillum minim et commodo qui officia. Nisi labore laborum consectetur culpa ut. Esse dolor culpa officia elit nisi amet eiusmod sunt ipsum. Ut ex Lorem consectetur cupidatat duis do. Ad officia duis laborum enim veniam fugiat elit eu cillum anim reprehenderit. Ex quis est amet cupidatat laboris nisi nisi veniam ea voluptate culpa. Do nisi fugiat laboris. Dolore ut laborum sint exercitation eiusmod consectetur anim. Esse reprehenderit ex aute tempor eiusmod do proident minim cillum incididunt. Est aliquip aute non id tempor aliqua. Culpa labore id elit velit qui minim reprehenderit. Voluptate esse aliquip ullamco fugiat occaecat Lorem non pariatur cupidatat ullamco esse ex. Quis exercitation enim aliquip proident magna occaecat sint quis. Fugiat pariatur ad nisi eiusmod culpa dolor. Enim in aliquip magna anim duis adipisicing duis quis fugiat ad nulla. Ullamco eu reprehenderit exercitation eu aliqua aliquip. Cupidatat consectetur cupidatat dolore eiusmod do tempor sint in deserunt velit amet id excepteur pariatur. Irure nostrud labore cupidatat consectetur cupidatat qui non ullamco cupidatat cillum. Labore Lorem proident fugiat occaecat laborum sint sint in pariatur sit irure. Velit aliquip occaecat magna id aliqua laboris adipisicing amet eiusmod do sint consectetur culpa culpa. Culpa nostrud ad occaecat consequat. Mollit irure voluptate in reprehenderit Lorem duis nisi velit duis. Sunt veniam et cupidatat tempor laborum sint deserunt eiusmod cillum commodo cupidatat Lorem sit ut. Qui dolor ea do aliquip dolore esse culpa minim velit qui nulla nisi est. Dolor Lorem eiusmod aliquip fugiat aliqua sint irure qui esse aliquip in ut ad. Ipsum ullamco culpa non incididunt Lorem labore occaecat. Nostrud enim ipsum sit. Ipsum quis occaecat consequat amet incididunt amet veniam ea dolor ullamco reprehenderit est quis nisi reprehenderit. Ipsum occaecat mollit voluptate sint est culpa elit magna dolor id occaecat veniam eiusmod ad proident. Sit adipisicing elit est culpa laborum magna nostrud aliqua laboris sint eiusmod elit nulla. Voluptate fugiat dolore dolore pariatur ut. Eiusmod cillum duis deserunt culpa eiusmod aliqua amet Lorem esse amet est est. Do fugiat pariatur eiusmod labore. Sint anim dolore amet aliquip enim labore commodo veniam esse consectetur culpa mollit proident et velit. Eiusmod ut duis eiusmod aliqua dolore exercitation elit voluptate ipsum voluptate incididunt consectetur adipisicing. Ad id et mollit aliqua elit elit ut in tempor consectetur dolore pariatur velit reprehenderit duis. Nulla occaecat velit aliquip in. Incididunt eiusmod minim ea fugiat esse fugiat fugiat enim amet. Incididunt ipsum in labore esse aliqua exercitation ex elit id ullamco. Laborum ipsum sint mollit aliqua incididunt labore cillum anim et exercitation ullamco Lorem mollit. Sit enim enim consequat sit id elit non. Dolor mollit nisi qui elit minim minim velit ex incididunt elit ullamco et dolore dolor. Aliqua magna non id minim mollit est et irure duis aliqua. Ut sint amet et sint. Aliqua reprehenderit duis sit labore. Nostrud eu velit aute et qui. Quis sit ullamco deserunt excepteur. Eiusmod est Lorem quis incididunt aute ipsum elit ea sit culpa velit quis ullamco aliqua. Laboris aute sit quis non. Exercitation ullamco elit et minim. Excepteur veniam incididunt ex nisi ex sint non. Quis sit aute aliqua sunt in voluptate sint velit sit laboris ipsum. Commodo labore dolor fugiat ex. Do officia cillum adipisicing velit commodo minim cupidatat cillum dolor exercitation magna consequat sunt commodo aute. Veniam non reprehenderit enim est amet laborum nisi duis ut deserunt aute eu. Laboris mollit sit aliquip elit laboris mollit nisi eu voluptate minim cillum. Do incididunt reprehenderit nisi anim ad. Qui reprehenderit non laboris. Sint proident proident commodo laboris sit ullamco. Minim dolore sunt ut nostrud.</View>\n      <View style={{background: '#eee'}}><SafeArea position={'bottom'}/></View>\n    </View>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"ScrollHeader 滚动标头","description":"ScrollHeader 滚动标头","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View,Text} = taroComponent;\nconst {ScrollHeader, Space, Icon} = antdTaro;\nconst {useId, useState} = React;\n\nconst ScrollHeaderComponent = (props) => {\n  const containerId = useId().replace(/:/g, '_');\n  const [activeKey, setActiveKey] = useState('0');\n  return (\n    <ScrollHeader className={`${containerId}-scroll-header-scroll-view`} {...props}>\n      {\n        ({scrollTo}) => Array(10).fill('').map((_item, index) => (\n          <View\n            key={`index-${index}`}\n            id={`${containerId}_${index}`}\n            style={Object.assign({padding: '20px', textAlign: 'center', display: 'inline-block'}, index.toString() === activeKey ? {color: '#ff6700', border: '1px solid #ff6700'} : {})}\n            onClick={() => {\n              setActiveKey(index.toString());\n              scrollTo(`${containerId}_${index.toString()}`);\n            }}\n          >\n            View-{index}\n          </View>\n        ))\n      }\n    </ScrollHeader>\n  );\n};\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <Text>基础用法</Text>\n      <ScrollHeaderComponent />\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>不展示更多按钮</Text>\n      <ScrollHeaderComponent showMore={false} />\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>自定义更多按钮</Text>\n      <ScrollHeaderComponent showMore icon={<Icon className={\"adm-component\"} type=\"right-outline\"/>} />\n    </Space>\n    <Space direction={'vertical'}>\n      <Text>默认打开更多选项</Text>\n      <ScrollHeaderComponent defaultOpen/>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"SearchBar 搜索框","description":"SearchBar 搜索框","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {SearchBar, Space, Button} = antdTaro;\nconst {View} = taroComponent;\nconst {useRef} = React;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = ()=>{\n  const searchRef = useRef(null);\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <SearchBar placeholder='请输入内容' />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>不显示搜索按钮</View>\n        <SearchBar showSearchButton={false} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义搜索按钮</View>\n        <SearchBar autoFocus searchText='立即搜索' />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>搜索按钮长显</View>\n        <SearchBar placeholder='请输入内容' showSearchButton={() => true} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>事件监听和 Ref</View>\n        <SearchBar\n          ref={searchRef}\n          placeholder='请输入内容'\n          onSearch={val => {\n            console.log('你搜索了')\n            showToast({title: `你搜索了：${val}`, icon: 'none'})\n          }}\n          onFocus={() => {\n            console.log('获得焦点')\n            setTimeout(() => searchRef.current?.focus(), 300)\n\n          }}\n          onBlur={() => {\n            console.log('失去焦点')\n          }}\n          onCancel={() => {\n            console.log('取消搜索')\n          }}\n        />\n        <Space>\n          <Button\n            onClick={() => {\n              searchRef.current?.clear()\n            }}\n          >\n            清空内容\n          </Button>\n          <Button\n            onClick={() => {\n              searchRef.current?.focus()\n            }}\n          >\n            激活\n          </Button>\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Selector 选择组","description":"Selector 选择组","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Selector} = antdTaro;\nconst {View} = taroComponent;\nconst BaseExample = () => {\n  return <View>\n    <Selector options={[{label: '男', value: '0'}, {label: '女', value: '1'}]}/>\n    <View style={{height: '20px'}}></View>\n    <Selector multiple options={[\n      {label: '选项1', value: '0'},\n      {label: '选项2', value: '1'},\n      {label: '选项3', value: '2'},\n      {label: '选项4', value: '3'},\n      {label: '选项5', value: '5'}\n    ]}/>\n  </View>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Slider 滑动输入条","description":"Slider 滑动输入条","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"},{"name":"tarojsTaro","packageName":"@tarojs/taro"}],"code":"const {Slider, Space} = antdTaro;\nconst {View} = taroComponent;\nconst {showToast} = tarojsTaro;\n\nconst BaseExample = ()=>{\n  const toastValue = (value) => {\n    let text = ''\n    if (typeof value === 'number') {\n      text = `${value}`\n    } else {\n      text = `[${value.join(',')}]`\n    }\n    showToast({icon: 'none', title: `当前选中值为：${text}`});\n    console.log(value);\n  }\n\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>基础用法</View>\n        <Slider onChange={toastValue} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>设置 step</View>\n        <Slider ticks step={10} />\n      </Space>\n      <Space direction={'vertical'}>\n        <View>显示当前 value</View>\n        <Slider step={1} value={50} showValue/>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>设置最小/最大值</View>\n        <Slider step={1} value={100} showValue min={50} max={200}/>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample />);\n\n"},{"title":"Space 间距","description":"Space 间距","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Space, Button} = antdTaro;\nconst {View} = taroComponent;\n\nconst style = `{\n  font-size: 12px;\n  background: #ddd;\n  padding: 20px;\n  box-sizing: border-box;\n}`;\n\nconst styleWidth = `{\n  font-size: 12px;\n  max-width: 80px;\n}`;\n\nconst BaseExample = () => {\n  return (\n    <Space direction={'vertical'} size={30}>\n      <Space direction={'vertical'}>\n        <View>水平方向的间距</View>\n        <Space>\n          <View style={style}>horizontal</View>\n          <View style={style}>horizontal</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>换行</View>\n        <Space wrap>\n          {\n            Array(10).fill().map((_item, index) => (\n              <View style={style} key={`view${index}`}>view{index}</View>\n            ))\n          }\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>垂直方向的间距</View>\n        <Space direction={'vertical'}>\n          <View style={style}>vertical</View>\n          <View style={style}>vertical</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>自定义间距大小</View>\n        <Space size={16} wrap>\n          <View style={style}>horizontal</View>\n          <View style={style}>horizontal</View>\n          <View style={style}>horizontal</View>\n          <View style={style}>horizontal</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>渲染为块级元素</View>\n        <Space direction='vertical' block>\n          <Button>按钮1</Button>\n          <Button>按钮2</Button>\n          <Button>按钮3</Button>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>主轴对齐方式</View>\n        <Space justify='center' block>\n          <View style={style + styleWidth}>1</View>\n          <View style={style + styleWidth}>2{`\\n`}2{`\\n`}2</View>\n          <View style={style + styleWidth}>3{`\\n`}3{`\\n`}3{`\\n`}3{`\\n`}3</View>\n        </Space>\n      </Space>\n      <Space direction={'vertical'}>\n        <View>交叉轴对齐方式</View>\n        <Space justify='center' block>\n          <View style={style + styleWidth}>1</View>\n          <View style={style + styleWidth}>2{`\\n`}2{`\\n`}2</View>\n          <View style={style + styleWidth}>3{`\\n`}3{`\\n`}3{`\\n`}3{`\\n`}3</View>\n        </Space>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Steps 步骤条","description":"Steps 步骤条","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Steps, Space} = antdTaro;\nconst {Text} = taroComponent;\n\nconst items = [\n  {title: '第一步', description: '完成时间：2020-12-01 12:30'},\n  {title: '第二步', description: '完成时间：2020-12-01 12:30'},\n  {title: '第三步', description: '完成时间：2020-12-01 12:30'},\n  {title: '第四步', description: '完成时间：2020-12-01 12:30'}\n];\n\nconst BaseExample = () => {\n  return (\n    <Space direction='vertical'>\n      <Space direction='vertical'>\n        <Text>横向步骤条</Text>\n        <Steps current={2} items={items}/>\n      </Space>\n      <Space direction='vertical'>\n        <Text>横向步骤条失败</Text>\n        <Steps current={2} items={[...items.slice(0, 3), Object.assign({}, items[3], {status: 'error'})]}/>\n      </Space>\n      <Space direction='vertical'>\n        <Text>纵向步骤条</Text>\n        <Steps direction='vertical' current={2} items={items}/>\n      </Space>\n      <Space direction='vertical'>\n        <Text>纵向步骤条失败</Text>\n        <Steps direction='vertical' current={2} items={[...items.slice(0, 3), Object.assign({}, items[3], {status: 'error'})]}/>\n      </Space>\n    </Space>\n  );\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Switch 开关","description":"Switch 开关","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {Switch, Space} = antdTaro;\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Switch />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>有默认值</View>\n      <Switch checked />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>禁用</View>\n      <Switch disabled />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>type 为 checkbox</View>\n      <Switch checked type={'checkbox'} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>color</View>\n      <Switch checked color={'#04BE02'} />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"TabBar 标签栏","description":"TabBar 标签栏","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {useState} = React;\nconst {TabBar, Space, Icon, Badge} = antdTaro;\n\nconst tabs = [\n  {key: 'index', title: '首页', icon: <Icon type={'clockCircleFill'} className=\"adm-component\" />},\n  {key: 'info', title: '信息', icon: <Icon type={'informationCircleFill'} className=\"adm-component\" />},\n  {key: 'question', title: '问题', icon: <Icon type={'exclamationCircleFill'} className=\"adm-component\" />},\n];\n\nconst tabsPath = [\n  {key: 'index', title: '首页', icon: <Icon type={'clockCircleFill'} className=\"adm-component\" />, path: '/'},\n  {key: 'info', title: '信息', icon: <Icon type={'informationCircleFill'} className=\"adm-component\" />, path: '/info'},\n  {key: 'question', title: '问题', icon: <Icon type={'exclamationCircleFill'} className=\"adm-component\" />, path: '/question'},\n];\n\nconst tabsBadge = [\n  {key: 'index', title: '首页', icon: <Icon type={'clockCircleFill'} className=\"adm-component\" />, badge: Badge.dot},\n  {key: 'info', title: '信息', icon: <Icon type={'informationCircleFill'} className=\"adm-component\" />, badge: 5},\n  {key: 'question', title: '问题', icon: <Icon type={'exclamationCircleFill'} className=\"adm-component\" />, badge: '99+'},\n  {key: 'check', title: 'Check', icon: <Icon type={'checkCircleFill'} className=\"adm-component\" />},\n];\n\nconst BaseExample = () => {\n  const [activeKey, setActiveKey] = useState('info')\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <TabBar items={tabs}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>带有路由</View>\n      <TabBar items={tabsPath}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>徽标</View>\n      <TabBar items={tabsBadge} style={{'--tab-bar-padding-top': '4px'}}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>仅图标</View>\n      <TabBar items={tabs.map(({title, ...item}) => item)}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>仅标题</View>\n      <TabBar items={tabs.map(({icon, ...item}) => item)}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>受控组件</View>\n      <TabBar items={tabs} activeKey={activeKey} onChange={setActiveKey}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>开启安全区</View>\n      <TabBar items={tabs} safeArea/>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Tabs 选项卡","description":"Tabs 选项卡","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {Tabs, Space, Icon, Badge} = antdTaro;\nconst {View} = taroComponent;\nconst {useState} = React;\nconst BaseExample = () => {\n  const [activeKey, setActiveKey] = useState('tab2');\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Tabs swiperOpen items={[{\n        key: 'tab1', title: 'tab1', children: <View>\n          哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈啊哈哈哈哈哈哈\n        </View>\n      }, {key: 'tab2', title: 'tab2', children: <>tab2</>}]}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>没有内容区</View>\n      <Tabs.Header items={[{key: 'tab1', title: 'tab1'}, {key: 'tab2', title: 'tab2'}]}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>禁用状态</View>\n      <Tabs.Header items={[{key: 'tab1', title: 'tab1'}, {key: 'tab2', title: 'tab2', disabled: true}]}/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>超长自动滚动</View>\n      <Tabs\n        swiperOpen\n        items={[\n          {key: 'tab1', title: '超长自动滚动tab1', children: <>tab1</>},\n          {key: 'tab2', title: '超长自动滚动tab2', children: <>tab2</>},\n          {key: 'tab3', title: '超长自动滚动tab3', children: <>tab3</>},\n          {key: 'tab4', title: '超长自动滚动tab4', children: <>tab4</>},\n        ]}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>默认选中值</View>\n      <Tabs.Header\n        defaultActiveKey={activeKey}\n        onChange={setActiveKey}\n        items={[\n          {key: 'tab1', title: '超长自动滚动tab1', children: <>tab1</>},\n          {key: 'tab2', title: '超长自动滚动tab2', children: <>tab2</>},\n          {key: 'tab3', title: '超长自动滚动tab3', children: <>tab3</>},\n          {key: 'tab4', title: '超长自动滚动tab4', children: <>tab4</>},\n        ]}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>自定义拓展图标</View>\n      <Tabs\n        showMore\n        moreIcon={<Icon className={\"adm-component\"} type=\"right-outline\"/>}\n        items={[\n          {key: 'tab1', title: '超长自动滚动tab1', children: <>tab1</>},\n          {key: 'tab2', title: '超长自动滚动tab2', children: <>tab2</>},\n          {key: 'tab3', title: '超长自动滚动tab3', children: <>tab3</>},\n          {key: 'tab4', title: '超长自动滚动tab4', children: <>tab4</>},\n        ]}\n      />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>搭配 Badge 使用</View>\n      <Tabs\n        items={[\n          {key: 'tab1', title: 'tab1', children: <>tab1</>},\n          {key: 'tab2', title: 'tab2', children: <>tab2</>},\n          {key: 'tab3', title: 'tab3', children: <>tab3</>},\n          {key: 'tab4', title: <Badge content={1}>tab4</Badge>, children: <>tab4</>},\n        ]}\n      />\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"Tag 标签","description":"Tag 标签","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {Tag, Space} = antdTaro;\n\nconst BaseExample = () => {\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基础用法</View>\n      <Tag>123</Tag>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>线框标签</View>\n      <Space wrap>\n        <Tag color='primary' fill='outline'>Primary</Tag>\n        <Tag color='#87d068' fill='outline'>#87d068</Tag>\n        <Tag color='#ff6430' fill='outline'>#ff6430</Tag>\n      </Space>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>语义标签</View>\n      <Space wrap>\n        <Tag color='default'>Default</Tag>\n        <Tag color='primary'>测试</Tag>\n        <Tag color='success'>Success</Tag>\n        <Tag color='warning'>Warning</Tag>\n        <Tag color='danger'>Danger</Tag>\n      </Space>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>圆角标签</View>\n      <Tag round color='#2db7f5'>圆角标签</Tag>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>自定义颜色</View>\n      <Space>\n        <Tag color='#2db7f5'>#2db7f5</Tag>\n        <Tag color='#87d068'>#87d068</Tag>\n        <Tag color='#108ee9'>#108ee9</Tag>\n      </Space>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>背景色透明度</View>\n      <Space>\n        <Tag color='#2db7f5' opacity>#2db7f5</Tag>\n        <Tag color='#87d068' opacity>#87d068</Tag>\n        <Tag color='#108ee9' opacity>#108ee9</Tag>\n      </Space>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>通过 CSS 变量个性化</View>\n      <Space>\n        <Tag color='primary' fill='outline' style={{ '--border-radius': '6px' }}>Primary</Tag>\n        <Tag color='success' fill='outline' style={{ '--background-color': '#c8f7cFFF' }}>Success</Tag>\n        <Tag color='warning' style={{ '--text-color': 'var(--adm-color-text)' }}>Warning</Tag>\n        <Tag color='danger' fill='outline' style={{ '--border-color': 'var(--adm-color-weak)' }}>Danger</Tag>\n      </Space>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"},{"title":"TextArea 文本域","description":"TextArea 文本域","scope":[{"name":"antdTaro","packageName":"@kne/antd-taro"},{"name":"taroComponent","packageName":"@tarojs/components"}],"code":"const {View} = taroComponent;\nconst {TextArea, Space} = antdTaro;\nconst {useState} = React;\n\nconst content = 'antd-taro 是一个基于@tarojs/components的高级组件库，它提供基础的UI交互组件，它旨在解决小程序应用中的复杂场景问题。Ellipsis是一个文本省略组件，展示空间不足时，隐去部分内容并用“...”替代。当文本内容长度或高度超过列宽或行高、图表中空间有限、文本内容无法完全显示、自适应调整时宽度变小时就可以考虑使用该组件。'\n\nconst BaseExample = () => {\n  const [value, setValue] = useState(content)\n  return <Space direction={'vertical'} size={30}>\n    <Space direction={'vertical'}>\n      <View>基本的输入框组件</View>\n      <TextArea value={value} onChange={setValue} maxLength={-1} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>字数限制</View>\n      <TextArea placeholder='请输入内容' maxLength={500} />\n    </Space>\n    <Space direction={'vertical'}>\n      <View>禁用状态</View>\n      <TextArea placeholder='请输入内容' value={'北极星垂地，\\n东山月满川。'} disabled/>\n    </Space>\n    <Space direction={'vertical'}>\n      <View>输入区域高度自适应，不会出现滚动条</View>\n      <TextArea placeholder='请输入内容' autoSize maxLength={-1}/>\n    </Space>\n  </Space>;\n};\n\nrender(<BaseExample/>);\n\n"}]}}
