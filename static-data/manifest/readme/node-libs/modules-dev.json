{"name":"modules-dev","summary":"<p>modules-dev为所有的项目提供了一个开发环境，让你在开发远程组件或者前端库时有一个运行时的示例展示，并且当对你的项目进行发布的时候可以集成到kne-union文档之中</p>\n<p>modules-dev分为三个部分</p>\n<ol>\n<li>构建工具部分，它在craco基础上封装了一系列插件用以支持文档解析已经远程组件支持</li>\n<li>Example部分，它给前端提供了一个集成化的开发环境用来实时预览组件的example部分</li>\n<li>脚手架模板部分，它提供了两个命令行工具 modules-dev-create 和\nmodules-dev-libs-init，modules-dev-create可以在远程组件项目中添加一个新的组件即文档目录结构，modules-dev-libs-init可以给前端库提供一个可以运行的开发环境。</li>\n</ol>\n<h3>构建工具使用</h3>\n<ol>\n<li>远程组件\ncraco.config.js</li>\n</ol>\n<pre><code class=\"language-js\">const {CracoRemoteComponentsPlugin} = require(\"@kne/modules-dev\");\n\nmodule.exports = {\n    plugins: [{\n        plugin: CracoRemoteComponentsPlugin\n    }]\n};\n</code></pre>\n<ol start=\"2\">\n<li>组件库</li>\n</ol>\n<p>example/craco.config.js</p>\n<pre><code class=\"language-js\">const {CracoLibsExamplePlugin} = require(\"@kne/modules-dev\");\n\nmodule.exports = {\n    plugins: [{\n        plugin: CracoLibsExamplePlugin\n    }]\n};\n</code></pre>\n<p>注意：以上代码通常由命令行工具生成，不需要自己编写</p>\n<h3>Example部分使用</h3>\n<ol>\n<li>远程组件库中</li>\n</ol>\n<p>src/App.js</p>\n<pre><code class=\"language-jsx\">import createEntry from \"@kne/modules-dev/dist/create-entry\";\nimport \"@kne/modules-dev/dist/create-entry.css\";\nimport readme from \"readme\";\n\nconst ExampleRoutes = createEntry.ExampleRoutes;\n\nconst App = ({preset, themeToken, ...props}) =&gt; {\n    return (&lt;HashRouter&gt;\n        &lt;ExampleRoutes\n            {...props}\n            paths={[{\n                key: \"components\", path: \"/\", title: \"首页\",\n            },]}\n            preset={preset}\n            themeToken={themeToken}\n            readme={readme}\n        /&gt;\n    &lt;/HashRouter&gt;);\n};\n</code></pre>\n<ol start=\"2\">\n<li>业务项目中</li>\n</ol>\n<p>src/bootstrap.js</p>\n<pre><code class=\"language-jsx\">if (process.env.NODE_ENV === 'development') {\n    import('@kne/modules-dev/dist/create-entry.css');\n    import('@kne/modules-dev/dist/create-entry').then(module =&gt; {\n        const Entry = module.default(App);\n        root.render(&lt;Entry preset={globalPreset} projectName=\"erc\" themeToken={globalPreset.themeToken}/&gt;);\n    });\n} else {\n    root.render(\n        &lt;BrowserRouter&gt;\n            &lt;App/&gt;\n        &lt;/BrowserRouter&gt;\n    );\n}\n</code></pre>\n<p>注意：以上代码通常由命令行工具生成，不需要自己编写</p>","api":"<pre><code class=\"language-js\">const {CracoRemoteComponentsPlugin,CracoLibsExamplePlugin,env} = require('@kne/modules-dev');\n</code></pre>\n<h4>CracoRemoteComponentsPlugin</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n</table>\n<h4>CracoLibsExamplePlugin</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n</table>\n<h4>env</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n</table>\n<pre><code class=\"language-js\">import createEntry from '@kne/modules-dev/dist/create-entry';\n\nconst Entry = createEntry(children);\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n</table>","example":{"isFull":false,"className":"modules_dev_4d41b","style":"","list":[]}}
