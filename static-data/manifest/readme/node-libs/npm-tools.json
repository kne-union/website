{"name":"npm-tools","summary":"<p>node lib 集成</p>\n<h3>latestVersion</h3>\n<p>获取想要知道的包最后版本</p>\n<pre><code class=\"language-shell\"> npx @kne/npm-tools latestVersion @kne/mini-core \n</code></pre>\n<p>output:</p>\n<pre><code class=\"language-text\">2.1.5\n</code></pre>\n<h3>nextMajorVersion</h3>\n<p>在自己项目中运行。\n获取当前版本号后通过计算进行修改，比如原本版本号为 1.0.0，修改后为 2.0.0</p>\n<pre><code class=\"language-shell\">npx @kne/npm-tools nextMajorVersion\n</code></pre>\n<h3>nextMinorVersion</h3>\n<p>在自己项目中运行。\n获取当前版本号后通过计算进行修改，比如原本版本号为 1.0.0，修改后为 1.1.0</p>\n<pre><code class=\"language-shell\">npx @kne/npm-tools nextMajorVersion\n</code></pre>\n<h3>nextPatchVersion</h3>\n<p>在自己项目中运行。\n获取当前版本号后通过计算进行修改，比如原本版本号为 1.0.0，修改后为 1.0.1</p>\n<pre><code class=\"language-shell\">npx @kne/npm-tools nextMajorVersion\n</code></pre>\n<h3>download</h3>\n<p>参考<a href=\"https://www.kne-union.top/#/node-libs/fetch-npm-package\">@kne/fetch-npm-package</a></p>\n<pre><code class=\"language-shell\">npx @kne/npm-tools download [npm-package-name]\n</code></pre>\n<h3>entryHtml</h3>\n<ol>\n<li>获取环境变量中的 部署地址（DEPLOY_URL）、APP_NAME、VERSION</li>\n<li>将 [APP_NAME]、\"static/js\"、\"remoteEntry.js\" 匹配为 URL</li>\n<li>获取入口文件，创建一个新的 DOM 环境，并在其中加载刚获取到的入口文件内容</li>\n<li>拿到 dom 环境的 window，将匹配的 URL 转换到 window 的 head 中</li>\n<li>生成 script 标签，声明 runtimeAppName、runtimePublicUrl 以及 runtimeEnv 参数并赋值</li>\n<li>将 dom 序列化后的内容写入口文件</li>\n</ol>\n<pre><code class=\"language-shell\">npx @kne/npm-tools entryHtml\n</code></pre>\n<h3>manifest</h3>\n<ol>\n<li>获取导出地址</li>\n<li>创建 readme 和 list 文件夹</li>\n<li>读取配置文件信息并返回新的数据\n<ul>\n<li>当前目录下，读取环境变量中的 [MANIFEST_FILE] 文件或者 package.json 配置文件</li>\n<li>将文件内容的 manifest-config 数据重新循环，获取配置中的包名在 npm 中的信息，配置生成新的数据</li>\n</ul>\n</li>\n<li>定义 readme json 数据集合</li>\n<li>将获取到的数据转换，生成新的 manifest.json 文件，并将定义路径和数据放入 readme 数据集合中</li>\n<li>将获取到的数据转换中所有远程加载的包写入 remote-components.json 中</li>\n<li>将 readme 数据集合中的数据分类写入 readme 文件夹内</li>\n<li>将 readme 数据集合中的数据写入 list 文件夹内</li>\n</ol>\n<p><em><strong>list 文件夹主要储存从 npm 中获取到的包数据</strong></em>\n<em><strong>readme 文件夹主要储存每个库中包的 readme 文件数据</strong></em></p>\n<pre><code class=\"language-shell\">npx @kne/npm-tools manifest\n</code></pre>\n<h3>init</h3>\n<p>可以使用 npm-tools 创建一个预置的模板项目</p>\n<pre><code class=\"language-shell\">npx @kne/npm-tools init [project-name] [template-name]\n</code></pre>\n<p>project-name 必填，为创建的项目名，template-name 可选，没有指定的时候会有以下六种模板可供选择，指定的话（如：cra-template）将会使用指定的模板进行创建</p>\n<p>共有六种模板类型可供选择</p>\n<ul>\n<li>NodeJS Libs <a href=\"https://npmmirror.com/package/@kne-template/node\">@kne-template/node</a></li>\n<li>Frontend Libs <a href=\"https://npmmirror.com/package/@kne-template/libs\">@kne-template/libs</a></li>\n<li>Remote Components <a href=\"https://npmmirror.com/package/@kne-template/remote\">@kne-template/remote</a></li>\n<li>Business Project <a href=\"https://npmmirror.com/package/@kne-template/project\">@kne-template/project</a></li>\n<li>WeChat Miniprogram Libs <a href=\"https://npmmirror.com/package/@kne-template/miniprogram-libs\">@kne-template/miniprogram-libs</a></li>\n<li>WeChat Miniprogram\nProject <a href=\"https://npmmirror.com/package/@kne-template/miniprogram-project\">@kne-template/miniprogram-project</a></li>\n</ul>","api":"<p>发布npm包的一些工具脚本</p>","example":{"isFull":false,"className":"npm_tools_801cb","style":"","list":[]}}
